<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/23/2009 4:49:00 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="BL78SRV"
  DTS:CreatorName="RERSDM\tabaku_v"
  DTS:DTSID="{7FC3301F-AFD6-4F71-B155-71C44A28F598}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.7462.6"
  DTS:LocaleID="1040"
  DTS:ObjectName="RER_BCO_1_03_E_Uscite"
  DTS:PackageType="5"
  DTS:ProtectionLevel="2"
  DTS:VersionBuild="143"
  DTS:VersionGUID="{B08E6D9B-56C1-4B00-BE5B-0D7AC9E22B64}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="DWHBCO BCO SA"
      DTS:CreationName="DTS.LogProviderSQLServer.3"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{46839F6B-9489-4543-86BF-875C2B0071DA}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables />
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">5,7,OnError,13,OnPostExecute,14,OnPostValidate,12,OnPreExecute,13,OnPreValidate</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{46839F6B-9489-4543-86BF-875C2B0071DA}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\SF_USC_IMPEGNO"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{4df220c3-7425-4b2f-9a0d-7cb97573b8fd}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="SF_USC_IMPEGNO"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="3">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0556BA1E-49B6-411F-B26B-200B0FE334B7}"
          SQLTask:SqlStatementSource="--SF_USC_IMPEGNO&#xA;-- imposto i parametri fissi per la query, prendendoli da M_PARAMETRI_BW&#xA;DECLARE @ANNO_INIZIO_BW int&#xA;DECLARE @SISTEMA_SORGENTE_BW varchar(50)&#xA;DECLARE @COD_UTENTE_DB2 varchar(50)&#xA;&#xA;SELECT TOP 1&#xA;      @ANNO_INIZIO_BW = ANNO_INIZIO_BW,&#xA;      @SISTEMA_SORGENTE_BW = SISTEMA_SORGENTE,&#xA;      @COD_UTENTE_DB2 = COD_UTENTE_DB2&#xA;FROM M_PARAMETRI_BW&#xA;WHERE CONTESTO = 'GENERALE'&#xA;--------------------------------------------------------&#xA;&#xA;-- TABELLA TEMPORANEA DEL CONSUNTIVO&#xA;&#xA;SELECT *&#xA;INTO #T_ZV_CNS_IMP_R_001&#xA;FROM T_ZV_CNS_IMP_R&#xA;WHERE SOURSYSTEM = @SISTEMA_SORGENTE_BW&#xA;&#xA;-- CREAZIONE S_TABLE&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[SF_USC_IMPEGNO]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [SF_USC_IMPEGNO]&#xA;&#xA;SELECT&#xA;   A.AA_ES AS ESERCIZIO, A.AA_ES+1 AS ANNO_BILANCIO&#xA; , CAST(A.NUM_IMPEGNO AS BIGINT)AS NUMERO_IMPEGNO&#xA; , B.NUMERO_SUBIMPEGNO&#xA; , ISNULL(B.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , ISNULL(B.USC_CATEGORIA_ACQUISTI_VERDI_IDS, -1) AS USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA; , 1 AS POSIZIONE&#xA;    , -IMP_VAR AS IMPORTO_INIZIALE&#xA; , -IMP_VAR AS IMPORTO_ATTUALE&#xA; , 0 AS IMPORTO_INIZIALE_SUBIMP&#xA; , 0 AS IMPORTO_ATTUALE_SUBIMP&#xA; , 0 AS RESIDUO_INIZIALE&#xA; , 0 AS RESIDUO_ATTUALE&#xA; , 0 AS RESIDUO_INIZIALE_SUBIMP&#xA; , 0 AS RESIDUO_ATTUALE_SUBIMP&#xA; , 0 AS ECONOMIA_PER_INSUSSISTENZA&#xA; , 0 AS ECONOMIA_PER_INSUSS_SUBIMP&#xA; , 0 AS ECONOMIA_PER_PERENZIONE&#xA; , 0 AS ECONOMIA_PER_PERENZIONE_SUBIMP&#xA; , -IMP_VAR AS IMPORTO_ORIGINARIO&#xA; , 0 AS IMPORTO_ATTUALE_CORRENTE&#xA; -- NUOVI CAMPO CONSUNTIVO&#xA; , 0 AS IMPORTO_IMPEGNO_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_INIZIALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_FINALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_COMPETENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_RESIDUO_CONSUNTIVO&#xA; , 0 AS IMPORTO_INSUSSISTENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PERENTE_CONSUNTIVO&#xA;  , B.CODICE_ACQUISTI_VERDE AS CODICE_ACQUISTI_VERDE&#xA;INTO #SF_USC_IMPEGNO_001&#xA;FROM #T_TVAR_UI_001 A&#xA; LEFT JOIN S_USC_RIGA_IMPEGNO B&#xA; ON A.AA_ES = B.ESERCIZIO&#xA; AND A.NUM_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.NUM_SUBIMP = ISNULL(B.NUMERO_SUBIMPEGNO, 0)&#xA; AND B.POSIZIONE = 1&#xA;WHERE A.AA_ES &lt; 1984&#xA;UNION ALL&#xA;SELECT A.AA_ES AS ESERCIZIO, A.AA_ES AS ANNO_BILANCIO&#xA; , CAST(A.NUM_IMPEGNO AS BIGINT) AS NUMERO_IMPEGNO, B.NUMERO_SUBIMPEGNO&#xA; , ISNULL(B.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , ISNULL(B.USC_CATEGORIA_ACQUISTI_VERDI_IDS, -1) AS USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA; , 1 AS POSIZIONE&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE A.IMP_INIZIALE END AS IMPORTO_INIZIALE&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE (A.IMP_INIZIALE + A.TOT_VAR_PIU - A.TOT_VAR_MENO) END AS IMPORTO_ATTUALE&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN A.IMP_INIZIALE ELSE 0 END AS IMPORTO_INIZIALE_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN (A.IMP_INIZIALE + A.TOT_VAR_PIU - A.TOT_VAR_MENO) ELSE 0 END AS IMPORTO_ATTUALE_SUBIMP&#xA; , 0 AS RESIDUO_INIZIALE&#xA; , 0 AS RESIDUO_ATTUALE&#xA; , 0 AS RESIDUO_INIZIALE_SUBIMP&#xA; , 0 AS RESIDUO_ATTUALE_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE A.TOT_ECON_INSUSS END AS ECONOMIA_PER_INSUSSISTENZA&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN A.TOT_ECON_INSUSS ELSE 0 END AS ECONOMIA_PER_INSUSS_SUBIMP&#xA; , 0 AS ECONOMIA_PER_PERENZIONE&#xA; , 0 AS ECONOMIA_PER_PERENZIONE_SUBIMP&#xA; , C.IMP_ORIGINARIO AS IMPORTO_ORIGINARIO&#xA; , -- SE L'IMPORTO è PERENTE, IL SUO IMPORTO OC è 0&#xA; -- CASE WHEN F.FLAG_PERENZIONE = 'N' THEN&#xA;   CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0&#xA;    THEN 0&#xA;    ELSE (A.IMP_INIZIALE + A.TOT_VAR_PIU - A.TOT_VAR_MENO&#xA;    + ISNULL(D.IMPORTO_VAR_FUORI_COMPETENZA,0) + ISNULL(E.IMPORTO_VAR_OC_SAP,0))&#xA;   END AS IMPORTO_ATTUALE_CORRENTE--VA CALCOLATO&#xA; -- NUOVI CAMPO CONSUNTIVO&#xA; , 0 AS IMPORTO_IMPEGNO_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_INIZIALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_FINALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_COMPETENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_RESIDUO_CONSUNTIVO&#xA; , 0 AS IMPORTO_INSUSSISTENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PERENTE_CONSUNTIVO&#xA;  , B.CODICE_ACQUISTI_VERDE AS CODICE_ACQUISTI_VERDE&#xA;FROM #T_TUI_COMP_001 A&#xA; LEFT JOIN S_USC_RIGA_IMPEGNO B&#xA; ON A.AA_ES = B.ESERCIZIO&#xA; AND A.NUM_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.NUM_SUBIMP = ISNULL(B.NUMERO_SUBIMPEGNO, 0)&#xA; AND B.POSIZIONE = 1&#xA;  LEFT JOIN #G_T_TUNITA_IMPEGNO_001 C&#xA;  ON A.AA_ES = C.AA_ES&#xA;  AND A.NUM_IMPEGNO = C.NUM_IMPEGNO&#xA;  AND A.NUM_SUBIMP = C.NUM_SUBIMP&#xA;   LEFT JOIN&#xA;   (&#xA;    SELECT AA_ES, NUM_IMPEGNO, SUM(IMP_VAR) AS IMPORTO_VAR_FUORI_COMPETENZA&#xA;    FROM #T_TVAR_UI_001&#xA;    WHERE AA_VAR &gt; AA_ES  --PRENDO LE VARIAZIONI FUORI COMPETENZA&#xA;    AND TIPO_VAR &lt;&gt; 'CO'       -- E CHE NON FANNO PARTE DEL CALCOLO DEL CONSUNTIVO&#xA;    AND COD_VAR &lt;&gt; '4' -- E CHE SONO IN PERENZIONE&#xA;    GROUP BY AA_ES, NUM_IMPEGNO&#xA;   ) D&#xA;   ON A.AA_ES = D.AA_ES&#xA;   AND A.NUM_IMPEGNO = D.NUM_IMPEGNO&#xA;    -- DEVO COMUNQUE ANDARE IN JOIN ANCHE CON LE VARIAZIONI DA SAP&#xA;    -- UNA VOLTA SPENTO IL DB2, POSSONO ANCORA VARIARE...&#xA;    LEFT JOIN ( SELECT ESERCIZIO_IMPEGNO, CAST(RIGHT(NUMERO_IMPEGNO,6) AS INT) AS NUMERO_IMPEGNO&#xA;      , SUM(IMPORTO_VAR_IMPEGNO - IMPORTO_ECONOMIA_PERENZIONE) AS IMPORTO_VAR_OC_SAP&#xA;          FROM #T_VF_VARIAZIONI_IMPEGNI_T&#xA;          WHERE ESERCIZIO_VARIAZIONE &gt; ESERCIZIO_IMPEGNO&#xA;          AND TIPO_VARIAZIONE NOT IN (5)&#xA;          GROUP BY ESERCIZIO_IMPEGNO, CAST(RIGHT(NUMERO_IMPEGNO,6) AS INT)) E&#xA;       ON A.AA_ES = E.ESERCIZIO_IMPEGNO&#xA;       AND A.NUM_IMPEGNO = E.NUMERO_IMPEGNO&#xA;        LEFT JOIN S_USC_IMPEGNO F&#xA;        ON A.AA_ES = F.ESERCIZIO&#xA;        AND A.NUM_IMPEGNO = F.NUMERO_IMPEGNO&#xA;        AND A.NUM_SUBIMP = ISNULL(F.NUMERO_SUBIMPEGNO, 0)&#xA;UNION ALL&#xA;SELECT A.AA_ES AS ESERCIZIO, A.AA_ES+1 AS ANNO_BILANCIO&#xA; , CAST(A.NUM_IMPEGNO AS BIGINT)AS NUMERO_IMPEGNO&#xA; , B.NUMERO_SUBIMPEGNO&#xA; , ISNULL(B.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , ISNULL(B.USC_CATEGORIA_ACQUISTI_VERDI_IDS, -1) AS USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA;  , 1 AS POSIZIONE&#xA;    , 0 AS IMPORTO_INIZIALE&#xA; , 0 AS IMPORTO_ATTUALE&#xA; , 0 AS IMPORTO_INIZIALE_SUBIMP&#xA; , 0 AS IMPORTO_ATTUALE_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE A.RES_INIZIALE END AS RESIDUO_INIZIALE&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE (A.RES_INIZIALE + A.TOT_VAR_PIU - A.TOT_VAR_MENO - A.TOT_ECON_INSUSS - A.TOT_ECON_PER) END AS RESIDUO_ATTUALE&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN A.RES_INIZIALE ELSE 0 END AS RESIDUO_INIZIALE_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN (A.RES_INIZIALE + A.TOT_VAR_PIU - A.TOT_VAR_MENO - A.TOT_ECON_INSUSS - A.TOT_ECON_PER) ELSE 0 END AS RESIDUO_ATTUALE_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE A.TOT_ECON_INSUSS END AS ECONOMIA_PER_INSUSSISTENZA&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN A.TOT_ECON_INSUSS ELSE 0 END AS ECONOMIA_PER_INSUSS_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE A.TOT_ECON_PER END AS ECONOMIA_PER_PERENZIONE&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN A.TOT_ECON_PER ELSE 0 END AS ECONOMIA_PER_PERENZIONE_SUBIMP&#xA; , 0&#xA; , 0&#xA; -- NUOVI CAMPO CONSUNTIVO&#xA; , 0 AS IMPORTO_IMPEGNO_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_INIZIALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_FINALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_COMPETENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_RESIDUO_CONSUNTIVO&#xA; , 0 AS IMPORTO_INSUSSISTENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PERENTE_CONSUNTIVO&#xA;  , B.CODICE_ACQUISTI_VERDE AS CODICE_ACQUISTI_VERDE&#xA;FROM #T_TUI_RES_001 A&#xA; LEFT JOIN S_USC_RIGA_IMPEGNO B&#xA; ON A.AA_ES = B.ESERCIZIO&#xA; AND A.NUM_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.NUM_SUBIMP = ISNULL(B.NUMERO_SUBIMPEGNO, 0)&#xA; AND B.POSIZIONE = 1&#xA;WHERE TIPO_RES='R1'&#xA;AND A.AA_ES +1 &lt; @ANNO_INIZIO_BW -- MODIFICA 2014-08-01&#xA;UNION ALL&#xA;SELECT A.AA_ES AS ESERCIZIO, A.AA_ES+2 AS ANNO_BILANCIO&#xA; , CAST(A.NUM_IMPEGNO AS BIGINT) AS NUMERO_IMPEGNO&#xA; , B.NUMERO_SUBIMPEGNO&#xA; , ISNULL(B.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , ISNULL(B.USC_CATEGORIA_ACQUISTI_VERDI_IDS, -1) AS USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA; , 1 AS POSIZIONE&#xA; , 0 AS IMPORTO_INIZIALE&#xA; , 0 AS IMPORTO_ATTUALE&#xA; , 0 AS IMPORTO_INIZIALE_SUBIMP&#xA; , 0 AS IMPORTO_ATTUALE_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE A.RES_INIZIALE END AS RESIDUO_INIZIALE&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE (A.RES_INIZIALE + A.TOT_VAR_PIU - A.TOT_VAR_MENO - A.TOT_ECON_INSUSS - A.TOT_ECON_PER) END AS RESIDUO_ATTUALE&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN A.RES_INIZIALE ELSE 0 END AS RESIDUO_INIZIALE_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN (A.RES_INIZIALE + A.TOT_VAR_PIU - A.TOT_VAR_MENO - A.TOT_ECON_INSUSS - A.TOT_ECON_PER) ELSE 0 END AS RESIDUO_ATTUALE_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE A.TOT_ECON_INSUSS END AS ECONOMIA_PER_INSUSSISTENZA&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN A.TOT_ECON_INSUSS ELSE 0 END AS ECONOMIA_PER_INSUSS_SUBIMP&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN 0 ELSE A.TOT_ECON_PER END AS ECONOMIA_PER_PERENZIONE&#xA; , CASE WHEN B.NUMERO_SUBIMPEGNO &gt; 0 THEN A.TOT_ECON_PER ELSE 0 END AS ECONOMIA_PER_PERENZIONE_SUBIMP&#xA; , 0&#xA; , 0&#xA; -- NUOVI CAMPO CONSUNTIVO&#xA; , 0 AS IMPORTO_IMPEGNO_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_INIZIALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_FINALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_COMPETENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_RESIDUO_CONSUNTIVO&#xA; , 0 AS IMPORTO_INSUSSISTENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PERENTE_CONSUNTIVO&#xA;  , B.CODICE_ACQUISTI_VERDE AS CODICE_ACQUISTI_VERDE&#xA;FROM #T_TUI_RES_001 A&#xA; LEFT JOIN S_USC_RIGA_IMPEGNO B&#xA; ON A.AA_ES = B.ESERCIZIO&#xA; AND A.NUM_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.NUM_SUBIMP = ISNULL(B.NUMERO_SUBIMPEGNO, 0)&#xA; AND B.POSIZIONE = 1&#xA;WHERE TIPO_RES='R2'&#xA;AND A.AA_ES + 2 &lt; @ANNO_INIZIO_BW -- MODIFICA 2014-08-01&#xA;UNION ALL&#xA;SELECT A.ESERCIZIO AS ESERCIZIO&#xA; , A.ESERCIZIO AS ANNO_BILANCIO&#xA; , RIGHT(A.NUMERO_IMPEGNO,6) AS NUMERO_IMPEGNO&#xA; , B.NUMERO_SUBIMPEGNO AS  NUMERO_SUBIMPEGNO&#xA; , ISNULL(B.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , ISNULL(B.USC_CATEGORIA_ACQUISTI_VERDI_IDS, -1) AS USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA; , A.POSIZIONE&#xA; , CAST(A.IMPORTO_ORIGINALE AS NUMERIC(15,2)) + ISNULL(E.IMPORTO_VAR_PRECEDENTI,0) AS IMPORTO_INIZIALE&#xA; , A.IMPORTO_IMPEGNO - ISNULL(D.IMPORTO_VAR_FUORI_COMPETENZA,0) AS IMPORTO_ATTUALE&#xA; , NULL AS IMPORTO_INIZIALE_SUBIMP&#xA; , NULL AS IMPORTO_ATTUALE_SUBIMP&#xA; , NULL AS RESIDUO_INIZIALE&#xA; , NULL AS RESIDUO_ATTUALE&#xA; , NULL AS RESIDUO_INIZIALE_SUBIMP&#xA; , NULL AS RESIDUO_ATTUALE_SUBIMP&#xA; , NULL AS ECONOMIA_PER_INSUSSISTENZA&#xA; , NULL AS ECONOMIA_PER_INSUSS_SUBIMP&#xA; , NULL AS ECONOMIA_PER_PERENZIONE&#xA; , NULL AS ECONOMIA_PER_PERENZIONE_SUBIMP&#xA; , CAST(A.IMPORTO_ORIGINALE AS NUMERIC(15,2)) AS IMPORTO_ORIGINARIO&#xA; , A.IMPORTO_IMPEGNO - ISNULL(H.TOTALE_VARIAZIONI, 0) AS  IMPORTO_ATTUALE_CORRENTE&#xA; -- NUOVI CAMPO CONSUNTIVO&#xA; , 0 AS IMPORTO_IMPEGNO_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_INIZIALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_FINALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_COMPETENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_RESIDUO_CONSUNTIVO&#xA; , 0 AS IMPORTO_INSUSSISTENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PERENTE_CONSUNTIVO&#xA;  , B.CODICE_ACQUISTI_VERDE AS CODICE_ACQUISTI_VERDE&#xA;FROM #T_VF_IMPEGNI_T_002 A&#xA; LEFT JOIN S_USC_RIGA_IMPEGNO B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND RIGHT(A.NUMERO_IMPEGNO,6) = B.NUMERO_IMPEGNO&#xA; AND A.POSIZIONE = B.POSIZIONE&#xA;      LEFT JOIN&#xA;   ( SELECT ESERCIZIO_IMPEGNO, NUMERO_IMPEGNO, POSIZIONE, SUM(IMPORTO_VAR_IMPEGNO) AS IMPORTO_VAR_FUORI_COMPETENZA&#xA;      FROM #T_VF_VARIAZIONI_IMPEGNI_T&#xA;      WHERE ESERCIZIO_VARIAZIONE &gt; ESERCIZIO_IMPEGNO&#xA;      GROUP BY ESERCIZIO_IMPEGNO, NUMERO_IMPEGNO, POSIZIONE) D&#xA;   ON A.ESERCIZIO = D.ESERCIZIO_IMPEGNO&#xA;   AND A.NUMERO_IMPEGNO = D.NUMERO_IMPEGNO&#xA;   AND A.POSIZIONE = D.POSIZIONE&#xA;       LEFT JOIN&#xA;       ( SELECT ESERCIZIO_IMPEGNO, NUMERO_IMPEGNO, POSIZIONE, SUM(IMPORTO_VAR_IMPEGNO) AS IMPORTO_VAR_PRECEDENTI&#xA;          FROM #T_VF_VARIAZIONI_IMPEGNI_T&#xA;          WHERE ESERCIZIO_VARIAZIONE &lt; ESERCIZIO_IMPEGNO&#xA;          AND TIPO_VARIAZIONE &lt;&gt; 2 -- MODIFICA 18/03/2013&#xA;          GROUP BY ESERCIZIO_IMPEGNO, NUMERO_IMPEGNO, POSIZIONE) E&#xA;       ON A.ESERCIZIO = E.ESERCIZIO_IMPEGNO&#xA;       AND A.NUMERO_IMPEGNO = E.NUMERO_IMPEGNO&#xA;       AND A.POSIZIONE = E.POSIZIONE&#xA;                  -- SE L'IMPEGNO VA IN PERENZIONE, BISOGNA TOGLIERE LE VARIAZIONI DI TIPO 5&#xA;          -- INSUSSISTENZA SUL PERENTE, E APPLICARE L'ECONOMIA PER PERENZIONE&#xA;          -- TIPO 7&#xA;          LEFT JOIN&#xA;          ( SELECT ESERCIZIO_IMPEGNO, NUMERO_IMPEGNO, POSIZIONE, SUM(IMPORTO_VAR_IMPEGNO + importo_economia_perenzione) AS TOTALE_VARIAZIONI&#xA;           FROM #T_VF_VARIAZIONI_IMPEGNI_T&#xA;           WHERE TIPO_VARIAZIONE IN (5,7)&#xA;           GROUP BY ESERCIZIO_IMPEGNO, NUMERO_IMPEGNO, POSIZIONE) H&#xA;           ON A.ESERCIZIO = H.ESERCIZIO_IMPEGNO&#xA;           AND A.NUMERO_IMPEGNO = H.NUMERO_IMPEGNO&#xA;           AND A.POSIZIONE = H.POSIZIONE&#xA;-- RESIDUI DA BW: L'IMPORTO INIZIALE PROVIENE DAL FINALE DELLE CHIUSURE&#xA;-- CI SONO SOLO ECONOMIE PER INSUSSISTENZA, CHE SONO LE VARIAZIONI DI TIPO 4&#xA;-- LE CHIUSURE NON HANNO IL DETTAGLIO DELLA POSIZIUONE, PER CUI LE METTO SULLA POSIZIONE 1&#xA;UNION ALL&#xA;SELECT A.ESERCIZIO AS ESERCIZIO&#xA; , A.ANNO_BILANCIO + 1 AS ANNO_BILANCIO --IL RESIDUO FINALE DELL'ANNO X E' IL RESIDUO INIZIALE DELL'ANNO X+1&#xA; , RIGHT(A.NUMERO_IMPEGNO,6) AS NUMERO_IMPEGNO&#xA; , B.NUMERO_SUBIMPEGNO AS  NUMERO_SUBIMPEGNO&#xA; , ISNULL(B.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , ISNULL(B.USC_CATEGORIA_ACQUISTI_VERDI_IDS, -1) AS USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA; , 1 AS POSIZIONE&#xA; , 0 AS IMPORTO_INIZIALE&#xA; , 0 AS IMPORTO_ATTUALE&#xA; , NULL AS IMPORTO_INIZIALE_SUBIMP&#xA; , NULL AS IMPORTO_ATTUALE_SUBIMP&#xA; , A.IMPORTO_RESIDUO_FINALE AS RESIDUO_INIZIALE&#xA; , A.IMPORTO_RESIDUO_FINALE + ISNULL(C.ECONOMIA_PER_INSUSSISTENZA,0)  AS RESIDUO_ATTUALE --&#xA; , NULL AS RESIDUO_INIZIALE_SUBIMP&#xA; , NULL AS RESIDUO_ATTUALE_SUBIMP&#xA; , -C.ECONOMIA_PER_INSUSSISTENZA AS ECONOMIA_PER_INSUSSISTENZA&#xA; , NULL AS ECONOMIA_PER_INSUSS_SUBIMP&#xA; , NULL AS ECONOMIA_PER_PERENZIONE&#xA; , NULL AS ECONOMIA_PER_PERENZIONE_SUBIMP&#xA; , 0 AS IMPORTO_ORIGINARIO&#xA; , 0 AS IMPORTO_ATTUALE_CORRENTE&#xA; -- NUOVI CAMPO CONSUNTIVO&#xA; , 0 AS IMPORTO_IMPEGNO_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_INIZIALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_RESIDUO_FINALE_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_COMPETENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PAGATO_RESIDUO_CONSUNTIVO&#xA; , 0 AS IMPORTO_INSUSSISTENZA_CONSUNTIVO&#xA; , 0 AS IMPORTO_PERENTE_CONSUNTIVO&#xA;  , B.CODICE_ACQUISTI_VERDE AS CODICE_ACQUISTI_VERDE&#xA;FROM #T_VF_CHIUSURA_IMPEGNI_001 A&#xA; LEFT JOIN S_USC_RIGA_IMPEGNO B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND RIGHT(A.NUMERO_IMPEGNO,6) = B.NUMERO_IMPEGNO&#xA; AND 1 = B.POSIZIONE&#xA;  LEFT JOIN&#xA;    (&#xA;     SELECT ESERCIZIO_VARIAZIONE AS ANNO_BILANCIO, NUMERO_IMPEGNO, SUM(IMPORTO_VAR_IMPEGNO) AS ECONOMIA_PER_INSUSSISTENZA&#xA;     FROM #T_VF_VARIAZIONI_IMPEGNI_T_001&#xA;     WHERE TIPO_VARIAZIONE IN (3,4)&#xA;     GROUP BY ESERCIZIO_VARIAZIONE, NUMERO_IMPEGNO&#xA;    )  C&#xA;  ON A.NUMERO_IMPEGNO = C.NUMERO_IMPEGNO&#xA;  AND A.ANNO_BILANCIO + 1 = C.ANNO_BILANCIO&#xA;   LEFT JOIN S_CAU_SIOPE D&#xA;   ON CASE WHEN A.CODICE_SIOPE = '0000'&#xA;     THEN -1&#xA;     ELSE A.CODICE_SIOPE&#xA;    END = D.CODICE_GESTIONALE&#xA;   AND D.VALIDO_A = 9999&#xA;UNION ALL -- TABELLA DEL CONSUNTIVO&#xA;SELECT A.FISCYEAR AS ESERCIZIO&#xA; , A.ZANNOBIL AS ANNO_BILANCIO&#xA; , RIGHT(A.ZBELNR,6) AS NUMERO_IMPEGNO&#xA; , B.NUMERO_SUBIMPEGNO AS  NUMERO_SUBIMPEGNO&#xA; , ISNULL(B.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , ISNULL(B.USC_CATEGORIA_ACQUISTI_VERDI_IDS, -1) AS USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA; , CAST(A.ZBLPOS AS INT) AS POSIZIONE&#xA; , 0 AS IMPORTO_INIZIALE&#xA; , 0 AS IMPORTO_ATTUALE&#xA; , 0 AS IMPORTO_INIZIALE_SUBIMP&#xA; , 0 AS IMPORTO_ATTUALE_SUBIMP&#xA; , 0 AS RESIDUO_INIZIALE&#xA; , 0 AS RESIDUO_ATTUALE --&#xA; , 0 AS RESIDUO_INIZIALE_SUBIMP&#xA; , 0 AS RESIDUO_ATTUALE_SUBIMP&#xA; , 0 AS ECONOMIA_PER_INSUSSISTENZA&#xA; , 0 AS ECONOMIA_PER_INSUSS_SUBIMP&#xA; , 0 AS ECONOMIA_PER_PERENZIONE&#xA; , 0 AS ECONOMIA_PER_PERENZIONE_SUBIMP&#xA; , 0 AS IMPORTO_ORIGINARIO&#xA; , 0 AS IMPORTO_ATTUALE_CORRENTE&#xA; -- NUOVI CAMPO CONSUNTIVO&#xA; , A.ZIMP_IMP AS IMPORTO_IMPEGNO_CONSUNTIVO&#xA; , A.ZIMP_RES_IN  AS IMPORTO_RESIDUO_INIZIALE_CONSUNTIVO&#xA; , A.ZIMP_RES_FIN AS IMPORTO_RESIDUO_FINALE_CONSUNTIVO&#xA; , A.ZIMP_PAG_COMP AS IMPORTO_PAGATO_COMPETENZA_CONSUNTIVO&#xA; , A.ZIMP_PAG_RES AS IMPORTO_PAGATO_RESIDUO_CONSUNTIVO&#xA; , A.ZINSUSST AS IMPORTO_INSUSSISTENZA_CONSUNTIVO&#xA; , A.ZIMP_PERENT AS IMPORTO_PERENTE_CONSUNTIVO&#xA;  , B.CODICE_ACQUISTI_VERDE AS CODICE_ACQUISTI_VERDE&#xA;FROM #T_ZV_CNS_IMP_R_001 A&#xA;LEFT JOIN S_USC_RIGA_IMPEGNO B&#xA;ON A.FISCYEAR = B.ESERCIZIO&#xA;AND RIGHT(A.ZBELNR,6) = B.NUMERO_IMPEGNO&#xA;AND A.ZBLPOS = B.POSIZIONE&#xA;&#xA;-- AGGIUNGO I NUOVI DATI DEL RESIDUO FINALE, CALCOLATO TRAMITE IL PIANO DEI CONTI ECONOMICO&#xA;-- NEL DUBBIO, ESCLUDO LE EVENTUALI RIGHE DOPPIE, MA NON CI DOVREBBERO ESSERE&#xA;&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_VF_DEBITI_RESIDUI_PARTECIPATE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_DEBITI_RESIDUI_PARTECIPATE]&#xA;&#xA;SELECT A.*&#xA;INTO E_VF_DEBITI_RESIDUI_PARTECIPATE&#xA;FROM ##GI_T_VF_DEBITI_RESIDUI_PARTECIPATE_001 A&#xA;JOIN (SELECT ANNO_BILANCIO, NUMERO_IMPEGNO, POSIZIONE_IMPEGNO&#xA;      FROM ##GI_T_VF_DEBITI_RESIDUI_PARTECIPATE_001&#xA;   GROUP BY ANNO_BILANCIO, NUMERO_IMPEGNO, POSIZIONE_IMPEGNO&#xA;   HAVING COUNT(*) &gt; 1) B&#xA;ON A.ANNO_BILANCIO = B.ANNO_BILANCIO&#xA;AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;AND A.POSIZIONE_IMPEGNO = B.POSIZIONE_IMPEGNO&#xA;&#xA;SELECT A.*&#xA;INTO #T_VF_DEBITI_RESIDUI_PARTECIPATE_003&#xA;FROM ##GI_T_VF_DEBITI_RESIDUI_PARTECIPATE_001 A&#xA;LEFT JOIN E_VF_DEBITI_RESIDUI_PARTECIPATE B&#xA;ON A.ANNO_BILANCIO = B.ANNO_BILANCIO&#xA;AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;AND A.POSIZIONE_IMPEGNO = B.POSIZIONE_IMPEGNO&#xA;WHERE B.ANNO_BILANCIO IS NULL&#xA;&#xA;&#xA;SELECT USC_RIG_IMP_IDS&#xA; , USC_IMP_IDS&#xA; , USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA; , A.ESERCIZIO&#xA; , A.ANNO_BILANCIO&#xA; , A.NUMERO_IMPEGNO&#xA; , A.NUMERO_SUBIMPEGNO&#xA; , A.POSIZIONE&#xA; , SUM(A.IMPORTO_INIZIALE) AS IMPORTO_INIZIALE&#xA; , SUM(A.IMPORTO_ATTUALE) AS IMPORTO_ATTUALE&#xA; , SUM(A.IMPORTO_INIZIALE_SUBIMP) AS IMPORTO_INIZIALE_SUBIMP&#xA; , SUM(A.IMPORTO_ATTUALE_SUBIMP) AS IMPORTO_ATTUALE_SUBIMP&#xA; , SUM(A.RESIDUO_INIZIALE) AS RESIDUO_INIZIALE&#xA; , SUM(A.RESIDUO_ATTUALE) AS RESIDUO_ATTUALE&#xA; , SUM(A.RESIDUO_INIZIALE_SUBIMP) AS RESIDUO_INIZIALE_SUBIMP&#xA; , SUM(A.RESIDUO_ATTUALE_SUBIMP) AS RESIDUO_ATTUALE_SUBIMP&#xA; , SUM(A.ECONOMIA_PER_INSUSSISTENZA) AS ECONOMIA_PER_INSUSSISTENZA&#xA; , SUM(A.ECONOMIA_PER_INSUSS_SUBIMP) AS ECONOMIA_PER_INSUSS_SUBIMP&#xA; , SUM(A.ECONOMIA_PER_PERENZIONE) AS ECONOMIA_PER_PERENZIONE&#xA; , SUM(A.ECONOMIA_PER_PERENZIONE_SUBIMP) AS ECONOMIA_PER_PERENZIONE_SUBIMP&#xA; , SUM(A.IMPORTO_ORIGINARIO) AS IMPORTO_ORIGINARIO&#xA; , SUM(A.IMPORTO_ATTUALE_CORRENTE) AS IMPORTO_ATTUALE_CORRENTE&#xA; , SUM(A.IMPORTO_IMPEGNO_CONSUNTIVO) AS IMPORTO_IMPEGNO_CONSUNTIVO&#xA; , SUM(A.IMPORTO_RESIDUO_INIZIALE_CONSUNTIVO)  AS IMPORTO_RESIDUO_INIZIALE_CONSUNTIVO&#xA; , SUM(A.IMPORTO_RESIDUO_FINALE_CONSUNTIVO) AS IMPORTO_RESIDUO_FINALE_CONSUNTIVO&#xA; , SUM(A.IMPORTO_PAGATO_COMPETENZA_CONSUNTIVO) AS IMPORTO_PAGATO_COMPETENZA_CONSUNTIVO&#xA; , SUM(A.IMPORTO_PAGATO_RESIDUO_CONSUNTIVO) AS IMPORTO_PAGATO_RESIDUO_CONSUNTIVO&#xA; , SUM(A.IMPORTO_INSUSSISTENZA_CONSUNTIVO) AS IMPORTO_INSUSSISTENZA_CONSUNTIVO&#xA; , SUM(A.IMPORTO_PERENTE_CONSUNTIVO) AS IMPORTO_PERENTE_CONSUNTIVO&#xA;    , CODICE_ACQUISTI_VERDE&#xA;INTO #SF_USC_IMPEGNO_002&#xA;FROM #SF_USC_IMPEGNO_001 A&#xA;GROUP BY USC_RIG_IMP_IDS&#xA; , USC_IMP_IDS&#xA; , USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA; , A.ESERCIZIO&#xA; , A.ANNO_BILANCIO&#xA; , A.NUMERO_IMPEGNO&#xA; , A.NUMERO_SUBIMPEGNO&#xA; , A.POSIZIONE&#xA;    , CODICE_ACQUISTI_VERDE&#xA;&#xA;SELECT A.*&#xA; , B.RESIDUI_FINALI AS RESIDUO_FINALE_PCE&#xA;INTO SF_USC_IMPEGNO&#xA;FROM #SF_USC_IMPEGNO_002 A&#xA; LEFT JOIN #T_VF_DEBITI_RESIDUI_PARTECIPATE_003 B&#xA; ON A.ESERCIZIO = CAST(LEFT(B.NUMERO_IMPEGNO,4) AS INT) - 1000&#xA; AND A.NUMERO_IMPEGNO = RIGHT(B.NUMERO_IMPEGNO,6)&#xA; AND A.POSIZIONE = B.POSIZIONE_IMPEGNO&#xA;    AND A.ANNO_BILANCIO = B.ANNO_BILANCIO&#xA;&#xA;&#xA;DROP TABLE #T_VF_DEBITI_RESIDUI_PARTECIPATE_003&#xA;DROP TABLE ##GI_T_VF_DEBITI_RESIDUI_PARTECIPATE_001&#xA;&#xA;DROP TABLE #T_VF_IMPEGNI_T_001&#xA;DROP TABLE #T_VF_IMPEGNI_T_002&#xA;DROP TABLE #T_TUI_COMP_001&#xA;DROP TABLE #T_TUI_RES_001&#xA;DROP TABLE #G_T_TUNITA_IMPEGNO_001&#xA;DROP TABLE #G_S_USC_RIGA_IMPEGNO_001&#xA;&#xA;DROP TABLE #G_T_TREISCRIZIONE_001&#xA;DROP TABLE #T_VF_CHIUSURA_IMPEGNI_001&#xA;DROP TABLE #T_VF_CHIUSURA_IMPEGNI_002&#xA;&#xA;DROP TABLE #SF_USC_IMPEGNO_001&#xA;DROP TABLE #T_ZV_CNS_IMP_R_001&#xA;&#xA;--drop table #T_VF_VARIAZIONI_IMPEGNI_T&#xA;--drop table #T_VF_VARIAZIONI_IMPEGNI_T_001&#xA;--DROP TABLE #T_VF_VARIAZIONI_IMPEGNI_T_002&#xA;--drop table #T_TVAR_UI_001&#xA;&#xA;DROP TABLE #T_ZV_ZIMPCOM_001&#xA;DROP TABLE #T_ZV_ZIMPCOM_002&#xA;DROP TABLE #SF_USC_IMPEGNO_002" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\SF_USC_PARTITA"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{f92daade-e13e-4f67-a839-e43417d6e972}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="SF_USC_PARTITA"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="2">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0556BA1E-49B6-411F-B26B-200B0FE334B7}"
          SQLTask:SqlStatementSource="-- imposto i parametri fissi per la query, prendendoli da M_PARAMETRI_BW&#xA;DECLARE @ANNO_INIZIO_BW int&#xA;DECLARE @SISTEMA_SORGENTE_BW varchar(50)&#xA;DECLARE @COD_UTENTE_DB2 varchar(50)&#xA;&#xA;SELECT TOP 1&#xA;      @ANNO_INIZIO_BW = ANNO_INIZIO_BW,&#xA;      @SISTEMA_SORGENTE_BW = SISTEMA_SORGENTE,&#xA;      @COD_UTENTE_DB2 = COD_UTENTE_DB2&#xA;FROM M_PARAMETRI_BW&#xA;WHERE CONTESTO = 'PARTITE'&#xA;--------------------------------------------------------&#xA;&#xA;&#xA;SELECT A.*&#xA;INTO #G_T_VF_DOC_SPESA_POSIZIONE &#xA;FROM T_VF_DOC_SPESA_POSIZIONE A&#xA; LEFT JOIN #G_T_VF_DOC_SPESA_TESTATA_001 B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND A.NUMERO_DOC_SPESA = B.NUMERO_DOC_SPESA&#xA;WHERE A.SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;AND CASE WHEN LEFT(A.NUMERO_DOC_SPESA, 1) = '1' AND A.ESERCIZIO &gt; 2000 -- LE PARTITE FM POSSONO AVERE UNA DATA DI REGISTRAZIONE MODIFICATA, MI BASO SUL CODICE&#xA;   THEN 1000 + CAST(LEFT(A.NUMERO_DOC_SPESA,4) AS INT)    -- LE MM NO, QUINDI POSSO UTILIZZARE LA DATA DI REGISTRAZIONE&#xA;   ELSE YEAR(A.DATA_REGISTRAZIONE)&#xA; END &gt;= @ANNO_INIZIO_BW&#xA;--AND YEAR(B.DATA_DOCUMENTO) &gt;= @ANNO_INIZIO_BW -- il vero esercizio è ESERCIZIO_IMPEGNO proveniente dalla tabella T_VF_DOC_SPESA_POSIZIONE&#xA;--AND A.ESERCIZIO &gt;= @ANNO_INIZIO_BW&#xA;AND B.ESERCIZIO is not null&#xA;&#xA;-- importo i dati da bw&#xA;&#xA;SELECT A.*&#xA;INTO #T_VF_AT_AZRITENUT00&#xA;FROM T_VF_AT_AZRITENUT00 A&#xA; JOIN &#xA;  (SELECT DISTINCT NUM_DOC_RIF, SOC_DOC_FI, ES_DOC_RIF&#xA;  FROM #G_T_VF_DOC_SPESA_POSIZIONE &#xA;   ) B&#xA; ON A.NUM_DOC_DEB = B.NUM_DOC_RIF&#xA; AND A.SOCIETY = B.SOC_DOC_FI&#xA; AND A.ESERCIZIO = B.ES_DOC_RIF&#xA;&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_VF_AT_AZRITENUT00]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_AT_AZRITENUT00]&#xA;&#xA;SELECT a.*&#xA;INTO E_VF_AT_AZRITENUT00&#xA;FROM #T_VF_AT_AZRITENUT00 A&#xA; INNER JOIN ( SELECT ESERCIZIO,NUM_DOC_DEB, TIPO_RA, POS_CRE_DEB&#xA;                        FROM #T_VF_AT_AZRITENUT00&#xA;   GROUP BY ESERCIZIO,NUM_DOC_DEB, TIPO_RA, POS_CRE_DEB&#xA;   HAVING COUNT(*)&gt;1) B&#xA;ON A.ESERCIZIO = B.ESERCIZIO&#xA;AND A.NUM_DOC_DEB = B.NUM_DOC_DEB&#xA;AND A.TIPO_RA = B.TIPO_RA&#xA;AND A.POS_CRE_DEB = B.POS_CRE_DEB&#xA;&#xA;-- scrittura tabella Staging&#xA;SELECT A.*&#xA;INTO #G_T_VF_AT_AZRITENUT00_001&#xA;FROM #T_VF_AT_AZRITENUT00 A&#xA; LEFT JOIN E_VF_AT_AZRITENUT00 B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND A.NUM_DOC_DEB = B.NUM_DOC_DEB&#xA; AND A.TIPO_RA = B.TIPO_RA&#xA; AND A.POS_CRE_DEB = B.POS_CRE_DEB&#xA;WHERE B.NUM_DOC_DEB is NULL&#xA;ORDER BY 1,2,3,4&#xA;&#xA;&#xA;-- CREAZIONE S_TABLE&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[SF_USC_PARTITA]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [SF_USC_PARTITA]&#xA;&#xA;SELECT ISNULL(B.USC_PAR_IDS, -1) AS USC_PAR_IDS&#xA; , ISNULL(C.BEN_BEN_IDS, -1) AS BEN_BEN_IDS&#xA; , A.CODICE1*100+A.CODICE2*10+A.CODICE3 AS CATEGORIA_ECONOMICA, A.NUM_BENEF AS NUMERO_BENEFICIARIO&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , B.ESERCIZIO, B.NUMERO_IMPEGNO, B.NUMERO_SUBIMPEGNO&#xA; , ISNULL(D.USC_ORD_IDS, -1) AS USC_ORD_REINT_IDS&#xA; , ISNULL(D.USC_ROR_IDS, -1) AS USC_ROR_REINT_IDS&#xA; , CONVERT(NVARCHAR(2),A.COD_ASSESSORATO) AS CODICE_ASSESSORATO_REINTEGRO&#xA; , A.AA_ORDINE AS ANNO_ORDINE_REINTEGRO&#xA; , A.NUM_ORDINE AS NUM_ORDINE_REINTEGRO&#xA; , CAST(-1 AS BIGINT) AS RIGA_ORDINE&#xA; , A.IMP_DS AS IMPORTO_PARTITA&#xA; , A.IMP_IMPONIBILE AS IMPORTO_IMPONIBILE&#xA; , A.IMP_IVA AS IMPORTO_IVA&#xA; , A.IMP_SPESE_ESENTI AS IMPORTO_SPESE_ESENTI&#xA; , A.IMP_SPESE_SOGGETTE AS IMPORTO_SPESE_SOGGETTE&#xA; , A.RIT_PREVIDENZIALI AS RITENUTE_PREVIDENZIALI&#xA; , A.RIT_ERARIALI AS RITENUTE_ERARIALI&#xA; , A.RIT_VARIE AS RITENUTE_VARIE&#xA; , ISNULL(F.CAU_SIO_IDS, -1) AS CAU_SIO_IDS&#xA; , A.COD_GESTIONALE AS CODICE_SIOPE&#xA; , NULL AS QUOTA_ENTE&#xA; , B.IMPORTO_IMPONIBILE_IVA&#xA; , B.IMPORTO_IVA_SPLIT_PAYMENT&#xA;INTO #T_SF_USC_PARTITA&#xA;FROM #G_T_TDOC_SPESA_001 A&#xA; LEFT JOIN S_USC_PARTITA B&#xA; ON A.AA_DS = B.ANNO_PARTITA&#xA; AND A.NUM_DS = B.NUMERO_PARTITA&#xA; AND A.CODICE1*100+A.CODICE2*10+A.CODICE3 = B.CATEGORIA_ECONOMICA&#xA; AND A.NUM_BENEF = B.NUMERO_BENEFICIARIO&#xA; AND A.PROGR_DS = B.PROGRESSIVO_PARTITA&#xA;  LEFT JOIN S_BEN_BENEFICIARIO C&#xA;  ON A.NUM_BENEF = C.NUMERO_BENEFICIARIO&#xA;  AND A.CODICE1*100+A.CODICE2*10+A.CODICE3 = C.CATEGORIA_ECONOMICA_ORIGINALE&#xA;  AND C.FLAG_OCCASIONALE = 'N'&#xA;--   LEFT JOIN S_USC_ORDINE D&#xA;--   ON A.COD_ASSESSORATO = D.CODICE_ASSESSORATO&#xA;--   AND A.AA_ORDINE = D.ANNO_ORDINE&#xA;--   AND A.NUM_ORDINE = D.NUMERO_ORDINE&#xA;    LEFT JOIN S_USC_RIGA_ORDINE D -- modifica del 12 luglio 2011 per garantire il join con gli ordini reiscritti dal 2010 in poi&#xA;    ON CASE WHEN A.COD_ASSESSORATO = '-1' THEN '-1' ELSE A.COD_ASSESSORATO END = D.CODICE_ASSESSORATO&#xA;    AND 1 = D.NUMERO_RIGA&#xA;    AND A.AA_ORDINE = D.ANNO_ORDINE&#xA;    AND A.NUM_ORDINE = D.NUMERO_ORDINE&#xA;     LEFT JOIN S_CAU_SIOPE F&#xA;     ON CASE WHEN A.COD_GESTIONALE = '0000'&#xA;       THEN -1&#xA;       ELSE A.COD_GESTIONALE&#xA;      END = F.CODICE_GESTIONALE&#xA;     AND F.VALIDO_A = 9999&#xA;      &#xA;   &#xA;SELECT    A.USC_PAR_IDS&#xA; ,A.BEN_BEN_IDS&#xA; ,A.CATEGORIA_ECONOMICA&#xA; ,A.NUMERO_BENEFICIARIO&#xA; ,ISNULL(B.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; ,A.ESERCIZIO&#xA; ,A.NUMERO_IMPEGNO&#xA; ,A.NUMERO_SUBIMPEGNO&#xA; ,A.USC_ORD_REINT_IDS&#xA; ,A.USC_ROR_REINT_IDS&#xA; ,A.ANNO_ORDINE_REINTEGRO&#xA; ,A.NUM_ORDINE_REINTEGRO&#xA; ,A.RIGA_ORDINE&#xA; ,1 AS RIGA_PARTITA&#xA; ,cast(A.CODICE_ASSESSORATO_REINTEGRO as nvarchar(2)) AS CODICE_ASSESSORATO_REINTEGRO&#xA; , A.IMPORTO_PARTITA&#xA; , A.IMPORTO_IMPONIBILE&#xA; , A.IMPORTO_IVA&#xA; , A.IMPORTO_SPESE_ESENTI&#xA; , A.IMPORTO_SPESE_SOGGETTE&#xA; , A.RITENUTE_PREVIDENZIALI &#xA; , A.RITENUTE_ERARIALI&#xA; , A.RITENUTE_VARIE&#xA; , A.CAU_SIO_IDS&#xA; , A.CODICE_SIOPE&#xA; , -1 AS USC_CDC_IDS&#xA; , -1 AS USC_COGE_IDS&#xA; , NULL AS QUOTA_ENTE&#xA; , A.IMPORTO_IMPONIBILE_IVA&#xA; , A.IMPORTO_IVA_SPLIT_PAYMENT&#xA; , NULL AS NUMERO_PARTITA_SAP&#xA; , -1 AS USC_RIG_PREN_IMP_IDS&#xA; , CAST(NULL AS NVARCHAR(10)) AS NUMERO_PRENOTAZIONE_IMPEGNO&#xA; , -1 AS CAU_PCFNL5_118_IDS&#xA; , -1 AS CAU_PCFNL4_118_IDS&#xA; , -1 AS CAU_PCFNL3_118_IDS&#xA; , -1 AS CAU_PCFNL2_118_IDS&#xA; , -1 AS CAU_PCFNL1_118_IDS&#xA; , -1 AS ORD_RIG_ACQ_IDS&#xA;INTO #SF_USC_PARTITA&#xA;FROM #T_SF_USC_PARTITA A&#xA; LEFT JOIN S_USC_RIGA_IMPEGNO B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND ISNULL(A.NUMERO_SUBIMPEGNO, -1) = ISNULL(B.NUMERO_SUBIMPEGNO, -1)&#xA; AND 1 = B.POSIZIONE&#xA;UNION ALL&#xA;select distinct &#xA;   ISNULL(B.USC_PAR_IDS, -1) AS USC_PAR_IDS&#xA; , ISNULL(C.BEN_BEN_IDS, -1) AS BEN_BEN_IDS&#xA; , C.CATEGORIA_ECONOMICA AS CATEGORIA_ECONOMICA&#xA; , C.NUMERO_BENEFICIARIO AS NUMERO_BENEFICIARIO&#xA; , ISNULL(D.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , A.ESERCIZIO_IMPEGNO AS ESERCIZIO&#xA; , RIGHT(A.NUMERO_IMPEGNO,6)  AS NUMERO_IMPEGNO&#xA; , NULL AS NUMERO_SUBIMPEGNO&#xA; --, -1 AS USC_ORD_REINT_IDS&#xA; , ISNULL(F.USC_ORD_IDS, -1) AS USC_ORD_REINT_IDS&#xA; , ISNULL(F.USC_ROR_IDS, -1) AS USC_ROR_REINT_IDS&#xA; , F.ANNO_ORDINE AS ANNO_ORDINE_REINTEGRO&#xA; , F.NUMERO_ORDINE AS NUM_ORDINE_REINTEGRO&#xA; , F.NUMERO_RIGA AS RIGA_ORDINE&#xA; , A.POSIZIONE_RIGA AS RIGA_PARTITA&#xA; , cast(NULL as nvarchar(2)) AS CODICE_ASSESSORATO_REINTEGRO&#xA; --, NULL AS ANNO_ORDINE_REINTEGRO&#xA; --, NULL AS NUM_ORDINE_REINTEGRO&#xA; --, NULL AS RIGA_ORDINE&#xA; , A.IMPORTO_DOC_SPESA - &#xA;   CASE WHEN B.CODICE_TIPO_PARTITA = '9' --NEL CASO DI PARTITE DI FUNZIONARI DELEGATI DEVO TOGLIERE LA QUOTA ENTE...NON QUADRA COSI' CON IL DB2 E SI SA&#xA;    THEN ISNULL(A.QUOTA_ENTE,0)&#xA;    ELSE 0&#xA;   END  AS IMPORTO_PARTITA&#xA; , ISNULL(E.IMPORTO_IMPONIBILE, 0) AS IMPORTO_IMPONIBILE&#xA; , CASE WHEN A.POSIZIONE_RIGA = 1 THEN ISNULL(A.IMPORTO_IVA, 0) ELSE 0 END AS IMPORTO_IVA&#xA; , ISNULL(E.IMP_SPESE_ESEN, 0) AS IMPORTO_SPESE_ESENTI&#xA; , ISNULL(E.IMP_SPESE_SOGG, 0) AS IMPORTO_SPESE_SOGGETTE&#xA; , ABS((ABS(ISNULL(H.IMP_RA, 0)) + ABS(ISNULL(I.IMP_RA, 0))))  AS RITENUTE_PREVIDENZIALI &#xA; , (ABS(ISNULL(G.IMP_RA, 0)))   AS RITENUTE_ERARIALI&#xA; , (ABS(ISNULL(L.IMP_RA,0)))  AS RITENUTE_VARIE&#xA;-- , ISNULL(H.IMP_RA, 0) + ISNULL(I.IMP_RA, 0) AS RITENUTE_PREVIDENZIALI &#xA;-- , ISNULL(G.IMP_RA, 0) AS RITENUTE_ERARIALI&#xA;-- , ISNULL(L.IMP_RA,0) AS RITENUTE_VARIE&#xA; , ISNULL(M.CAU_SIO_IDS, -1) AS CAU_SIO_IDS&#xA; , A.CODICE_SIOPE&#xA; , ISNULL(N.USC_CDC_IDS, -1) AS USC_CDC_IDS&#xA; , ISNULL(O.USC_COGE_IDS, -1) AS USC_COGE_IDS&#xA; , A.QUOTA_ENTE&#xA; , B.IMPORTO_IMPONIBILE_IVA&#xA; , B.IMPORTO_IVA_SPLIT_PAYMENT&#xA; , A.NUMERO_DOC_SPESA AS NUMERO_PARTITA_SAP&#xA; , ISNULL(P.USC_RIG_PREN_IMP_IDS, -1) AS USC_RIG_PREN_IMP_IDS&#xA; , CASE WHEN A.NUMERO_IMPEGNO NOT LIKE '30%'&#xA;  THEN A.NUMERO_IMPEGNO&#xA;  ELSE NULL&#xA;   END AS NUMERO_PRENOTAZIONE_IMPEGNO&#xA; , ISNULL(Q.CAU_PCFNL5_118_IDS,-1) AS CAU_PCFNL5_118_IDS&#xA; , ISNULL(R.CAU_PCFNL4_118_IDS,-1) AS CAU_PCFNL4_118_IDS&#xA; , ISNULL(S.CAU_PCFNL3_118_IDS,-1) AS CAU_PCFNL3_118_IDS&#xA; , ISNULL(T.CAU_PCFNL2_118_IDS,-1) AS CAU_PCFNL2_118_IDS&#xA; , ISNULL(U.CAU_PCFNL1_118_IDS,-1) AS CAU_PCFNL1_118_IDS&#xA; , ISNULL(W.ORD_RIG_ACQ_IDS, -1) AS ORD_RIG_ACQ_IDS&#xA;FROM #G_T_VF_DOC_SPESA_POSIZIONE A&#xA;  LEFT JOIN S_USC_PARTITA B&#xA;  ON A.ESERCIZIO = B.ESERCIZIO&#xA;  AND A.NUMERO_DOC_SPESA = B.CHIAVE_SAP&#xA;  AND RIGHT(A.CAPITOLO,5) = B.CAPITOLO&#xA;   LEFT JOIN S_BEN_BENEFICIARIO C&#xA;   ON A.BENEFICIARIO = C.CHIAVE_SAP&#xA;    LEFT JOIN S_USC_RIGA_IMPEGNO D&#xA;    ON A.ESERCIZIO_IMPEGNO = D.ESERCIZIO&#xA;    AND RIGHT(A.NUMERO_IMPEGNO,6) = D.NUMERO_IMPEGNO &#xA;    AND LEFT(A.NUMERO_IMPEGNO,2) LIKE '30%' -- ESCLUDIAMO LE PRENOTAZIONI!! 2015-09-29 DATI&#xA;    AND &#xA;     CASE WHEN LEFT(a.NUMERO_DOC_SPESA, 1) = '1' AND a.ESERCIZIO &gt; 2000&#xA;       THEN CAST(A.POSIZIONE_DOCUMENTO_PRECEDENTE AS INT)&#xA;       ELSE CASE WHEN LEFT(A.NUMERO_DOC_SPESA, 1) = '5'&#xA;          THEN CAST(A.POSIZIONE_IMPEGNO AS INT)&#xA;          ELSE 1&#xA;         END&#xA;    END = D.POSIZIONE&#xA;      LEFT JOIN (&#xA;        SELECT DISTINCT NUM_DOC_DEB, SOCIETY, ESERCIZIO, IMPORTO_IMPONIBILE,IMPORTO_IVA,IMP_SPESE_ESEN,IMP_SPESE_SOGG&#xA;        FROM #G_T_VF_AT_AZRITENUT00_001&#xA;        WHERE STATO_POS NOT IN ('V','X')&#xA;        ) E&#xA;      ON E.NUM_DOC_DEB = A.NUM_DOC_RIF&#xA;      AND E.SOCIETY = A.SOC_DOC_FI&#xA;      AND E.ESERCIZIO = A.ES_DOC_RIF&#xA;      AND A.POSIZIONE_RIGA = 1&#xA;       LEFT JOIN S_USC_RIGA_ORDINE F&#xA;       ON CAST(F.NUMERO_DOCUMENTO_SPESA AS BIGINT) =  CAST(A.NUMERO_DOC_SPESA  AS BIGINT)&#xA;       AND right(a.NUMERO_IMPEGNO,4) = f.numero_impegno&#xA;       AND CAST(F.TIPO_ORDINE as int) in (1,8)&#xA;       AND F.STATO &lt;&gt; '6'&#xA;        LEFT JOIN (&#xA;          SELECT NUM_DOC_DEB, SOCIETY, ESERCIZIO, TIPO_RIT_HOST, sum(IMP_RA)  AS IMP_RA&#xA;          FROM  #G_T_VF_AT_AZRITENUT00_001&#xA;          WHERE  TIPO_RIT_HOST = 'E'&#xA;          AND STATO_POS NOT IN ('V','X')&#xA;          GROUP BY NUM_DOC_DEB, SOCIETY, ESERCIZIO, TIPO_RIT_HOST) G&#xA;        ON G.NUM_DOC_DEB = A.NUM_DOC_RIF&#xA;        AND G.SOCIETY = A.SOC_DOC_FI&#xA;        AND G.ESERCIZIO = A.ES_DOC_RIF&#xA;        AND A.POSIZIONE_RIGA = 1&#xA;&#xA;         LEFT JOIN ( &#xA;         SELECT NUM_DOC_DEB, SOCIETY, ESERCIZIO, TIPO_RIT_HOST, sum(IMP_RA)  AS IMP_RA&#xA;         FROM  #G_T_VF_AT_AZRITENUT00_001&#xA;         WHERE  TIPO_RIT_HOST = 'P'&#xA;         AND PERC_RITENUT &lt;&gt; 'E'&#xA;         AND STATO_POS NOT IN ('V','X')&#xA;         GROUP BY NUM_DOC_DEB, SOCIETY, ESERCIZIO, TIPO_RIT_HOST) H&#xA;         ON H.NUM_DOC_DEB = A.NUM_DOC_RIF&#xA;         AND H.SOCIETY = A.SOC_DOC_FI&#xA;         AND H.ESERCIZIO = A.ES_DOC_RIF&#xA;         AND A.POSIZIONE_RIGA = 1&#xA;          LEFT JOIN (&#xA;          SELECT NUM_DOC_DEB, SOCIETY, ESERCIZIO, TIPO_RIT_HOST, sum(IMP_RA) AS IMP_RA&#xA;          FROM  #G_T_VF_AT_AZRITENUT00_001&#xA;          WHERE  TIPO_RIT_HOST = 'A'&#xA;          AND PERC_RITENUT &lt;&gt; 'E'&#xA;          AND STATO_POS NOT IN ('V','X')&#xA;          GROUP BY NUM_DOC_DEB, SOCIETY, ESERCIZIO, TIPO_RIT_HOST) I     &#xA;          ON I.NUM_DOC_DEB = A.NUM_DOC_RIF&#xA;          AND I.SOCIETY = A.SOC_DOC_FI&#xA;          AND I.ESERCIZIO = A.ES_DOC_RIF     &#xA;          AND A.POSIZIONE_RIGA = 1&#xA;           LEFT JOIN (&#xA;           SELECT NUM_DOC_DEB, SOCIETY, ESERCIZIO, TIPO_RIT_HOST, sum(IMP_RA)  AS IMP_RA&#xA;           FROM  #G_T_VF_AT_AZRITENUT00_001&#xA;           WHERE  TIPO_RIT_HOST = 'V'&#xA;           AND STATO_POS NOT IN ('V','X')&#xA;           GROUP BY NUM_DOC_DEB, SOCIETY, ESERCIZIO, TIPO_RIT_HOST) L&#xA;           ON L.NUM_DOC_DEB = A.NUM_DOC_RIF&#xA;           AND L.SOCIETY = A.SOC_DOC_FI&#xA;           AND L.ESERCIZIO = A.ES_DOC_RIF  &#xA;           AND A.POSIZIONE_RIGA = 1 &#xA;            LEFT JOIN S_CAU_SIOPE M&#xA;            ON CASE WHEN A.CODICE_SIOPE = '0000'&#xA;              THEN -1&#xA;              ELSE A.CODICE_SIOPE&#xA;             END = M.CODICE_GESTIONALE &#xA;            AND M.VALIDO_A = 9999&#xA;             LEFT JOIN S_USC_CENTRO_DI_COSTO N&#xA;             ON A.CENTRO_DI_COSTO = N.CENTRO_DI_COSTO&#xA;             AND A.DATA_REGISTRAZIONE BETWEEN N.VALIDO_DA AND N.VALIDO_A&#xA;              LEFT JOIN S_USC_CONTO_COGE O&#xA;              ON LTRIM(RTRIM(A.CONTO_CONTABILITA)) = O.CONTO_COGE&#xA;               LEFT JOIN S_USC_RIGA_PRENOTAZIONE_IMPEGNO P&#xA;               ON A.NUMERO_IMPEGNO = P.NUMERO_PRENOTAZIONE_IMPEGNO&#xA;               AND CASE WHEN LEFT(a.NUMERO_DOC_SPESA, 1) = '1' AND a.ESERCIZIO &gt; 2000&#xA;                   THEN CAST(A.POSIZIONE_DOCUMENTO_PRECEDENTE AS INT)&#xA;                   ELSE CASE WHEN LEFT(A.NUMERO_DOC_SPESA, 1) = '5'&#xA;                      THEN CAST(A.POSIZIONE_IMPEGNO AS INT)&#xA;                      ELSE 1&#xA;                     END&#xA;                END = P.POSIZIONE &#xA;                 LEFT JOIN S_CAU_PDC_LIVELLO5_LEGGE_118 Q&#xA;                 ON A.LIVELLO1 = Q.LIVELLO_1&#xA;                 AND A.LIVELLO2 = Q.LIVELLO_2&#xA;                 AND A.LIVELLO3 = Q.LIVELLO_3&#xA;                 AND A.LIVELLO4 = Q.LIVELLO_4&#xA;                 AND A.LIVELLO5 = Q.LIVELLO_5&#xA;                 AND B.DATA_PARTITA BETWEEN Q.DATA_INIZIO_VALIDITA AND Q.DATA_FINE_VALIDITA&#xA;                  LEFT JOIN S_CAU_PDC_LIVELLO4_LEGGE_118 R&#xA;                  ON A.LIVELLO1 = R.LIVELLO_1&#xA;                  AND A.LIVELLO2 = R.LIVELLO_2&#xA;                  AND A.LIVELLO3 = R.LIVELLO_3&#xA;                  AND A.LIVELLO4 = R.LIVELLO_4&#xA;                  AND B.DATA_PARTITA BETWEEN R.DATA_INIZIO_VALIDITA AND R.DATA_FINE_VALIDITA&#xA;                   LEFT JOIN S_CAU_PDC_LIVELLO3_LEGGE_118 S&#xA;                   ON A.LIVELLO1 = S.LIVELLO_1&#xA;                   AND A.LIVELLO2 = S.LIVELLO_2&#xA;                   AND A.LIVELLO3 = S.LIVELLO_3&#xA;                   AND B.DATA_PARTITA BETWEEN S.DATA_INIZIO_VALIDITA AND S.DATA_FINE_VALIDITA&#xA;                    LEFT JOIN S_CAU_PDC_LIVELLO2_LEGGE_118 T&#xA;                    ON A.LIVELLO1 = T.LIVELLO_1&#xA;                    AND A.LIVELLO2 = T.LIVELLO_2&#xA;                    AND B.DATA_PARTITA BETWEEN T.DATA_INIZIO_VALIDITA AND T.DATA_FINE_VALIDITA&#xA;                     LEFT JOIN S_CAU_PDC_LIVELLO1_LEGGE_118 U&#xA;                     ON A.LIVELLO1 = U.LIVELLO_1&#xA;                     AND B.DATA_PARTITA BETWEEN U.DATA_INIZIO_VALIDITA AND U.DATA_FINE_VALIDITA&#xA;                      LEFT JOIN T_ZV_ORD_PART V&#xA;                      ON A.NUMERO_DOC_SPESA = V.NUM_PART &#xA;                      AND A.POSIZIONE_RIGA = CAST(V.POS_DOC_MAT AS INT)&#xA;                      AND ESERC_DOC_MAT = D.ESERCIZIO&#xA;                      AND V.SOURSYSTEM = @SISTEMA_SORGENTE_BW&#xA;                       LEFT JOIN S_CPA_RIGA_ORDINE_ACQUISTO W&#xA;                       ON V.NUM_ODA = W.NUMERO_ORDINE_ACQUISTO AND V.NUM_POS_ODA = REPLICATE('0', 5- LEN(W.POSIZIONE_ORDINE_ACQUISTO)) + W.POSIZIONE_ORDINE_ACQUISTO&#xA;         &#xA;&#xA;/* &#xA;la parte seguente è necessaria per spalmare gli importi che avevamo nella testata della partita.&#xA;Dato che non abbiamo il loro dettaglio a livello di riga, li distribuiamo equamente per le righe&#xA;di ogni singola partita.&#xA;modifica del 28/09/2015&#xA;*/&#xA;&#xA;SELECT NUMERO_PARTITA_SAP, COUNT(*) AS CONTEGGIO&#xA;INTO #M_DIVISIONE_SPLIT_PAYMENT&#xA;FROM #SF_USC_PARTITA&#xA;WHERE NUMERO_PARTITA_SAP IS NOT NULL&#xA;GROUP BY NUMERO_PARTITA_SAP&#xA;ORDER BY 2 DESC&#xA;&#xA;SELECT A.[USC_PAR_IDS]&#xA;      ,A.[BEN_BEN_IDS]&#xA;      ,A.[CATEGORIA_ECONOMICA]&#xA;      ,A.[NUMERO_BENEFICIARIO]&#xA;      ,A.[USC_RIG_IMP_IDS]&#xA;      ,CASE WHEN A.NUMERO_PRENOTAZIONE_IMPEGNO IS NULL THEN A.[ESERCIZIO] ELSE NULL END AS ESERCIZIO&#xA;      ,CASE WHEN A.NUMERO_PRENOTAZIONE_IMPEGNO IS NULL THEN A.[NUMERO_IMPEGNO] ELSE NULL END AS NUMERO_IMPEGNO&#xA;      ,A.[NUMERO_SUBIMPEGNO]&#xA;      ,A.[USC_ORD_REINT_IDS]&#xA;      ,A.[USC_ROR_REINT_IDS]&#xA;      ,A.[ANNO_ORDINE_REINTEGRO]&#xA;      ,A.[NUM_ORDINE_REINTEGRO]&#xA;      ,A.[RIGA_ORDINE]&#xA;      ,A.[RIGA_PARTITA]&#xA;      ,A.[CODICE_ASSESSORATO_REINTEGRO]&#xA;      ,A.[IMPORTO_PARTITA]&#xA;      ,A.[IMPORTO_IMPONIBILE]&#xA;      ,A.[IMPORTO_IVA]&#xA;      ,A.[IMPORTO_SPESE_ESENTI]&#xA;      ,A.[IMPORTO_SPESE_SOGGETTE]&#xA;      ,A.[RITENUTE_PREVIDENZIALI]&#xA;      ,A.[RITENUTE_ERARIALI]&#xA;      ,A.[RITENUTE_VARIE]&#xA;      ,A.[CAU_SIO_IDS]&#xA;      ,A.[CODICE_SIOPE]&#xA;      ,A.[USC_CDC_IDS]&#xA;      ,A.[USC_COGE_IDS]&#xA;      ,A.[QUOTA_ENTE]&#xA;      ,A.[IMPORTO_IMPONIBILE_IVA]/ISNULL(B.CONTEGGIO, 1) AS [IMPORTO_IMPONIBILE_IVA]&#xA;      ,A.[IMPORTO_IVA_SPLIT_PAYMENT]/ISNULL(B.CONTEGGIO, 1) AS [IMPORTO_IVA_SPLIT_PAYMENT]&#xA;   ,A.[NUMERO_PARTITA_SAP]&#xA;   ,A.[USC_RIG_PREN_IMP_IDS]&#xA;   ,A.[NUMERO_PRENOTAZIONE_IMPEGNO]&#xA;   ,A.[CAU_PCFNL5_118_IDS]&#xA;   ,A.[CAU_PCFNL4_118_IDS]&#xA;   ,A.[CAU_PCFNL3_118_IDS]&#xA;   ,A.[CAU_PCFNL2_118_IDS]&#xA;   ,A.[CAU_PCFNL1_118_IDS]&#xA;   ,A.[ORD_RIG_ACQ_IDS]&#xA;INTO SF_USC_PARTITA&#xA;FROM #SF_USC_PARTITA A&#xA;LEFT JOIN #M_DIVISIONE_SPLIT_PAYMENT B&#xA;ON A.NUMERO_PARTITA_SAP = B.NUMERO_PARTITA_SAP&#xA;&#xA;&#xA;DROP TABLE #G_T_TDOC_SPESA_001&#xA;--DROP TABLE #G_T_VF_DOC_SPESA_POSIZIONE&#xA;DROP TABLE #T_SF_USC_PARTITA&#xA;DROP TABLE #G_T_VF_DOC_SPESA_TESTATA_001&#xA;&#xA;--DROP TABLE #T_VF_AT_AZRITENUT00&#xA;--DROP TABLE #G_T_VF_AT_AZRITENUT00_001&#xA;--DROP TABLE #G_T_VF_DOC_SPESA_POSIZIONE&#xA;&#xA;DROP TABLE #SF_USC_PARTITA&#xA;DROP TABLE #M_DIVISIONE_SPLIT_PAYMENT" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\S_USC_IMPEGNO"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{588c421d-cf61-4f2c-af11-dbd5b5225ce1}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="S_USC_IMPEGNO"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0556BA1E-49B6-411F-B26B-200B0FE334B7}"
          SQLTask:SqlStatementSource="-- imposto i parametri fissi per la query, prendendoli da M_PARAMETRI_BW&#xA;DECLARE @ANNO_INIZIO_BW int&#xA;DECLARE @SISTEMA_SORGENTE_BW varchar(50)&#xA;DECLARE @COD_UTENTE_DB2 varchar(50)&#xA;&#xA;SELECT TOP 1&#xA;      @ANNO_INIZIO_BW = ANNO_INIZIO_BW,&#xA;      @SISTEMA_SORGENTE_BW = SISTEMA_SORGENTE,&#xA;      @COD_UTENTE_DB2 = COD_UTENTE_DB2&#xA;FROM M_PARAMETRI_BW&#xA;WHERE CONTESTO = 'GENERALE'&#xA;--------------------------------------------------------&#xA;-- nella temp seguente vengono presi tutti gli impegni precedenti al 2011 con gestione sanitaria S. Serve per valorizzare il campo gestione sanitaria anche prima del 2011&#xA;SELECT *&#xA;INTO #T_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN&#xA;FROM T_VF_ELENCO_IMPEGNI&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;AND ESERCIZIO &lt; @ANNO_INIZIO_BW&#xA;AND GESTIONE_SANITARIA = 'S'&#xA;AND FLAG_CANCELLAZIONE &lt;&gt; 'X'&#xA;&#xA;&#xA;&#xA;-- controllo sovrapposizione date e primary key&#xA;-- scrittura tabella errore&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN]&#xA;&#xA;SELECT a.*&#xA;INTO E_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN&#xA;FROM #T_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN A&#xA; INNER JOIN ( SELECT ESERCIZIO, NUMERO_IMPEGNO&#xA;   FROM #T_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN&#xA;   GROUP BY ESERCIZIO, NUMERO_IMPEGNO&#xA;   HAVING COUNT(*)&gt;1) B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;&#xA;-- scrittura tabella Staging&#xA;&#xA;SELECT A.*&#xA;INTO #T_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN_002&#xA;FROM #T_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN A&#xA; LEFT JOIN E_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;WHERE B.NUMERO_IMPEGNO IS NULL&#xA;ORDER BY 1, 2&#xA;&#xA;&#xA;-- importo i dati da bw&#xA;--- l'import viene fatto nella S_USC_IMPEGNO_REISCRITTO&#xA;&#xA;-- CREAZIONE S_TABLE&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[S_USC_IMPEGNO]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [S_USC_IMPEGNO]&#xA;&#xA;SELECT&#xA; A.ESERCIZIO AS ESERCIZIO&#xA; , RIGHT(NUMERO_IMPEGNO,6) AS NUMERO_IMPEGNO -- elimino l'anno dal numero impegno&#xA; , NULL AS NUMERO_SUBIMPEGNO&#xA; , CASE WHEN A.FLAG_PAGABILITA = 'X' THEN CAST('S' AS CHAR(1)) ELSE CAST('N' AS CHAR(1)) END AS FLAG_PAGABILE&#xA; , A.DATA_ISTITUZIONE AS DATA_ISTITUZIONE&#xA; , CASE WHEN A.TIPO_IMPEGNO = 3 THEN CAST('S' as CHAR(1)) ELSE CAST('N' as CHAR(1)) END AS FLAG_REISCRIZIONE&#xA; , ISNULL(E.ATT_ATA_IDS, -1) AS ATT_ATA_IDS&#xA; , A.ASSESSORATO_PROTOCOLLO AS CODICE_ASSESSORATO&#xA; , A.ANNO_PROTOCOLLO AS ANNO_PROTOCOLLO&#xA; , A.PROTOCOLLO&#xA; , ISNULL (D.CAU_CAU_IDS, -1) AS CAU_CAU_IDS&#xA; , CAST(RIGHT(A.CAPITOLO,5) AS INT) AS CAPITOLO&#xA; , NULL AS ARTICOLO&#xA; , A.TESTO_TESTATA_ESTESO AS DESCRIZIONE_IMPEGNO&#xA; , ISNULL(F.BIL_RIP_IDS,-1) AS BIL_RIP_IDS&#xA; , A.NUMERO_RIPARTIZIONE AS RIPARTIZIONE&#xA; , ISNULL(G.BIL_PRO_IDS, -1) AS BIL_PRO_IDS&#xA; , A.PROG_PRO AS PROGRESSIVO_PROGETTO&#xA; --, ISNULL (C.USC_IMP_REI_IDS, -1) AS USC_IMP_REI_IDS&#xA; --, C.ESERCIZIO_IMPEGNO_REISCRITTO, C.NUMERO_IMPEGNO_REISCRITTO&#xA; , NULL AS SERVIZIO&#xA; , ISNULL(H.OPE_OPE_IDS, -1) AS OPE_OPE_IDS&#xA; , A.CREATO_DA AS CODICE_OPERATORE&#xA; , A.DESCRIZIONE_DIREZIONE AS DESCRIZIONE_DIREZIONE_SAP&#xA;    , CASE WHEN I.CAU_DGE_IDS = -1 OR I.CAU_DGE_IDS IS NULL&#xA;  THEN CASE WHEN J.CAU_DGE_IDS IS NULL&#xA;    THEN -1&#xA;    ELSE J.CAU_DGE_IDS&#xA;    END&#xA;  ELSE I.CAU_DGE_IDS&#xA;   END AS CAU_DGE_IDS&#xA; , A.COD_DIR AS CODICE_DIREZIONE&#xA; , A.SERV_PROP AS CODICE_SERVIZIO_SAP&#xA; , A.DESCR_B_SERV AS DESCRIZIONE_SERVIZIO_SAP&#xA; , NULL AS CODICE_SERVIZIO_DB2&#xA; , ISNULL(M.TIP_CNT_IDS, -1) AS TIP_CNT_IDS&#xA; , A.TIP_GEST_IMP AS TIPO_GESTIONE_IMPEGNO&#xA; , CASE WHEN A.FLA_SATT = 'X' THEN 'S' ELSE 'N' END AS FLAG_ASSENZA_ATTO&#xA; , A.INV_RAG AS DATA_INVIO_RAGIONERIA&#xA; , ISNULL(L.COD_VAR_GES_IDS, -1) AS COD_VAR_GES_IDS&#xA; , A.STA_VAR_GEST AS STATO_VARIAZIONE_GESTIONALE&#xA; , CAST(NULL AS INT) AS ANNO_PERENZIONE&#xA; , CASE WHEN A.FLAG_PERENZIONE = 'X'&#xA;   THEN 'S'&#xA;   ELSE 'N'&#xA;   END AS FLAG_PERENZIONE&#xA; , NULL AS TIPO_GESTIONE_ATTUALE&#xA; , -1 AS USC_TGE_IDS&#xA; , CASE WHEN LEN(LTRIM(RTRIM(A.NUMERO_PRENOTAZIONE_IMPEGNO))) = 0 THEN NULL ELSE A.NUMERO_PRENOTAZIONE_IMPEGNO END AS NUMERO_PROPOSTA_IMPEGNO --SISTEMAZIONE NULL-- quei geni ci stanno passando l'informazione delle prenotazioni con il nome delle proposte!! RISA&#xA; , A.PRENOTAZIONE_IMPEGNO AS NUMERO_PRENOTAZIONE_IMPEGNO&#xA; , CASE WHEN A.FLAG_CONSUNTIVO = 'X'&#xA;  THEN 'S'&#xA;  ELSE 'N'&#xA;   END AS FLAG_CONSUNTIVO&#xA; , ISNULL(K.TIP_IMP_IDS, -1) AS TIP_IMP_IDS&#xA; , A.TIPO_IMPEGNO&#xA; , ISNULL(I.CAU_DGE_IDS, -1) AS ATT_DGE_IDS&#xA; , A.GESTIONE_SANITARIA&#xA; , A.TESTO_TESTATA AS OGGETTO_IN_BREVE&#xA; -- Aggiunta dai test di Agnese&#xA; , CASE&#xA;  WHEN A.ANNO_FPV = '0000' THEN NULL&#xA;  ELSE CAST(A.ANNO_FPV AS INT)&#xA;   END AS ANNO_FPV&#xA; , A.DOCUMENTO_VARIAZIONE&#xA; , CASE&#xA;  WHEN A.PROGRESSIVO_VARIAZIONE = '0000' THEN NULL&#xA;  ELSE CAST(A.PROGRESSIVO_VARIAZIONE AS INT)&#xA;  END AS PROGRESSIVO_VARIAZIONE&#xA; ,A.PROT_ORIG AS PROTOCOLLO_ORIGINALE&#xA; ,CASE WHEN LEN(LTRIM(RTRIM(A.UT_FIN_INV))) = 0 THEN NULL&#xA;     ELSE LTRIM(RTRIM(A.UT_FIN_INV))&#xA;   END AS FLAG_UTILIZZO_SPAZI_FINANZIARI_INVESTIMENTI&#xA;INTO #S_USC_IMPEGNO&#xA;FROM #G_T_VF_ELENCO_IMPEGNI_002 A&#xA;  --LEFT JOIN S_USC_IMPEGNO_REISCRITTO C&#xA;  --ON LEFT(A.NUMERO_IMPEGNO_PERENTE,4) - 1000  = C.ESERCIZIO_IMPEGNO_REISCRITTO&#xA;  --AND RIGHT(A.NUMERO_IMPEGNO_PERENTE,6) = C.NUMERO_IMPEGNO_REISCRITTO&#xA;   LEFT JOIN S_CAU_CAPITOLO_USCITA D&#xA;   ON A.ESERCIZIO = D.ESERCIZIO&#xA;   AND CAST(RIGHT(A.CAPITOLO,5) AS INT) = D.CAPITOLO&#xA;   --AND A.NUM_ART = ISNULL(D.ARTICOLO, 0)&#xA;    LEFT JOIN S_ATT_ATTO_AMMINISTRATIVO E&#xA;--    ON A.ANNO_PROTOCOLLO = E.ANNO_PROTOCOLLO&#xA;--    AND A.ASSESSORATO_PROTOCOLLO = E.CODICE_ASSESSORATO&#xA;--    AND A.PROTOCOLLO = E.PROTOCOLLO&#xA;    ON A.PROTOCOLLO = E.PROTOCOLLO&#xA;    AND E.CONSUNTIVO_AGREA = 'N'&#xA;     LEFT JOIN S_BIL_RIPARTIZIONE F&#xA;     ON A.ESERCIZIO = F.ESERCIZIO&#xA;     AND RIGHT(A.CAPITOLO,5) = F.CAPITOLO&#xA;     --AND A.NUM_ART = ISNULL(F.ARTICOLO,0)&#xA;     AND A.NUMERO_RIPARTIZIONE = F.NUMERO_RIPARTIZIONE&#xA;      LEFT JOIN S_BIL_PROGETTO G&#xA;      ON A.ESERCIZIO = G.ESERCIZIO&#xA;      AND ISNULL(F.TIPO_RIPARTIZIONE,0) = ISNULL(G.TIPO_RIPARTIZIONE,0)&#xA;      AND ISNULL(F.SOTTOTIPO_RIPARTIZIONE,0) = ISNULL(G.SOTTOTIPO_RIPARTIZIONE,0)&#xA;      AND CAST(A.PROG_PRO AS INT) = G.PROGRESSIVO_PROGETTO&#xA;      AND A.NUMERO_RIPARTIZIONE = G.NUMERO_RIPARTIZIONE&#xA;      AND CAST(RIGHT(A.CAPITOLO,5) AS INT) = G.CAPITOLO&#xA;       LEFT JOIN S_OPE_OPERATORE H&#xA;       ON A.CREATO_DA = H.CODICE_OPERATORE_SAP&#xA;        LEFT JOIN S_CAU_DIREZIONE_GENERALE I&#xA;        ON E.ATT_DGE_IDS = I.CAU_DGE_IDS&#xA;        LEFT JOIN S_CAU_DIREZIONE_GENERALE J&#xA;        ON D.CAU_DGE_IDS = J.CAU_DGE_IDS&#xA;         LEFT JOIN S_USC_TIPO_IMPEGNO K&#xA;         ON A.TIPO_IMPEGNO = K.TIPO_IMPEGNO&#xA;          LEFT JOIN S_USC_STATO_VAR_GESTIONALE L&#xA;          ON A.STA_VAR_GEST = L.CODICE_VARIAZIONE_GESTIONALE&#xA;           LEFT JOIN S_USC_TIPO_CONTROLLO_IMPEGNO M&#xA;           ON A.TIP_GEST_IMP = M.CODICE_CONTROLLO_IMPEGNO&#xA;&#xA;&#xA;&#xA;UNION ALL&#xA;SELECT&#xA;A.AA_ES AS ESERCIZIO,&#xA; A.NUM_IMPEGNO AS NUMERO_IMPEGNO&#xA; , CASE WHEN A.FLAG_SUB &lt;&gt; 'N' THEN A.NUM_SUBIMP&#xA; ELSE NULL&#xA; END AS NUMERO_SUBIMPEGNO&#xA; , A.FLAG_PAGABILE AS FLAG_PAGABILE&#xA; , CASE WHEN ISDATE( CAST(A.AA_ISTITUZIONE AS CHAR(4))+'-'+CAST(A.MM_ISTITUZIONE AS CHAR(2))+'-'+CAST(A.GG_ISTITUZIONE AS CHAR(2)) ) = 1&#xA;  THEN CONVERT(DATETIME, CAST(A.AA_ISTITUZIONE AS CHAR(4))+'-'+CAST(A.MM_ISTITUZIONE AS CHAR(2))+'-'+CAST(A.GG_ISTITUZIONE AS CHAR(2)), 120)&#xA; ELSE NULL&#xA; END AS DATA_ISTITUZIONE&#xA; , A.FLAG_REISCRIZ AS FLAG_REISCRIZIONE&#xA; , ISNULL(E.ATT_ATA_IDS, -1) AS ATT_ATA_IDS&#xA; , A.COD_ASSESSORATO AS CODICE_ASSESSORATO, A.AA_PROTOCOLLO AS ANNO_PROTOCOLLO, A.PROTOCOLLO&#xA; , ISNULL (D.CAU_CAU_IDS, -1) AS CAU_CAU_IDS, A.NUM_CAP AS CAPITOLO, D.ARTICOLO AS ARTICOLO&#xA; , A.DESCR AS DESCRIZIONE_IMPEGNO&#xA; , ISNULL(F.BIL_RIP_IDS, -1) AS BIL_RIP_IDS, A.NUM_RIP AS RIPARTIZIONE&#xA; , ISNULL(G.BIL_PRO_IDS, -1) AS BIL_PRO_IDS, A.PROGR_PROGETTO AS PROGRESSIVO_PROGETTO&#xA; --, ISNULL (C.USC_IMP_REI_IDS, -1) AS USC_IMP_REI_IDS&#xA; --, C.ESERCIZIO_IMPEGNO_REISCRITTO, C.NUMERO_IMPEGNO_REISCRITTO&#xA; , A.SERVIZIO&#xA; , ISNULL(H.OPE_OPE_IDS, -1) AS OPE_OPE_IDS&#xA; , A.UTENTE_IPDT AS CODICE_OPERATORE&#xA; , NULL AS DESCRIZIONE_DIREZIONE_SAP&#xA; , CASE WHEN I.CAU_DGE_IDS = -1 OR I.CAU_DGE_IDS IS NULL&#xA;  THEN CASE WHEN J.CAU_DGE_IDS IS NULL&#xA;    THEN -1&#xA;    ELSE J.CAU_DGE_IDS&#xA;    END&#xA;  ELSE I.CAU_DGE_IDS&#xA;   END AS CAU_DGE_IDS&#xA; , NULL AS CODICE_DIREZIONE&#xA; , NULL AS CODICE_SERVIZIO_SAP&#xA; , NULL AS DESCRIZIONE_SERVIZIO_SAP&#xA; , E.SERVIZIO AS CODICE_SERVIZIO_DB2&#xA; , -1&#xA; , NULL AS TIPO_GESTIONE_IMPEGNO&#xA; , NULL AS FLAG_ASSENZA_ATTO&#xA; , NULL AS DATA_INVIO_RAGIONERIA&#xA; , -1&#xA; , NULL AS STATO_VARIAZIONE_GESTIONALE&#xA; , A.AA_PERENZIONE AS ANNO_PERENZIONE&#xA; , CASE WHEN A.AA_PERENZIONE IS NULL OR A.AA_PERENZIONE = 0&#xA;   THEN 'N'&#xA;   ELSE 'S'&#xA;   END AS FLAG_PERENZIONE&#xA; , A.TIPO_GEST_ATT AS TIPO_GESTIONE_ATTUALE&#xA; , ISNULL (L.USC_TGE_IDS, -1) AS USC_TGE_IDS&#xA; , NULL&#xA; , NULL&#xA; , NULL&#xA; , -1&#xA; , NULL&#xA; , ISNULL(I.CAU_DGE_IDS, -1) AS ATT_DGE_IDS&#xA; , ISNULL(M.GESTIONE_SANITARIA,'N') AS GESTIONE_SANITARIA&#xA; , NULL AS OGGETTO_IN_BREVE&#xA; , NULL AS ANNO_FPV&#xA; , NULL AS DOCUMENTO_VARIAZIONE&#xA; , NULL AS PROGRESSIVO_VARIAZIONE&#xA; , NULL AS PROTOCOLLO_ORIGINALE&#xA; , NULL AS FLAG_UTILIZZO_SPAZI_FINANZIARI_INVESTIMENTI&#xA;FROM #G_T_TUNITA_IMPEGNO_001 A&#xA; LEFT JOIN #G_T_TREISCRIZIONE_001 B&#xA; ON A.AA_ES = B.AA_ES&#xA; AND A.NUM_IMPEGNO = B.NUM_IMPEGNO&#xA;  --LEFT JOIN S_USC_IMPEGNO_REISCRITTO C&#xA;  --ON B.AA_ES_REISCR = C.ESERCIZIO_IMPEGNO_REISCRITTO&#xA;  --AND B.NUM_IMP_REISCR = C.NUMERO_IMPEGNO_REISCRITTO&#xA;  --AND B.NUM_SUB_REISCR = ISNULL(C.NUMERO_SUBIMPEGNO_REISCRITTO, 0)&#xA;   LEFT JOIN S_CAU_CAPITOLO_USCITA D&#xA;   ON A.AA_ES = D.ESERCIZIO&#xA;   AND A.NUM_CAP = D.CAPITOLO&#xA;   AND A.NUM_ART = ISNULL(D.ARTICOLO, 0)&#xA;    LEFT JOIN S_ATT_ATTO_AMMINISTRATIVO E&#xA;    ON A.AA_PROTOCOLLO = E.ANNO_PROTOCOLLO&#xA;    AND A.COD_ASSESSORATO = E.CODICE_ASSESSORATO&#xA;    AND A.PROTOCOLLO = E.PROTOCOLLO&#xA;     LEFT JOIN S_BIL_RIPARTIZIONE F&#xA;     ON A.AA_ES = F.ESERCIZIO&#xA;     AND A.NUM_CAP = F.CAPITOLO&#xA;     AND A.NUM_ART = ISNULL(F.ARTICOLO,0)&#xA;     AND A.NUM_RIP = F.NUMERO_RIPARTIZIONE&#xA;      LEFT JOIN S_BIL_PROGETTO G&#xA;      ON A.AA_ES = G.ESERCIZIO&#xA;      AND isnull(F.TIPO_RIPARTIZIONE,0) = isnull(G.TIPO_RIPARTIZIONE,0)&#xA;      AND isnull(F.SOTTOTIPO_RIPARTIZIONE,0) = isnull(G.SOTTOTIPO_RIPARTIZIONE,0)&#xA;      AND A.PROGR_PROGETTO = G.PROGRESSIVO_PROGETTO&#xA;      AND A.NUM_RIP = G.NUMERO_RIPARTIZIONE&#xA;      AND A.NUM_CAP = G.CAPITOLO&#xA;      AND A.NUM_ART  = ISNULL(G.ARTICOLO,0)&#xA;       LEFT JOIN S_OPE_OPERATORE H&#xA;       ON A.UTENTE_IPDT = H.CODICE_OPERATORE&#xA;        LEFT JOIN S_CAU_DIREZIONE_GENERALE I&#xA;        ON E.ATT_DGE_IDS = I.CAU_DGE_IDS&#xA;         LEFT JOIN S_CAU_DIREZIONE_GENERALE J&#xA;         ON D.CAU_DGE_IDS = J.CAU_DGE_IDS&#xA;          LEFT JOIN S_USC_TIPO_GESTIONE L&#xA;          ON A.TIPO_GEST_ATT= L.TIPO_GESTIONE&#xA;           LEFT join #T_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN_002 M&#xA;           ON A.AA_ES = M.ESERCIZIO&#xA;           AND A.NUM_IMPEGNO = RIGHT(M.NUMERO_IMPEGNO,6)&#xA;&#xA;Select IDENTITY(Int, 1, 1) as USC_IMP_IDS&#xA; , A.*&#xA; , CASE WHEN A.ESERCIZIO &lt;= 1985 AND B.ESERCIZIO IS NOT NULL&#xA;  THEN 'S'&#xA;  ELSE NULL&#xA;  END AS FLAG_PERENTI_DA_CONSIDERARE&#xA; , CASE WHEN C.ESERCIZIO IS NOT NULL&#xA;  THEN 'S'&#xA;  ELSE NULL&#xA;   END AS FLAG_PERENTI_SU_SAP&#xA;into S_USC_IMPEGNO&#xA;from #S_USC_IMPEGNO A&#xA;LEFT JOIN&#xA; (SELECT *&#xA;  FROM T_VF_ELENCO_IMPEGNI&#xA;  WHERE SISTEMA_SORGENTE = 'PR'&#xA;  AND ESERCIZIO &lt;= 1985) B&#xA;ON A.ESERCIZIO = B.ESERCIZIO&#xA;AND A.NUMERO_IMPEGNO =  CASE WHEN RIGHT(B.NUMERO_IMPEGNO,2) &lt;&gt; '99'&#xA;       THEN RIGHT(B.NUMERO_IMPEGNO,6)&#xA;       ELSE LEFT(RIGHT(B.NUMERO_IMPEGNO,6) ,4)&#xA;      END&#xA; LEFT JOIN M_USC_IMPEGNI_PERENTI_SAP C&#xA; ON A.ESERCIZIO = C.ESERCIZIO&#xA; AND A.NUMERO_IMPEGNO = C.NUMERO_IMPEGNO&#xA; AND ISNULL(A.NUMERO_SUBIMPEGNO,0) = C.NUMERO_SUBIMPEGNO&#xA;&#xA;set identity_insert S_USC_IMPEGNO on&#xA;insert into S_USC_IMPEGNO (USC_IMP_IDS, ATT_ATA_IDS, CAU_CAU_IDS, BIL_RIP_IDS, BIL_PRO_IDS,&#xA; OPE_OPE_IDS, CAU_DGE_IDS, USC_TGE_IDS, FLAG_PERENZIONE, TIP_CNT_IDS, COD_VAR_GES_IDS, TIP_IMP_IDS, ATT_DGE_IDS,GESTIONE_SANITARIA)&#xA;values(-1, -1, -1, -1, -1, -1, -1,-1, 'N', -1,-1,-1, -1,NULL)&#xA;set identity_insert S_USC_IMPEGNO off&#xA;&#xA;DROP TABLE #S_USC_IMPEGNO&#xA;DROP TABLE #T_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN&#xA;DROP TABLE #T_VF_ELENCO_IMPEGNI_PRIMA_2011_GEST_SAN_002&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\S_USC_ORDINE"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{0cd1237c-9369-4670-9fdd-d3fac686921b}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="S_USC_ORDINE"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0556BA1E-49B6-411F-B26B-200B0FE334B7}"
          SQLTask:SqlStatementSource="-- imposto i parametri fissi per la query, prendendoli da M_PARAMETRI_BW&#xA;DECLARE @ANNO_INIZIO_BW int&#xA;DECLARE @SISTEMA_SORGENTE_BW varchar(50)&#xA;DECLARE @COD_UTENTE_DB2 varchar(50)&#xA;SELECT TOP 1&#xA;      @ANNO_INIZIO_BW = ANNO_INIZIO_BW,&#xA;      @SISTEMA_SORGENTE_BW = SISTEMA_SORGENTE,&#xA;      @COD_UTENTE_DB2 = COD_UTENTE_DB2&#xA;FROM M_PARAMETRI_BW&#xA;WHERE CONTESTO = 'ORDINI'&#xA;--------------------------------------------------------&#xA;&#xA;-- anagrafica del tipo gestione ordine da db2&#xA;&#xA;SELECT COD AS TIPO_GESTIONE,&#xA;    DESCR AS DESCRIZIONE&#xA;INTO #T_TTABDECODIFICA&#xA;FROM T_TTABDECODIFICA&#xA;WHERE TIPO_COD = 'R01'&#xA;&#xA;-- controllo sovrapposizione date e primary key&#xA;-- scrittura tabella errore&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_TORDINE_PAGAMENTO]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_TORDINE_PAGAMENTO]&#xA;&#xA;SELECT a.*&#xA;INTO E_TORDINE_PAGAMENTO&#xA;FROM T_TORDINE_PAGAMENTO A&#xA; INNER JOIN ( SELECT AA_ORDINE, COD_ASSESSORATO, NUM_ORDINE&#xA;   FROM T_TORDINE_PAGAMENTO&#xA;   WHERE COD_UTENTE = @COD_UTENTE_DB2&#xA;   AND AA_ORDINE &lt; @ANNO_INIZIO_BW&#xA;   GROUP BY AA_ORDINE, COD_ASSESSORATO, NUM_ORDINE&#xA;   HAVING COUNT(*)&gt;1) B&#xA; ON A.AA_ORDINE = B.AA_ORDINE&#xA; AND A.COD_ASSESSORATO = B.COD_ASSESSORATO&#xA; AND A.NUM_ORDINE = B.NUM_ORDINE&#xA;WHERE A.COD_UTENTE = @COD_UTENTE_DB2&#xA;&#xA;-- scrittura tabella Staging&#xA;SELECT A.*&#xA; , CASE WHEN ISDATE( CAST(A.AA_ORDINE AS CHAR(4))+'-'+CAST(A.MM_ORDINE AS CHAR(2))+'-'+CAST(A.GG_ORDINE AS CHAR(2)) ) = 1&#xA;  THEN CONVERT(DATETIME, CAST(A.AA_ORDINE AS CHAR(4))+'-'+CAST(A.MM_ORDINE AS CHAR(2))+'-'+CAST(A.GG_ORDINE AS CHAR(2)), 120)&#xA; ELSE NULL&#xA; END AS DATA_ORDINE&#xA;INTO #T_TORDINE_PAGAMENTO_001&#xA;FROM T_TORDINE_PAGAMENTO A&#xA; LEFT JOIN E_TORDINE_PAGAMENTO B&#xA; ON A.AA_ORDINE = B.AA_ORDINE&#xA; AND A.COD_ASSESSORATO = B.COD_ASSESSORATO&#xA; AND A.NUM_ORDINE = B.NUM_ORDINE&#xA;WHERE B.NUM_ORDINE is NULL&#xA;AND A.COD_UTENTE = @COD_UTENTE_DB2 &#xA;AND A.AA_ORDINE &lt; @ANNO_INIZIO_BW&#xA;ORDER BY A.AA_ORDINE, A.COD_ASSESSORATO, A.NUM_ORDINE &#xA;&#xA;-- prendo i dati da bw&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_VF_ORDINI_MANDATI_TESTATA_T]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_ORDINI_MANDATI_TESTATA_T]&#xA;&#xA;SELECT *&#xA;INTO #T_VF_ORDINI_MANDATI_TESTATA_T&#xA;FROM T_VF_ORDINI_MANDATI_TESTATA_T&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;AND ANNO_ORDINE_PAGAMENTO &gt;= @ANNO_INIZIO_BW&#xA;-- AND STATO &lt;&gt; 1 -- elimino quelle annullate&#xA;--AND ESERCIZIO_MANDATO &lt;&gt; 0 -- modifica 15/06/2011&#xA;&#xA;SELECT a.*&#xA;INTO E_VF_ORDINI_MANDATI_TESTATA_T&#xA;FROM #T_VF_ORDINI_MANDATI_TESTATA_T A&#xA; INNER JOIN ( SELECT ANNO_ORDINE_PAGAMENTO, NUMERO_ORDINE_PAGAMENTO&#xA;   FROM #T_VF_ORDINI_MANDATI_TESTATA_T&#xA;   GROUP BY ANNO_ORDINE_PAGAMENTO, NUMERO_ORDINE_PAGAMENTO&#xA;   HAVING COUNT(*)&gt;1) B&#xA; ON A.ANNO_ORDINE_PAGAMENTO = B.ANNO_ORDINE_PAGAMENTO&#xA; AND A.NUMERO_ORDINE_PAGAMENTO = B.NUMERO_ORDINE_PAGAMENTO&#xA;&#xA;-- scrittura tabella Staging&#xA;SELECT A.*&#xA;INTO #G_T_VF_ORDINI_MANDATI_TESTATA_T_001&#xA;FROM #T_VF_ORDINI_MANDATI_TESTATA_T A&#xA; LEFT JOIN E_VF_ORDINI_MANDATI_TESTATA_T B&#xA; ON A.ANNO_ORDINE_PAGAMENTO = B.ANNO_ORDINE_PAGAMENTO&#xA; AND A.NUMERO_ORDINE_PAGAMENTO = B.NUMERO_ORDINE_PAGAMENTO&#xA;WHERE B.NUMERO_ORDINE_PAGAMENTO is NULL&#xA;ORDER BY A.ANNO_ORDINE_PAGAMENTO, A.NUMERO_ORDINE_PAGAMENTO&#xA;&#xA;-- merge delle tabelle &#xA;&#xA;SELECT  A.AA_ORDINE AS ANNO_ORDINE&#xA; , A.COD_ASSESSORATO AS CODICE_ASSESSORATO&#xA; , A.NUM_ORDINE AS NUMERO_ORDINE&#xA; , ISNULL(C.USC_DIR_IDS, -1) AS USC_DIR_IDS&#xA; , A.DATA_ORDINE AS DATA_ORDINE&#xA; , ISNULL(D.CODICE_ORDINE, '***') AS CODICE_ORDINE&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , A.AA_ES AS ESERCIZIO&#xA; , A.NUM_IMPEGNO AS NUMERO_IMPEGNO&#xA; , B.NUMERO_SUBIMPEGNO&#xA; , A.AA_BIL AS ANNO_BILANCIO, A.TIPO_PAG AS TIPO_PAGAMENTO&#xA; , A.NUM_PAGAMENTO AS NUMERO_PAGAMENTO&#xA; , CASE WHEN ISDATE( CAST(A.AA_PAGAMENTO AS CHAR(4))+'-'+CAST(A.MM_PAGAMENTO AS CHAR(2))+'-'+CAST(A.GG_PAGAMENTO AS CHAR(2)) ) = 1&#xA;  THEN CONVERT(DATETIME, ( CAST(A.AA_PAGAMENTO AS CHAR(4))+'-'+CAST(A.MM_PAGAMENTO AS CHAR(2))+'-'+CAST(A.GG_PAGAMENTO AS CHAR(2)) ), 120)&#xA; ELSE NULL&#xA; END AS DATA_PAGAMENTO&#xA; , ISNULL(E.CAU_CAU_IDS, -1) AS CAU_CAU_IDS_CASSA&#xA; , A.NUM_CAP_CASSA AS CAPITOLO&#xA; , A.CAUSALE&#xA; , ISNULL(F.OPE_OPE_IDS, -1) AS OPE_OPE_IDS&#xA; , A.UTENTE_IPDT AS CODICE_OPERATORE&#xA; /** aggiunta del 26/08/2011 per inserire nuove direzioni da bw **/&#xA; , CAST('-1' AS CHAR(8)) AS CODICE_DIREZIONE_SAP&#xA; , CAST('-1' AS CHAR(8)) AS CODICE_STRUTTURA_SAP&#xA; , CAST('-1' AS CHAR(120)) AS DESCRIZIONE_DIREZIONE_SAP&#xA; , CAST('MANCANTE' AS NVARCHAR(60)) AS DESCRIZIONE_STRUTTURA_SAP&#xA; , A.FLAG_VISTO&#xA; , A.DATA_INVIO_MIF AS DATA_INVIO_MANDATO_INFORMATICO&#xA; , CASE WHEN LEN(LTRIM(RTRIM(A.RIFERIMENTI))) = 0 THEN NULL ELSE A.RIFERIMENTI END AS RIFERIMENTI --SISTEMAZIONE NULL&#xA; , A.DATA_INS AS DATA_INSERIMENTO_ORDINE&#xA; , A.FLAG_COPERTURA&#xA; , A.FLAG_DOC_ESTERNI AS FLAG_DOCUMENTI_ESTERNI&#xA; , A.DATA_ESECUZ_PAG AS DATA_ESECUZIONE_PAGAMENTO&#xA; , A.DATA_SCAD_PAG AS DATA_SCADENZA_PAGAMENTO&#xA; , A.COD_STATO AS CODICE_STATO_MIF&#xA; , A.AA_BIL_PREC AS ANNO_BILANCIO_PRECEDENTE&#xA; , A.NUM_PAGAMENTO_PREC AS NUMERO_PAGAMENTO_PRECEDENTE&#xA; , CAST(NULL AS DATE) AS DATA_PAGAMENTO_PRECEDENTE&#xA; , A.INFO_TESORIERE&#xA; , A.FLAG_DOC_ESTERNI AS FLAG_DOCUMENTO_ESTERNI&#xA; -- campi non piu' gestiti in sap&#xA; --, A.FLAG_RITENUTA&#xA; , A.FLAG_SINGOLO&#xA; , A.FLAG_INTERCALARE&#xA; , ISNULL(J.USC_TGE_IDS, -1) AS USC_TGE_IDS&#xA; , A.TIPO_GESTIONE&#xA; , CASE WHEN ISDATE( CAST(A.AA_INVIO_TESORO AS CHAR(4))+'-'+CAST(A.MM_INVIO_TESORO AS CHAR(2))+'-'+CAST(A.GG_INVIO_TESORO AS CHAR(2)) ) = 1&#xA;  THEN CONVERT(DATETIME, ( CAST(A.AA_INVIO_TESORO AS CHAR(4))+'-'+CAST(A.MM_INVIO_TESORO AS CHAR(2))+'-'+CAST(A.GG_INVIO_TESORO AS CHAR(2)) ), 120)&#xA; ELSE NULL&#xA; END AS DATA_INVIO_TESORO&#xA; , CASE WHEN ISDATE( CAST(A.AA_PAG_TESORO AS CHAR(4))+'-'+CAST(A.MM_PAG_TESORO AS CHAR(2))+'-'+CAST(A.GG_PAG_TESORO AS CHAR(2)) ) = 1&#xA;  THEN CONVERT(DATETIME, ( CAST(A.AA_PAG_TESORO AS CHAR(4))+'-'+CAST(A.MM_PAG_TESORO AS CHAR(2))+'-'+CAST(A.GG_PAG_TESORO AS CHAR(2)) ), 120)&#xA; ELSE NULL&#xA; END AS DATA_PAGAMENTO_TESORO&#xA; , A.FLAG_REVERSALE&#xA; , A.ORDINE_SAP&#xA; , A.TIPO_PAG_PREC AS TIPO_PAGAMENTO_PRECEDENTE&#xA; , A.FLAG_FIRMA&#xA; , CASE WHEN LEN(LTRIM(RTRIM(A.DOC_ALLEGATI))) = 0 THEN NULL ELSE A.DOC_ALLEGATI END AS DOCUMENTI_ALLEGATI --SISTEMAZIONE NULL&#xA; , A.SERVIZIO&#xA; , ISNULL(L.STRUTTURA_IDS, -1) AS STRUTTURA_IDS&#xA; --, ISNULL(COALESCE(I.ATT_ATA_IDS,G.ATT_ATA_IDS), -1) AS ATT_MANDATO_IDS&#xA; , ISNULL(G.ATT_ATA_IDS, -1) AS ATT_MANDATO_IDS&#xA; , ISNULL(H.ATT_ATA_IDS, -1) AS ATT_LIQUIDAZIONE_IDS&#xA; , NULL AS ANNO_LIQUIDAZIONE&#xA; , NULL AS NUMERO_LIQUIDAZIONE&#xA; , NULL AS STATO&#xA; , -1 AS USC_ORD_STATO_IDS&#xA; , NULL AS GESTIONE_SANITARIA&#xA; , NULL AS BENEFICIARIO_ALTERNATIVO&#xA; , NULL AS DESCRIZIONE_BENEFICIARIO_ALTERNATIVO&#xA; , NULL AS MODALITA_ALTERNATIVA&#xA; , NULL AS DESCRIZIONE_MODALITA_ALTERNATIVA&#xA; , LTRIM(RTRIM(A.ID_ARCHIVIO)) +'/'+ LTRIM(RTRIM(A.AA_PROTOCOLLO)) +'/'+ LTRIM(RTRIM(A.NUM_PROTOCOLLO)) AS PROTOCOLLO_MANDATO&#xA; , NULL AS MISSIONE_LEGGE_118&#xA; , NULL AS PROGRAMMA_LEGGE_118&#xA; , NULL AS TITOLO_LEGGE_118&#xA; , CAST(NULL AS CHAR(1)) AS FLAG_MANDATO_SOSTITUITO&#xA; , CAST(NULL AS DATETIME) AS SCADENZA_FATTURA&#xA; , CAST(NULL AS VARCHAR(1)) AS STATO_FIRMA&#xA; , CAST(NULL AS DATETIME) AS DATA_FIRMA&#xA; , CAST(NULL AS VARCHAR(12)) AS FIRMATARIO&#xA;INTO #T_USC_ORDINE&#xA;FROM #T_TORDINE_PAGAMENTO_001 A&#xA; LEFT JOIN S_USC_IMPEGNO B&#xA; ON A.AA_ES = B.ESERCIZIO&#xA; AND A.NUM_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.NUM_SUBIMP = ISNULL(B.NUMERO_SUBIMPEGNO, 0)&#xA;  LEFT JOIN S_USC_DIREZIONE C&#xA;  ON A.COD_ASSESSORATO = C.CODICE_DIREZIONE&#xA;  AND A.DATA_ORDINE BETWEEN C.DATA_INIZIO_VALIDITA AND C.DATA_FINE_VALIDITA&#xA;   LEFT JOIN S_USC_CODICE_ORDINE D&#xA;   ON A.COD_ORDINE = D.CODICE_ORDINE&#xA;    LEFT JOIN S_CAU_CAPITOLO_USCITA E&#xA;    ON A.AA_BIL = E.ESERCIZIO&#xA;    AND A.NUM_CAP_CASSA = E.CAPITOLO&#xA;    AND 0 = ISNULL(E.ARTICOLO,0)&#xA;     LEFT JOIN S_OPE_OPERATORE F&#xA;     ON A.UTENTE_IPDT = F.CODICE_OPERATORE &#xA;      LEFT JOIN S_ATT_ATTO_AMMINISTRATIVO G&#xA;      ON LTRIM(RTRIM(A.ID_ARCHIVIO)) +'/'+ LTRIM(RTRIM(A.AA_PROTOCOLLO)) +'/'+ LTRIM(RTRIM(A.NUM_PROTOCOLLO)) = G.PROTOCOLLO&#xA;      AND G.CONSUNTIVO_AGREA = 'N' &#xA;       LEFT JOIN S_ATT_ATTO_AMMINISTRATIVO H&#xA;       ON A.PROTOCOLLO_LIQ = H.PROTOCOLLO&#xA;       AND A.AA_PROT_LIQ = H.ANNO_PROTOCOLLO&#xA;       AND H.CONSUNTIVO_AGREA = 'N'&#xA;       -- LEFT JOIN S_ATT_ATTO_AMMINISTRATIVO I&#xA;       -- ON LTRIM(RTRIM(A.SERVIZIO)) +'/'+ RIGHT(LTRIM(RTRIM(A.AA_PROTOCOLLO)),2) +'/'+ LTRIM(RTRIM(A.NUM_PROTOCOLLO)) = LTRIM(RTRIM(I.PROTOCOLLO)) &#xA;       -- AND A.AA_PROTOCOLLO = I.ANNO_PROTOCOLLO&#xA;       -- AND I.CONSUNTIVO_AGREA = 'N'&#xA;         LEFT JOIN S_USC_TIPO_GESTIONE J&#xA;         ON A.TIPO_GESTIONE = J.TIPO_GESTIONE&#xA;           LEFT JOIN S_STRUTTURE L&#xA;           ON A.SERVIZIO = L.SERVIZIO&#xA;           AND GETDATE() &gt;= L.DATA_INIZIO_VALIDITA&#xA;           AND GETDATE() &lt; L.DATA_FINE_VALIDITA&#xA;UNION ALL&#xA;SELECT A.ANNO_ORDINE_PAGAMENTO AS ANNO_ORDINE&#xA; , NULL AS CODICE_ASSESSORATO&#xA; , A.NUMERO_ORDINE_PAGAMENTO AS NUMERO_ORDINE_PAGAMENTO&#xA; , -1 AS USC_DIR_IDS&#xA; , A.DATA_ORDINE_PAGAMENTO AS DATA_ORDINE &#xA; , ISNULL(D.CODICE_ORDINE, '***') AS CODICE_ORDINE&#xA; , -1 AS USC_IMP_IDS&#xA;    , NULL AS ESERCIZIO&#xA; , NULL AS NUMERO_IMPEGNO&#xA; , NULL AS NUMERO_SUBIMPEGNO&#xA; , CASE WHEN A.ESERCIZIO_MANDATO = 0&#xA;   THEN -1&#xA;   ELSE A.ESERCIZIO_MANDATO&#xA;   END AS ANNO_BILANCIO -- da verifiche risulta che ESERCIZIO_MANDATO è ANNO_BILANCIO&#xA; , 'M' AS TIPO_PAGAMENTO&#xA; , CASE WHEN A.NUMERO_MANDATO = 0&#xA;     THEN NULL&#xA;     ELSE A.NUMERO_MANDATO&#xA;   END AS NUMERO_PAGAMENTO&#xA; ,CASE WHEN ISDATE(A.DATA_MANDATO) = 1 THEN CONVERT(DATETIME, A.DATA_MANDATO)&#xA; ELSE NULL END AS DATA_PAGAMENTO&#xA; , ISNULL(E.CAU_CAU_IDS, -1) AS CAU_CAU_IDS_CASSA&#xA; , Right(A.CAPITOLO,5) AS CAPITOLO&#xA; , A.TESTO_TESTATA AS CAUSALE&#xA; , ISNULL(F.OPE_OPE_IDS, -1) AS OPE_OPE_IDS&#xA; , A.CREATO_DA AS CODICE_OPERATORE&#xA; /** aggiunta del 26/08/2011 per inserire nuove direzioni da bw **/&#xA; , ISNULL(A.CODICE_DIREZIONE, -1) AS CODICE_DIREZIONE_SAP&#xA; , ISNULL(A.CODICE_STRUTTURA, -1) AS CODICE_STRUTTURA_SAP&#xA; , ISNULL(A.DESCRIZIONE_DIREZIONE, -1) AS DESCRIZIONE_DIREZIONE_SAP&#xA; , ISNULL(A.DESCR_B_SERV,'MANCANTE') AS DESCRIZIONE_STRUTTURA_SAP&#xA; , CASE WHEN A.FLAG_VISTO = 'X' THEN 'P' ELSE NULL END AS FLAG_VISTO&#xA; , CASE WHEN ISDATE(A.DATA_INVIO_FILE) = 1 THEN  CONVERT(DATETIME, A.DATA_INVIO_FILE) ELSE NULL END AS DATA_INVIO_MANDATO_INFORMATICO&#xA; , CASE WHEN LEN(LTRIM(RTRIM(A.RIFERIMENTI))) = 0 THEN NULL ELSE A.RIFERIMENTI END AS RIFERIMENTI-- SISTEMAZIONE NULL&#xA; , A.DATA_ORDINE AS DATA_INSERIMENTO_ORDINE&#xA; , CASE WHEN A.FLAG_COPERTURA = 'X' THEN 'S' ELSE 'N' END AS FLAG_COPERTURA&#xA; , A.FLAG_RIF_DOCUMENTO_ESTERNO AS FLAG_DOCUMENTI_ESTERNI&#xA; , CASE WHEN ISDATE(A.DATA_ESECUZIONE_PAG) = 1 THEN  CONVERT(DATETIME, A.DATA_ESECUZIONE_PAG) ELSE NULL END AS DATA_ESECUZIONE_PAGAMENTO&#xA; , CASE WHEN ISDATE(A.DATA_SCADENZA_PAG) = 1 THEN  CONVERT(DATETIME, A.DATA_SCADENZA_PAG) ELSE NULL END AS DATA_SCADENZA_PAGAMENTO&#xA; , A.CODICE_MIF AS CODICE_STATO_MIF&#xA; , CASE WHEN A.Anno_Bilancio_MANDATO_RIEMESSO = 0 THEN NULL ELSE A.Anno_Bilancio_MANDATO_RIEMESSO END AS ANNO_BILANCIO_PRECEDENTE&#xA; , CASE WHEN A.Numero_di_Pagamento_RIEMESSO = 0 THEN NULL ELSE A.Numero_di_Pagamento_RIEMESSO END  AS NUMERO_PAGAMENTO_PRECEDENTE&#xA; , CASE WHEN ISDATE(X.DATA_MANDATO) = 1 THEN CONVERT(DATETIME, X.DATA_MANDATO)&#xA; ELSE NULL END AS DATA_PAGAMENTO_PRECEDENTE&#xA; , A.RIFERIMENTO_DOCUMENTO_ESTERNO AS INFO_TESORIERE&#xA; , CASE WHEN A.Flag_rif_documento_esterno = 'X' THEN 'S' ELSE 'N' END AS FLAG_DOCUMENTO_ESTERNI&#xA; -- campi non piu' gestiti in sap&#xA; --, NULL AS FLAG_RITENUTA&#xA; , NULL AS FLAG_SINGOLO&#xA; , NULL AS FLAG_INTERCALARE&#xA; , -1 AS USC_TGE_IDS&#xA; , NULL AS TIPO_GESTIONE&#xA; , NULL AS DATA_INVIO_TESORO&#xA; , NULL AS DATA_PAGAMENTO_TESORO&#xA; , NULL AS FLAG_REVERSALE&#xA; , NULL AS ORDINE_SAP&#xA; , NULL AS TIPO_PAGAMENTO_PRECEDENTE&#xA; , NULL AS FLAG_FIRMA&#xA; , NULL AS DOCUMENTI_ALLEGATI&#xA; , NULL AS SERVIZIO&#xA; , -1 AS STRUTTURA_IDS&#xA; , -1 AS ATT_MANDATO_IDS&#xA; , ISNULL(G.ATT_ATA_IDS, -1) AS ATT_LIQUIDAZIONE_IDS&#xA; , A.ANNO_LIQUIDAZIONE AS ANNO_LIQUIDAZIONE&#xA; , A.NUM_LIQUIDAZIONE AS NUMERO_LIQUIDAZIONE&#xA; , A.STATO AS STATO&#xA; , ISNULL(H.USC_ORD_STATO_IDS, -1) AS USC_ORD_STATO_IDS&#xA; , A.GESTIONE_SANITARIA&#xA; , CAST(A.BENEFICIARIO_ALTERNATIVO AS INT) AS BENEFICIARIO_ALTERNATIVO&#xA; , I.RAGIONE_SOCIALE AS DESCRIZIONE_BENEFICIARIO_ALTERNATIVO&#xA; , CAST(A.MOD_PAGAMENTO_ALTERNATIVA AS INT) AS MODALITA_ALTERNATIVA&#xA; , A.DES_MOD_PAGAMENTO_ALTERNATIVA AS DESCRIZIONE_MODALITA_ALTERNATIVA&#xA; , J.PROTOCOLLO AS PROTOCOLLO_MANDATO&#xA; , A.MISS_LEG AS MISSIONE_LEGGE_118&#xA; , A.PROG_LEG AS PROGRAMMA_LEGGE_118&#xA; , A.TIT_LEG AS TITOLO_LEGGE_118&#xA; , CAST(CASE WHEN A.FLAG_MANDATO_SOSTITUZIONE = 'X'&#xA;    THEN 'S'&#xA;    ELSE NULL&#xA;     END AS CHAR(1)) AS FLAG_MANDATO_SOSTITUITO&#xA;, CASE WHEN ISDATE(A.DATA_SCAD_FATT) = 1 THEN  CONVERT(DATETIME, A.DATA_SCAD_FATT) ELSE NULL END AS SCADENZA_FATTURA&#xA; , A.STATO_FIRMA AS STATO_FIRMA&#xA; , CASE WHEN A.DATA_FIRMA = '00000000' THEN NULL ELSE &#xA;  CASE WHEN ISDATE(A.DATA_FIRMA) = 1 THEN CONVERT(DATETIME, A.DATA_FIRMA) ELSE NULL END &#xA;   END AS DATA_FIRMA&#xA; , A.FIRMATARIO AS FIRMATARIO&#xA;FROM #G_T_VF_ORDINI_MANDATI_TESTATA_T_001 A&#xA;  LEFT JOIN S_USC_CODICE_ORDINE D&#xA;  ON case when  /* in sap si fa distinzione tra cassa economale centrale e cassa economale periferica */&#xA;    cast(cast (A.TIPO_ORDINE as int)  as varchar) = '6' &#xA;    then '1' &#xA;    else cast(cast (A.TIPO_ORDINE as int)  as varchar) &#xA;   END = D.CODICE_ORDINE&#xA;   LEFT JOIN S_CAU_CAPITOLO_USCITA E&#xA;   ON A.ESERCIZIO_MANDATO = E.ESERCIZIO&#xA;   AND RIGHT(A.CAPITOLO,5) = E.CAPITOLO&#xA;   AND 0 = ISNULL(E.ARTICOLO,0)&#xA;    LEFT JOIN S_OPE_OPERATORE F&#xA;    ON A.CREATO_DA = F.CODICE_OPERATORE_SAP&#xA;     LEFT JOIN S_ATT_ATTO_AMMINISTRATIVO G&#xA;     ON A.TIPO_ATTO_LIQUIDAZIONE = G.TIPO_DECRETO&#xA;     AND CAST(A.NUMERO_ATTO_LIQUIDAZIONE AS INT) = G.NUMERO_DECRETO&#xA;     AND SUBSTRING(A.DATA_ATTO_LIQUIDAZIONE, 1, 4) = G.ANNO_ADOZIONE&#xA;     AND G.ENTE = 1&#xA;      LEFT JOIN S_USC_STATO_ORDINE H&#xA;      ON A.STATO = H.STATO_ORDINE_PAGAMENTO&#xA;       LEFT JOIN S_BEN_BENEFICIARIO I&#xA;       ON A.BENEFICIARIO_ALTERNATIVO = I.CHIAVE_SAP&#xA;        LEFT JOIN S_USC_LIQUIDAZIONE J&#xA;        ON A.ANNO_LIQUIDAZIONE = J.ESERCIZIO&#xA;        AND A.NUM_LIQUIDAZIONE = J.NUMERO_LIQUIDAZIONE&#xA;         LEFT JOIN #G_T_VF_ORDINI_MANDATI_TESTATA_T_001 X&#xA;         ON CASE WHEN A.Anno_Bilancio_MANDATO_RIEMESSO = 0 THEN NULL ELSE A.Anno_Bilancio_MANDATO_RIEMESSO END&#xA;          =&#xA;         CASE WHEN X.ESERCIZIO_MANDATO = 0 THEN NULL ELSE X.ESERCIZIO_MANDATO END&#xA;         AND &#xA;         CASE WHEN A.Numero_di_Pagamento_RIEMESSO = 0 THEN NULL ELSE A.Numero_di_Pagamento_RIEMESSO END&#xA;         = &#xA;         CASE WHEN X.NUMERO_MANDATO = 0  THEN NULL  ELSE X.NUMERO_MANDATO  END&#xA;&#xA;-- CREAZIONE S_TABLE&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[S_USC_ORDINE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [S_USC_ORDINE]&#xA;&#xA;SELECT IDENTITY(Int, 1, 1) as USC_ORD_IDS&#xA; , ANNO_ORDINE&#xA; , CODICE_ASSESSORATO&#xA; , NUMERO_ORDINE&#xA; , USC_DIR_IDS&#xA; , DATA_ORDINE&#xA; , CODICE_ORDINE&#xA; , USC_IMP_IDS&#xA; , ESERCIZIO&#xA; , NUMERO_IMPEGNO&#xA; , NUMERO_SUBIMPEGNO&#xA; , ANNO_BILANCIO&#xA; , TIPO_PAGAMENTO&#xA; , NUMERO_PAGAMENTO&#xA; , DATA_PAGAMENTO&#xA; , CAU_CAU_IDS_CASSA&#xA; , CAPITOLO&#xA; , CAUSALE&#xA; , OPE_OPE_IDS&#xA; , CODICE_OPERATORE&#xA; /** aggiunta del 26/08/2011 per inserire nuove direzioni da bw **/&#xA; , CODICE_DIREZIONE_SAP&#xA; , CODICE_STRUTTURA_SAP&#xA; , DESCRIZIONE_DIREZIONE_SAP &#xA; , DESCRIZIONE_STRUTTURA_SAP&#xA; , A.FLAG_VISTO&#xA; , DATA_INVIO_MANDATO_INFORMATICO&#xA; , RIFERIMENTI&#xA; , DATA_INSERIMENTO_ORDINE&#xA; , FLAG_COPERTURA&#xA; , FLAG_DOCUMENTI_ESTERNI&#xA; , DATA_ESECUZIONE_PAGAMENTO&#xA; , DATA_SCADENZA_PAGAMENTO&#xA; , CODICE_STATO_MIF&#xA; , ANNO_BILANCIO_PRECEDENTE&#xA; , NUMERO_PAGAMENTO_PRECEDENTE&#xA; , DATA_PAGAMENTO_PRECEDENTE&#xA; , INFO_TESORIERE&#xA; , FLAG_DOCUMENTO_ESTERNI&#xA; , FLAG_SINGOLO&#xA; , FLAG_INTERCALARE&#xA; , USC_TGE_IDS&#xA; , TIPO_GESTIONE&#xA; , DATA_INVIO_TESORO&#xA; , DATA_PAGAMENTO_TESORO&#xA; , FLAG_REVERSALE&#xA; , ORDINE_SAP&#xA; , TIPO_PAGAMENTO_PRECEDENTE&#xA; , FLAG_FIRMA&#xA; , DOCUMENTI_ALLEGATI&#xA; , SERVIZIO&#xA; , STRUTTURA_IDS&#xA; , ATT_MANDATO_IDS&#xA; , ATT_LIQUIDAZIONE_IDS&#xA; , ANNO_LIQUIDAZIONE&#xA; , NUMERO_LIQUIDAZIONE&#xA; , STATO&#xA; , USC_ORD_STATO_IDS&#xA; , GESTIONE_SANITARIA&#xA; , BENEFICIARIO_ALTERNATIVO&#xA; , DESCRIZIONE_BENEFICIARIO_ALTERNATIVO&#xA; , MODALITA_ALTERNATIVA&#xA; , DESCRIZIONE_MODALITA_ALTERNATIVA&#xA; , PROTOCOLLO_MANDATO&#xA; , ISNULL(B.CAU_MISLEG_118_IDS, -1) AS CAU_MISLEG_118_IDS&#xA; , A.MISSIONE_LEGGE_118&#xA; , ISNULL(C.CAU_PRGLEG_118_IDS, -1) AS CAU_PRGLEG_118_IDS&#xA; , A.PROGRAMMA_LEGGE_118&#xA; , ISNULL(D.CAU_TITUSCLEG_118_IDS, -1) AS CAU_TITUSCLEG_118_IDS&#xA; , A.TITOLO_LEGGE_118&#xA; , CASE WHEN YEAR(A.DATA_PAGAMENTO)*100 +  MONTH(A.DATA_PAGAMENTO) &lt;&gt;  YEAR(A.DATA_PAGAMENTO_PRECEDENTE)*100 +  MONTH(A.DATA_PAGAMENTO_PRECEDENTE)&#xA;   THEN 'S'&#xA;   ELSE NULL&#xA;   END AS ESCLUDI_DA_F24EP&#xA; , A.FLAG_MANDATO_SOSTITUITO&#xA;, A.SCADENZA_FATTURA&#xA; , A.STATO_FIRMA&#xA; , A.DATA_FIRMA&#xA; , A.FIRMATARIO&#xA; , ISNULL(E.STATO_FIRMA_IDS, -1) AS STATO_FIRMA_IDS&#xA; , ISNULL(F.FIRMATARIO_IDS, -1) AS FIRMATARIO_IDS&#xA; , ISNULL(G.FLAG_VISTO_IDS, -1) AS FLAG_VISTO_IDS&#xA;INTO S_USC_ORDINE&#xA;FROM #T_USC_ORDINE A &#xA; LEFT JOIN S_CAU_MISSIONE_LEGGE_118 B&#xA; ON A.MISSIONE_LEGGE_118 = B.MISSIONE_LEGGE_118&#xA; AND A.DATA_PAGAMENTO BETWEEN B.DATA_INIZIO_VALIDITA AND B.DATA_FINE_VALIDITA&#xA;  LEFT JOIN S_CAU_PROGRAMMA_LEGGE_118 C&#xA;  ON A.PROGRAMMA_LEGGE_118 = C.PROGRAMMA_LEGGE_118&#xA;  AND A.MISSIONE_LEGGE_118 = C.MISSIONE_LEGGE_118&#xA;  AND A.DATA_PAGAMENTO BETWEEN C.DATA_INIZIO_VALIDITA AND C.DATA_FINE_VALIDITA&#xA;   LEFT JOIN S_CAU_TITOLO_USCITE_LEGGE_118 D&#xA;   ON A.TITOLO_LEGGE_118 = D.TITOLO_CAPITOLO_USCITA_LEGGE_118&#xA;   AND A.DATA_PAGAMENTO BETWEEN D.DATA_INIZIO_VALIDITA AND D.DATA_FINE_VALIDITA&#xA;    LEFT JOIN S_USC_STATO_FIRMA E &#xA;    ON A.STATO_FIRMA = E.CODICE_STATO_FIRMA&#xA;     LEFT JOIN S_USC_FIRMATARI F&#xA;     ON A.FIRMATARIO = F.CODICE_FIRMATARIO&#xA;      LEFT JOIN S_USC_FLAG_VISTO G &#xA;      ON A.FLAG_VISTO = G.FLAG_VISTO&#xA;&#xA;set identity_insert S_USC_ORDINE on&#xA;insert into S_USC_ORDINE (USC_ORD_IDS, USC_DIR_IDS, USC_IMP_IDS, CAU_CAU_IDS_CASSA, CODICE_ORDINE, ANNO_BILANCIO, &#xA;  OPE_OPE_IDS, ATT_MANDATO_IDS, ATT_LIQUIDAZIONE_IDS , STRUTTURA_IDS , USC_TGE_IDS, USC_ORD_STATO_IDS, GESTIONE_SANITARIA,CAU_MISLEG_118_IDS,CAU_PRGLEG_118_IDS,CAU_TITUSCLEG_118_IDS, STATO_FIRMA_IDS, FIRMATARIO_IDS, FLAG_VISTO_IDS)&#xA;values(-1, -1, -1, -1, '***', -1, -1, -1, -1, -1 ,-1, -1,NULL,-1,-1,-1, -1,-1,-1)&#xA;set identity_insert S_USC_ORDINE off&#xA;&#xA;DROP TABLE #T_TORDINE_PAGAMENTO_001&#xA;DROP TABLE #T_VF_ORDINI_MANDATI_TESTATA_T&#xA;DROP TABLE #T_USC_ORDINE&#xA;DROP TABLE #T_TTABDECODIFICA&#xA;--DROP TABLE #G_T_VF_ORDINI_MANDATI_TESTATA_T_001" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\S_USC_PARTITA"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{ff1dffed-7872-4bb0-89f8-17aed4722613}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="S_USC_PARTITA"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="4">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0556BA1E-49B6-411F-B26B-200B0FE334B7}"
          SQLTask:SqlStatementSource="-- imposto i parametri fissi per la query, prendendoli da M_PARAMETRI_BW&#xA;DECLARE @ANNO_INIZIO_BW int&#xA;DECLARE @SISTEMA_SORGENTE_BW varchar(50)&#xA;DECLARE @COD_UTENTE_DB2 varchar(50)&#xA;&#xA;SELECT TOP 1&#xA;      @ANNO_INIZIO_BW = ANNO_INIZIO_BW,&#xA;      @SISTEMA_SORGENTE_BW = SISTEMA_SORGENTE,&#xA;      @COD_UTENTE_DB2 = COD_UTENTE_DB2&#xA;FROM M_PARAMETRI_BW&#xA;WHERE CONTESTO = 'PARTITE'&#xA;--------------------------------------------------------&#xA;&#xA;-- controllo sovrapposizione date e primary key&#xA;-- scrittura tabella errore&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_TDOC_SPESA]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_TDOC_SPESA]&#xA;&#xA;SELECT a.*&#xA;INTO E_TDOC_SPESA&#xA;FROM T_TDOC_SPESA A&#xA; INNER JOIN ( SELECT AA_DS, NUM_DS, CODICE1, CODICE2, CODICE3, NUM_BENEF, PROGR_DS&#xA;   FROM T_TDOC_SPESA&#xA;   WHERE COD_UTENTE = @COD_UTENTE_DB2&#xA;   GROUP BY AA_DS, NUM_DS, CODICE1, CODICE2, CODICE3, NUM_BENEF, PROGR_DS&#xA;   HAVING COUNT(*)&gt;1) B&#xA; ON A.AA_DS = B.AA_DS&#xA; AND A.NUM_DS = B.NUM_DS&#xA; AND A.CODICE1 = B.CODICE1&#xA; AND A.CODICE2 = B.CODICE2&#xA; AND A.CODICE3 = B.CODICE3&#xA; AND A.NUM_BENEF = B.NUM_BENEF&#xA; AND A.PROGR_DS = B.PROGR_DS&#xA;WHERE A.COD_UTENTE = @COD_UTENTE_DB2&#xA;&#xA;-- scrittura tabella Staging&#xA;SELECT A.*&#xA;INTO #G_T_TDOC_SPESA_001&#xA;FROM T_TDOC_SPESA A&#xA; LEFT JOIN E_TDOC_SPESA B&#xA; ON A.AA_DS = B.AA_DS&#xA; AND A.NUM_DS = B.NUM_DS&#xA; AND A.CODICE1 = B.CODICE1&#xA; AND A.CODICE2 = B.CODICE2&#xA; AND A.CODICE3 = B.CODICE3&#xA; AND A.NUM_BENEF = B.NUM_BENEF&#xA; AND A.PROGR_DS = B.PROGR_DS&#xA;WHERE B.NUM_DS is NULL&#xA;AND A.COD_UTENTE = @COD_UTENTE_DB2&#xA;AND A.AA_APERTURA &lt; @ANNO_INIZIO_BW&#xA;ORDER BY A.AA_DS, A.CODICE1, A.CODICE2, A.CODICE3, A.NUM_BENEF, A.NUM_DS, A.PROGR_DS&#xA;&#xA;SELECT *&#xA;INTO #T_VF_DOC_SPESA_TESTATA&#xA;FROM T_VF_DOC_SPESA_TESTATA&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;AND CASE WHEN LEFT(NUMERO_DOC_SPESA, 1) = '1' AND ESERCIZIO &gt; 2000 -- LE PARTITE FM POSSONO AVERE UNA DATA DI REGISTRAZIONE MODIFICATA, MI BASO SUL CODICE&#xA;   THEN 1000 + CAST(LEFT(NUMERO_DOC_SPESA,4) AS INT)    -- LE MM NO, QUINDI POSSO UTILIZZARE LA DATA DI REGISTRAZIONE&#xA;   ELSE YEAR(DATA_REGISTRAZIONE)&#xA; END &gt;= @ANNO_INIZIO_BW&#xA;--AND year(DATA_DOCUMENTO) &gt;= @ANNO_INIZIO_BW -- il vero esercizio è ESERCIZIO_IMPEGNO proveniente dalla tabella T_VF_DOC_SPESA_POSIZIONE&#xA;--AND ESERCIZIO &gt;= @ANNO_INIZIO_BW&#xA;AND CODICE_STORNO &lt;&gt; 'X'&#xA;&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_VF_DOC_SPESA_TESTATA]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_DOC_SPESA_TESTATA]&#xA;&#xA;SELECT a.*&#xA;INTO E_VF_DOC_SPESA_TESTATA&#xA;FROM #T_VF_DOC_SPESA_TESTATA A&#xA; INNER JOIN ( SELECT ESERCIZIO,NUMERO_DOC_SPESA, CAPITOLO&#xA;                        FROM #T_VF_DOC_SPESA_TESTATA&#xA;   GROUP BY ESERCIZIO,NUMERO_DOC_SPESA,CAPITOLO&#xA;   HAVING COUNT(*)&gt;1) B&#xA;ON A.NUMERO_DOC_SPESA = B.NUMERO_DOC_SPESA&#xA;AND A.ESERCIZIO = B.ESERCIZIO&#xA;AND A.CAPITOLO = B.CAPITOLO -- aggiunto 22/06/2011&#xA;&#xA;-- scrittura tabella Staging&#xA;SELECT A.*&#xA;INTO #G_T_VF_DOC_SPESA_TESTATA_001&#xA;FROM #T_VF_DOC_SPESA_TESTATA A&#xA; LEFT JOIN E_VF_DOC_SPESA_TESTATA B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND A.NUMERO_DOC_SPESA = B.NUMERO_DOC_SPESA&#xA; AND A.CAPITOLO = B.CAPITOLO&#xA;WHERE B.NUMERO_DOC_SPESA is NULL&#xA;ORDER BY 1,2&#xA;&#xA;&#xA;-- CREAZIONE S_TABLE&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[S_USC_PARTITA]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [S_USC_PARTITA]&#xA;&#xA;SELECT A.AA_DS AS ANNO_PARTITA&#xA; , ISNULL(C.BEN_BEN_IDS, -1) AS BEN_BEN_IDS&#xA; , A.CODICE1*100+A.CODICE2*10+A.CODICE3 AS CATEGORIA_ECONOMICA, A. NUM_BENEF AS NUMERO_BENEFICIARIO&#xA; , C.CHIAVE_SAP AS CHIAVE_SAP_BENEFICIARIO&#xA; , NUM_DS AS NUMERO_PARTITA, PROGR_DS AS PROGRESSIVO_PARTITA&#xA; , CASE WHEN ISDATE( CAST(AA_DS AS CHAR(4))+'-'+CAST(MM_DS AS CHAR(2))+'-'+CAST(GG_DS AS CHAR(2)) ) = 1&#xA;  THEN CONVERT(DATETIME, CAST(AA_DS AS CHAR(4))+'-'+CAST(MM_DS AS CHAR(2))+'-'+CAST(GG_DS AS CHAR(2)), 120)&#xA; ELSE NULL&#xA; END AS DATA_PARTITA&#xA; , NULL AS DATA_REGISTRAZIONE&#xA; , ISNULL(F.CODICE_TIPO_PARTITA, '***') AS CODICE_TIPO_PARTITA&#xA; , CASE WHEN ISDATE( CAST(AA_APERTURA AS CHAR(4))+'-'+CAST(MM_APERTURA AS CHAR(2))+'-'+CAST(GG_APERTURA AS CHAR(2)) ) = 1&#xA;  THEN CONVERT(DATETIME, ( CAST(AA_APERTURA AS CHAR(4))+'-'+CAST(MM_APERTURA AS CHAR(2))+'-'+CAST(GG_APERTURA AS CHAR(2)) ), 120)&#xA; ELSE NULL&#xA; END AS DATA_APERTURA&#xA; , ISNULL(G.CODICE_TIPO_RITENUTA_ERARIALE, '***') AS CODICE_TIPO_RITENUTA_ERARIALE&#xA; , AA_ES AS ESERCIZIO&#xA; , ISNULL(D.CAU_CAU_IDS, -1) AS CAU_CAU_IDS&#xA;    , A.NUM_CAP AS CAPITOLO&#xA;    , D.ARTICOLO AS ARTICOLO&#xA; , CASE WHEN ISDATE( CAST(AA_PAG AS CHAR(4))+'-'+CAST(MM_PAG AS CHAR(2))+'-'+CAST(GG_PAG AS CHAR(2)) ) = 1&#xA;  THEN CONVERT(DATETIME, ( CAST(AA_PAG AS CHAR(4))+'-'+CAST(MM_PAG AS CHAR(2))+'-'+CAST(GG_PAG AS CHAR(2)) ), 120)&#xA; ELSE NULL&#xA; END AS DATA_PAGAMENTO&#xA; , ISNULL(H.CODICE_TIPO_PAGAMENTO, '***') AS CODICE_TIPO_PAGAMENTO&#xA; , A.NUM_BUONO_PAG AS NUMERO_BUONO_PAGAMENTO&#xA; , ISNULL(E.USC_IMP_IDS, -1) AS USC_IMP_IDS, A.NUM_IMPEGNO AS NUMERO_IMPEGNO, E.NUMERO_SUBIMPEGNO&#xA; , NOTE_DS AS NOTE_PARTITA&#xA; , A.CHIAVE_SAP AS CHIAVE_SAP&#xA; , 'N' as PARTITA_FITTIZIA&#xA; , -1 AS NUMERO_DOC_RIFERIMENTO&#xA; , '-1' AS SOCIETA_DOC_RIFERIMENTO&#xA; , -1 AS ESERCIZIO_DOC_RIFERIMENTO&#xA; , ISNULL(I.USC_COD_GIU, -1) AS USC_COD_GIU&#xA; , A.TIPO_GIUSTIF&#xA; , ISNULL(L.USC_BOR_IDS, -1) AS USC_BOR_IDS&#xA; , A.NUM_GIUSTIF AS NUMERO_GIUSTIF&#xA; , A.AA_GIUSTIF AS ANNO_GIUSTIF&#xA; , A.NUMERO_CC AS NUMERO_CONTO_CORRENTE&#xA; , A.AA_BIL_REINTEGRO AS ANNO_REINTEGRO&#xA; , A.NUM_MOV_REINTEGRO AS NUMERO_MOVIMENTO_REINTEGRO&#xA; , A.AA_BIL_ESBORSO AS ANNO_ESBORSO&#xA; , A.NUM_MOV_ESBORSO AS NUMERO_MOVIMENTO_ESBORSO&#xA; , A.TIPO_PREINT AS TIPO_PREINTERCALARE&#xA; , A.NUM_PREINT AS NUMERO_PREINTERCALARE&#xA; , A.FLAG_SAP&#xA; , A.ANNO_CONTO&#xA; , A.NUM_CONTO AS NUMERO_CONTO&#xA; , A.ANNO_RENDICONTO&#xA; , A.PROGR_RENDICONTO AS NUMERO_RENDICONTO&#xA; , A.FLAG_RITENUTA&#xA; , NULL AS CODICE_CIG&#xA; , NULL AS CODICE_CUP&#xA; , A.AA_ES AS ESERCIZIO_PARTITA&#xA; , NULL AS RIFERIMENTO&#xA; , NULL AS CAUSALE&#xA; , NULL AS DATA_BASE&#xA; , NULL AS GIORNI_SCADENZA&#xA; , NULL AS DATA_SCADENZA&#xA; , NULL AS IMPORTO_IMPONIBILE_IVA&#xA; , NULL AS IMPORTO_IVA_SPLIT_PAYMENT&#xA; , NULL AS FLAG_NOTA_CREDITO&#xA;INTO #T_USC_PARTITA_001&#xA;FROM #G_T_TDOC_SPESA_001 A&#xA; LEFT JOIN S_BEN_BENEFICIARIO C&#xA; ON A.NUM_BENEF = C.NUMERO_BENEFICIARIO&#xA; AND A.CODICE1*100+A.CODICE2*10+A.CODICE3 = C.CATEGORIA_ECONOMICA_ORIGINALE&#xA; AND C.FLAG_OCCASIONALE = 'N'&#xA;  LEFT JOIN S_CAU_CAPITOLO_USCITA D&#xA;  ON A.AA_ES = D.ESERCIZIO&#xA;  AND A.NUM_CAP = D.CAPITOLO&#xA;  AND A.NUM_ART = ISNULL(D.ARTICOLO, 0)&#xA;   LEFT JOIN S_USC_IMPEGNO E&#xA;   ON A.AA_ES = E.ESERCIZIO&#xA;   AND A.NUM_IMPEGNO = E.NUMERO_IMPEGNO&#xA;   AND A.NUM_SUBIMP = ISNULL(E.NUMERO_SUBIMPEGNO, 0)&#xA;    LEFT JOIN S_USC_TIPO_PARTITA F&#xA;    ON A.TIPO_PARTITA = F.CODICE_TIPO_PARTITA&#xA;     LEFT JOIN S_USC_TIPO_RITENUTA_ERARIALE G&#xA;     ON A.TIPO_RIT_ERARIALI = G.CODICE_TIPO_RITENUTA_ERARIALE&#xA;      LEFT JOIN S_USC_TIPO_PAGAMENTO H&#xA;      ON A.TIPO_PAG = H.CODICE_TIPO_PAGAMENTO&#xA;       LEFT JOIN S_USC_TIPO_GIUSTIF I&#xA;       ON A.TIPO_GIUSTIF = I.TIPO_GIUSTIF&#xA;          LEFT JOIN S_USC_BUONO_ORDINE L&#xA;         ON  A.NUM_GIUSTIF = L.NUMERO_BUONO_ORDINE&#xA;         AND  A.AA_GIUSTIF = L.ANNO_BUONO_ORDINE&#xA;         AND A.TIPO_GIUSTIF = L.TIPO_BUONO&#xA;UNION ALL&#xA;SELECT &#xA;  YEAR(A.DATA_DOCUMENTO) AS ANNO_PARTITA&#xA;   --CASE WHEN LEFT(A.NUMERO_DOC_SPESA, 1) = '1' AND A.ESERCIZIO &gt; 2000 -- LE PARTITE FM POSSONO AVERE UNA DATA DI REGISTRAZIONE MODIFICATA, MI BASO SUL CODICE&#xA;   --THEN 1000 + CAST(LEFT(A.NUMERO_DOC_SPESA,4) AS INT)    -- LE MM NO, QUINDI POSSO UTILIZZARE LA DATA DI REGISTRAZIONE&#xA;   --ELSE YEAR(A.DATA_REGISTRAZIONE)&#xA;   --END AS ANNO_PARTITA -- presente in test ma mai portato in produzione 20151110&#xA; --A.ESERCIZIO  AS ANNO_PARTITA&#xA; , ISNULL(C.BEN_BEN_IDS, -1) AS BEN_BEN_IDS&#xA; , C.CATEGORIA_ECONOMICA AS CATEGORIA_ECONOMICA&#xA; , A.BENEFICIARIO AS NUMERO_BENEFICIARIO&#xA; , C.CHIAVE_SAP AS CHIAVE_SAP_BENEFICIARIO&#xA; , NULL AS NUMERO_PARTITA&#xA; , NULL AS PROGRESSIVO_PARTITA -- modifica del 27/01/2015, da questa data su SAP utilizzano il campo RIFERIMENTO &#xA; , DATA_DOCUMENTO AS DATA_PARTITA&#xA; , DATA_REGISTRAZIONE AS DATA_REGISTRAZIONE&#xA; , ISNULL(F.CODICE_TIPO_PARTITA, '***') AS CODICE_TIPO_PARTITA&#xA; , DATA_REGISTRAZIONE AS DATA_APERTURA &#xA; , '***' AS CODICE_TIPO_RITENUTA_ERARIALE -- non gestito da sap&#xA; , A.ESERCIZIO AS ESERCIZIO&#xA; , ISNULL(D.CAU_CAU_IDS, -1) AS CAU_CAU_IDS&#xA; , RIGHT(A.CAPITOLO,5) AS CAPITOLO&#xA; , NULL AS ARTICOLO -- non gestito da SAP&#xA; , CASE WHEN ISDATE(A.DATA_BUO_PAG) = 1 THEN DATA_BUO_PAG ELSE NULL END AS DATA_PAGAMENTO&#xA; , '***' AS CODICE_TIPO_PAGAMENTO -- richiesto a kpmg&#xA; , CASE WHEN A.NUM_BUON_PAGAM = 0 THEN NULL ELSE A.NUM_BUON_PAGAM END AS NUMERO_BUONO_PAGAMENTO&#xA; , -1 AS USC_IMP_IDS&#xA; , NULL AS NUMERO_IMPEGNO&#xA; , NULL AS NUMERO_SUBIMPEGNO&#xA; , CASE WHEN LEN(LTRIM(RTRIM(DESCRIZIONE_TESTATA_DOC))) = 0 THEN NULL ELSE DESCRIZIONE_TESTATA_DOC END AS NOTE_PARTITA&#xA; , A.NUMERO_DOC_SPESA AS CHIAVE_SAP&#xA; , CASE WHEN A.FLAG_PART_FITT = 'X' THEN 'S' ELSE 'N' END AS PARTITA_FITTIZIA&#xA; , A.NUM_DOC_RIF AS NUMERO_DOC_RIFERIMENTO&#xA; , A.SOC_DOC_FI AS SOCIETA_DOC_RIFERIMENTO&#xA; , A.ES_DOC_RIF AS ESERCIZIO_DOC_RIFERIMENTO&#xA; , -1 AS USC_COD_GIU&#xA; , NULL AS TIPO_GIUSTIF&#xA; , -1 AS USC_BOR_IDS&#xA; , NULL AS  NUMERO_GIUSTIF&#xA; , NULL AS ANNO_GIUSTIF&#xA; , NULL AS NUMERO_CONTO_CORRENTE&#xA; , NULL AS ANNO_REINTEGRO&#xA; , NULL AS NUMERO_MOVIMENTO_REINTEGRO&#xA; , NULL AS ANNO_ESBORSO&#xA; , NULL AS NUMERO_MOVIMENTO_ESBORSO&#xA; , NULL AS TIPO_PREINTERCALARE&#xA; , NULL AS NUMERO_PREINTERCALARE&#xA; , NULL AS FLAG_SAP&#xA; , NULL AS ANNO_CONTO&#xA; , NULL AS NUMERO_CONTO&#xA; , NULL AS ANNO_RENDICONTO&#xA; , NULL AS NUMERO_RENDICONTO&#xA; , NULL AS FLAG_RITENUTA&#xA; , A.CODICE_CIG&#xA; , A.CODICE_CUP&#xA; , A.ESERCIZIO AS ESERCIZIO_PARTITA&#xA; , A.RIFERIMENTO&#xA; , A.TESTO_TESTATA_ESTESO AS CAUSALE&#xA; , CASE&#xA;  WHEN A.DATA_BASE &lt;&gt; '00000000' THEN CAST(A.DATA_BASE AS DATETIME)&#xA;  ELSE NULL&#xA;   END AS DATA_BASE&#xA; , CAST(A.GIORNI_SCADENZA AS INT) AS GIORNI_SCADENZA&#xA; , DATEADD(&#xA;  day&#xA;  , CAST(GIORNI_SCADENZA AS INT)&#xA;  ,CASE&#xA;   WHEN A.DATA_BASE &lt;&gt; '00000000' THEN CAST(A.DATA_BASE AS DATETIME)&#xA;   ELSE NULL&#xA;   END) AS DATA_SCADENZA --la data di scadenza è data dalla somma della data di base + i giorni di scadenza&#xA;  ,A.IMP_IVA AS IMPORTO_IMPONIBILE_IVA&#xA;  ,A.IMP_SP AS IMPORTO_IVA_SPLIT_PAYMENT&#xA;  ,CASE&#xA;  WHEN A.FLAG_NC = 'X' THEN 'S'&#xA;  ELSE 'N'&#xA;  END AS FLAG_NOTA_CREDITO&#xA; FROM #G_T_VF_DOC_SPESA_TESTATA_001 A&#xA; LEFT JOIN S_BEN_BENEFICIARIO C&#xA; ON A.BENEFICIARIO = C.CHIAVE_SAP&#xA;  LEFT JOIN S_CAU_CAPITOLO_USCITA D&#xA;  ON A.ESERCIZIO = D.ESERCIZIO&#xA;  AND RIGHT(A.CAPITOLO,5) = D.CAPITOLO&#xA;--  AND A.NUM_ART = ISNULL(D.ARTICOLO, 0)&#xA;--   LEFT JOIN S_USC_IMPEGNO E -- il join è fatto con la tabella VF_DOC_SPESA_POSIZIONE&#xA;--   ON A.ESERCIZIO = E.ESERCIZIO&#xA;--   AND A.NUM_IMPEGNO = E.NUMERO_IMPEGNO&#xA;--   AND A.NUM_SUBIMP = ISNULL(E.NUMERO_SUBIMPEGNO, 0)&#xA;    LEFT JOIN S_USC_TIPO_PARTITA F&#xA;    ON A.CODICE_TIPO_PARTITA = F.CODICE_TIPO_PARTITA&#xA;--     LEFT JOIN S_USC_TIPO_RITENUTA_ERARIALE G&#xA;--     ON A.TIPO_RIT_ERARIALI = G.CODICE_TIPO_RITENUTA_ERARIALE&#xA;--      LEFT JOIN S_USC_TIPO_PAGAMENTO H&#xA;--      ON A.TIPO_PAG = H.CODICE_TIPO_PAGAMENTO&#xA;-- L'anagrafica dei tipi pagamento collegata alle partite è un concetto che sembra non esistere in SAP,&#xA;&#xA;&#xA;&#xA;&#xA;-- vista per il collegamento partite - preacquisizioni&#xA;&#xA;SELECT *&#xA;INTO #T_ZV_66_PRE_DOC_001&#xA;FROM T_ZV_66_PRE_DOC&#xA;WHERE SOURSYSTEM = @SISTEMA_SORGENTE_BW&#xA;&#xA;DROP TABLE E_ZV_66_PRE_DOC&#xA;&#xA;SELECT A.*&#xA;INTO E_ZV_66_PRE_DOC&#xA;FROM #T_ZV_66_PRE_DOC_001 A&#xA;INNER JOIN (SELECT CALYEAR, NUM_PRE, RIGA&#xA;   FROM #T_ZV_66_PRE_DOC_001 &#xA;   GROUP BY CALYEAR, NUM_PRE, RIGA&#xA;   HAVING COUNT(*) &gt; 1&#xA;   ) B&#xA;ON A.CALYEAR = B.CALYEAR&#xA;AND A.NUM_PRE = B.NUM_PRE&#xA;AND A.RIGA = B.RIGA&#xA;&#xA;SELECT A.*&#xA;INTO #T_ZV_66_PRE_DOC_002&#xA;FROM #T_ZV_66_PRE_DOC_001 A&#xA; LEFT JOIN E_ZV_66_PRE_DOC B&#xA; ON A.CALYEAR = B.CALYEAR&#xA; AND A.NUM_PRE = B.NUM_PRE&#xA; AND A.RIGA = B.RIGA&#xA;WHERE B.NUM_PRE IS NULL&#xA;&#xA;SELECT SOURSYSTEM&#xA; ,COMP_CODE&#xA; ,CALYEAR&#xA; ,NUM_PRE&#xA; , CASE WHEN NUM_DOC_FM &lt;&gt; '' &#xA;     THEN NUM_DOC_FM &#xA;     ELSE NUM_DOC_MM &#xA;      END as CHIAVE_SAP&#xA; ,ESERCIZIO&#xA;INTO #T_ZV_66_PRE_DOC_003&#xA;FROM #T_ZV_66_PRE_DOC_002&#xA;GROUP BY &#xA;  SOURSYSTEM&#xA; ,COMP_CODE&#xA; ,CALYEAR&#xA; ,NUM_PRE&#xA; , CASE WHEN NUM_DOC_FM &lt;&gt; '' &#xA;     THEN NUM_DOC_FM &#xA;     ELSE NUM_DOC_MM &#xA;      END &#xA; ,ESERCIZIO &#xA;&#xA;select distinct&#xA;IDENTITY(Int, 1, 1) as USC_PAR_IDS, &#xA;A.ANNO_PARTITA,&#xA;A.BEN_BEN_IDS,&#xA;A.CATEGORIA_ECONOMICA,&#xA;A.NUMERO_BENEFICIARIO,&#xA;A.CHIAVE_SAP_BENEFICIARIO,&#xA;A.NUMERO_PARTITA,&#xA;A.PROGRESSIVO_PARTITA,&#xA;A.DATA_PARTITA,&#xA;A.DATA_REGISTRAZIONE,&#xA;A.CODICE_TIPO_PARTITA,&#xA;A.DATA_APERTURA,&#xA;A.CODICE_TIPO_RITENUTA_ERARIALE,&#xA;A.ESERCIZIO,&#xA;A.CAU_CAU_IDS, &#xA;A.CAPITOLO,&#xA;A.ARTICOLO,&#xA;A.DATA_PAGAMENTO,&#xA;A.CODICE_TIPO_PAGAMENTO,&#xA;A.NUMERO_BUONO_PAGAMENTO,&#xA;A.USC_IMP_IDS,&#xA;A.NUMERO_IMPEGNO,&#xA;A.NUMERO_SUBIMPEGNO,&#xA;A.NOTE_PARTITA,&#xA;A.CHIAVE_SAP,&#xA;A.PARTITA_FITTIZIA,&#xA;A.NUMERO_DOC_RIFERIMENTO,&#xA;A.SOCIETA_DOC_RIFERIMENTO,&#xA;A.ESERCIZIO_DOC_RIFERIMENTO&#xA;, A.USC_COD_GIU&#xA;, A.TIPO_GIUSTIF&#xA;, A.USC_BOR_IDS&#xA;, A.NUMERO_GIUSTIF&#xA;, A.ANNO_GIUSTIF&#xA;, A.NUMERO_CONTO_CORRENTE&#xA;, A.ANNO_REINTEGRO&#xA;, A.NUMERO_MOVIMENTO_REINTEGRO&#xA;, A.ANNO_ESBORSO&#xA;, A.NUMERO_MOVIMENTO_ESBORSO&#xA;, A.TIPO_PREINTERCALARE&#xA;, A.NUMERO_PREINTERCALARE&#xA;, A.FLAG_SAP&#xA;, A.ANNO_CONTO&#xA;, A.NUMERO_CONTO&#xA;, A.ANNO_RENDICONTO&#xA;, A.NUMERO_RENDICONTO&#xA;, A.FLAG_RITENUTA&#xA;, A.CODICE_CIG&#xA;, A.CODICE_CUP&#xA;, A.ESERCIZIO_PARTITA&#xA;, A.RIFERIMENTO&#xA;, A.CAUSALE&#xA;, A.DATA_BASE&#xA;, A.GIORNI_SCADENZA&#xA;, A.DATA_SCADENZA&#xA;, CASE WHEN A.FLAG_NOTA_CREDITO = 'S' THEN  (A.IMPORTO_IMPONIBILE_IVA * -1) ELSE A.IMPORTO_IMPONIBILE_IVA END AS IMPORTO_IMPONIBILE_IVA -- inversione di segno per le Note di Credito&#xA;, CASE WHEN A.FLAG_NOTA_CREDITO = 'S' THEN  (A.IMPORTO_IVA_SPLIT_PAYMENT * -1) ELSE A.IMPORTO_IVA_SPLIT_PAYMENT END AS IMPORTO_IVA_SPLIT_PAYMENT -- inversione di segno per le Note di Credito&#xA;, A.FLAG_NOTA_CREDITO&#xA;, ISNULL(C.USC_PRACQ_IDS,-1) AS USC_PRACQ_IDS&#xA;, C.FLAG_PAREGGIO&#xA;into S_USC_PARTITA&#xA;from #T_USC_PARTITA_001 A&#xA;LEFT JOIN #T_ZV_66_PRE_DOC_003 B&#xA;ON A.CHIAVE_SAP = B.CHIAVE_SAP&#xA;AND A.ESERCIZIO = B.ESERCIZIO -- correzione su indicazione di vera per il problema dei pagamenti 2003 su preacquisizioni 2019 2019-11-20&#xA; LEFT JOIN S_USC_PREACQUISIZIONI C&#xA; ON B.NUM_PRE = C.NUMERO_PREACQUISIZIONE&#xA; AND B.CALYEAR = C.ESERCIZIO&#xA;&#xA;set identity_insert S_USC_PARTITA on&#xA;insert into S_USC_PARTITA (USC_PAR_IDS, BEN_BEN_IDS, NUMERO_PARTITA, PROGRESSIVO_PARTITA&#xA;, CODICE_TIPO_PARTITA, CODICE_TIPO_RITENUTA_ERARIALE, CAU_CAU_IDS ,CODICE_TIPO_PAGAMENTO, USC_IMP_IDS, CHIAVE_SAP, PARTITA_FITTIZIA, NUMERO_DOC_RIFERIMENTO&#xA;,SOCIETA_DOC_RIFERIMENTO,ESERCIZIO_DOC_RIFERIMENTO,CHIAVE_SAP_BENEFICIARIO, USC_COD_GIU, USC_BOR_IDS,USC_PRACQ_IDS)&#xA;values(-1, -1, -1, -1, '***', '***', -1,'***', -1, -1, 'N',-1,'***',-1,'-1', -1, -1, -1)&#xA;set identity_insert S_USC_PARTITA off&#xA;&#xA;drop table #T_VF_DOC_SPESA_TESTATA&#xA;--drop table #T_VF_DOC_SPESA_TESTATA_001&#xA;drop table #T_USC_PARTITA_001&#xA;--drop table #G_T_TDOC_SPESA_001&#xA;--DROP TABLE #G_T_VF_DOC_SPESA_TESTATA_001&#xA;&#xA;DROP TABLE #T_ZV_66_PRE_DOC_001&#xA;DROP TABLE #T_ZV_66_PRE_DOC_002&#xA;DROP TABLE #T_ZV_66_PRE_DOC_003&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\S_USC_RIGA_IMPEGNO"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{2e683ca1-efe7-476e-a830-67411e08b7cd}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="S_USC_RIGA_IMPEGNO"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="6">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0556BA1E-49B6-411F-B26B-200B0FE334B7}"
          SQLTask:SqlStatementSource="--S_USC_RIGA_IMPEGNO&#xA;&#xA;-- imposto i parametri fissi per la query, prendendoli da M_PARAMETRI_BW&#xA;DECLARE @ANNO_INIZIO_BW int&#xA;DECLARE @SISTEMA_SORGENTE_BW varchar(50)&#xA;DECLARE @COD_UTENTE_DB2 varchar(50)&#xA;&#xA;SELECT TOP 1&#xA;      @ANNO_INIZIO_BW = ANNO_INIZIO_BW,&#xA;      @SISTEMA_SORGENTE_BW = SISTEMA_SORGENTE,&#xA;      @COD_UTENTE_DB2 = COD_UTENTE_DB2&#xA;FROM M_PARAMETRI_BW&#xA;WHERE CONTESTO = 'GENERALE'&#xA;--------------------------------------------------------&#xA;&#xA;-- prendo i dati da db2&#xA;----------------------&#xA;&#xA;-- controllo sovrapposizione date e primary key&#xA;-- scrittura tabella errore tabella&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_TUI_COMP]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_TUI_COMP]&#xA;&#xA;SELECT a.*&#xA;INTO E_TUI_COMP&#xA;FROM T_TUI_COMP A&#xA;INNER JOIN ( SELECT AA_ES, NUM_IMPEGNO, NUM_SUBIMP&#xA;  FROM T_TUI_COMP&#xA;  WHERE COD_UTENTE = @COD_UTENTE_DB2&#xA;  AND AA_ES &lt; @ANNO_INIZIO_BW&#xA;  GROUP BY AA_ES, NUM_IMPEGNO, NUM_SUBIMP&#xA;  HAVING COUNT(*)&gt;1) B&#xA;ON A.AA_ES = B.AA_ES&#xA;AND A.NUM_IMPEGNO = B.NUM_IMPEGNO&#xA;AND A.NUM_SUBIMP = B.NUM_SUBIMP&#xA;WHERE A.COD_UTENTE = @COD_UTENTE_DB2&#xA;&#xA;-- scrittura tabella Staging&#xA;-- per gli impegni in competenza sono disponibili i dati a partire dal 1986&#xA;SELECT A.*&#xA;INTO #T_TUI_COMP_001&#xA;FROM T_TUI_COMP A&#xA; LEFT JOIN E_TUI_COMP B&#xA; ON A.AA_ES = B.AA_ES&#xA; AND A.NUM_IMPEGNO = B.NUM_IMPEGNO&#xA; AND A.NUM_SUBIMP = B.NUM_SUBIMP&#xA;WHERE B.NUM_IMPEGNO is NULL&#xA;AND A.COD_UTENTE = @COD_UTENTE_DB2&#xA;AND A.AA_ES &lt; @ANNO_INIZIO_BW&#xA;AND A.AA_ES &gt;= 1986&#xA;ORDER BY 1, 2, 3&#xA;&#xA;-- controllo sovrapposizione date e primary key&#xA;-- scrittura tabella errore&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_TUI_RES]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_TUI_RES]&#xA;&#xA;SELECT a.*&#xA;INTO E_TUI_RES&#xA;FROM T_TUI_RES A&#xA;INNER JOIN ( SELECT AA_ES, NUM_IMPEGNO, NUM_SUBIMP, TIPO_RES&#xA;  FROM T_TUI_RES a&#xA;  WHERE COD_UTENTE = @COD_UTENTE_DB2&#xA;  GROUP BY AA_ES, NUM_IMPEGNO, NUM_SUBIMP, TIPO_RES&#xA;  HAVING COUNT(*)&gt;1) B&#xA;ON A.AA_ES = B.AA_ES&#xA;AND A.NUM_IMPEGNO = B.NUM_IMPEGNO&#xA;AND A.NUM_SUBIMP = B.NUM_SUBIMP&#xA;AND A.TIPO_RES = B.TIPO_RES&#xA;WHERE A.COD_UTENTE = @COD_UTENTE_DB2&#xA;&#xA;-- scrittura tabella Staging&#xA;-- per gli impegni a residuo sono disponibili i dati a partire dal 1984&#xA;SELECT A.*&#xA;INTO #T_TUI_RES_001&#xA;FROM T_TUI_RES A&#xA; LEFT JOIN E_TUI_RES B&#xA; ON A.AA_ES = B.AA_ES&#xA; AND A.NUM_IMPEGNO = B.NUM_IMPEGNO&#xA; AND A.NUM_SUBIMP = B.NUM_SUBIMP&#xA; AND A.TIPO_RES = B.TIPO_RES&#xA;WHERE B.NUM_IMPEGNO is NULL&#xA;AND A.COD_UTENTE = @COD_UTENTE_DB2&#xA;AND A.AA_ES &gt;= 1984&#xA;AND A.AA_ES &lt; @ANNO_INIZIO_BW&#xA;ORDER BY 1, 2, 3&#xA;&#xA;-- prendo i dati da bw&#xA;----------------------&#xA;&#xA;SELECT *&#xA;INTO #T_VF_CHIUSURA_IMPEGNI_001&#xA;FROM T_VF_CHIUSURA_IMPEGNI&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;AND ANNO_BILANCIO + 1&gt;= @ANNO_INIZIO_BW  -- MODIFICA 2014-08-01, ERA L'ESERCIZIO&#xA;&#xA;SELECT *&#xA;INTO #T_VF_IMPEGNI_T_001&#xA;FROM T_VF_IMPEGNI_T&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;AND ESERCIZIO &gt;= @ANNO_INIZIO_BW&#xA;&#xA;-- controllo sovrapposizione date e primary key&#xA;-- scrittura tabella errore&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_VF_IMPEGNI_T]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_IMPEGNI_T]&#xA;&#xA;&#xA;SELECT a.*&#xA;INTO E_VF_IMPEGNI_T&#xA;FROM #T_VF_IMPEGNI_T_001 A&#xA; INNER JOIN ( SELECT ESERCIZIO, NUMERO_IMPEGNO, POSIZIONE&#xA;   FROM #T_VF_IMPEGNI_T_001&#xA;   GROUP BY ESERCIZIO, NUMERO_IMPEGNO, POSIZIONE&#xA;   HAVING COUNT(*)&gt;1) B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.POSIZIONE = B.POSIZIONE&#xA;&#xA;-- scrittura tabella Staging&#xA;-- per gli impegni in competenza sono disponibili i dati a partire dal 2002 per agrea&#xA;&#xA;SELECT A.*&#xA;INTO #T_VF_IMPEGNI_T_002&#xA;FROM #T_VF_IMPEGNI_T_001 A&#xA; LEFT JOIN E_VF_IMPEGNI_T B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.POSIZIONE = B.POSIZIONE&#xA;WHERE B.NUMERO_IMPEGNO is NULL&#xA;AND A.FLAG_CANCELLAZIONE &lt;&gt; 'X'&#xA;ORDER BY 1, 2&#xA;&#xA;-- controllo sovrapposizione date e primary key&#xA;-- scrittura tabella errore tabella&#xA;&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_TVAR_UI]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_TVAR_UI]&#xA;&#xA;SELECT a.*&#xA;INTO E_TVAR_UI&#xA;FROM T_TVAR_UI A&#xA; INNER JOIN (SELECT AA_ES, NUM_IMPEGNO, NUM_SUBIMP, PROGR&#xA;  FROM T_TVAR_UI&#xA;  WHERE COD_UTENTE = @COD_UTENTE_DB2&#xA;  AND AA_ES &lt; @ANNO_INIZIO_BW&#xA;  GROUP BY AA_ES, NUM_IMPEGNO, NUM_IMPEGNO, NUM_SUBIMP, PROGR&#xA;  HAVING COUNT(*)&gt;1) B&#xA; ON A.AA_ES = B.AA_ES&#xA; AND A.NUM_IMPEGNO = B.NUM_IMPEGNO&#xA; AND A.NUM_SUBIMP = B.NUM_SUBIMP&#xA; AND A.PROGR = B.PROGR&#xA;AND A.COD_UTENTE = @COD_UTENTE_DB2&#xA;&#xA;-- scrittura tabella Staging&#xA;SELECT A.*&#xA;INTO #T_TVAR_UI_001&#xA;FROM T_TVAR_UI A&#xA; LEFT JOIN E_TVAR_UI B&#xA; ON A.AA_ES = B.AA_ES&#xA; AND A.NUM_IMPEGNO = B.NUM_IMPEGNO&#xA; AND A.NUM_SUBIMP = B.NUM_SUBIMP&#xA; AND A.PROGR = B.PROGR&#xA;WHERE B.NUM_IMPEGNO is NULL&#xA; AND CASE WHEN CAST(A.DESCR AS NVARCHAR(4000)) IN ('CONTO CONSUNTIVO 2010 - OPERAZIONI DI CHIUSURA')&#xA;  THEN 9999&#xA;  ELSE A.AA_VAR&#xA; END  &lt; @ANNO_INIZIO_BW -- ERA A.AA_ES 21/06/2012 DATI&#xA;-- AND CASE WHEN A.PROTOCOLLO LIKE 'CONS.10%' AND A.AA_VAR &gt;= @ANNO_INIZIO_BW&#xA;--  THEN 1&#xA;--  ELSE A.AA_VAR&#xA;-- END &lt; @ANNO_INIZIO_BW&#xA;AND A.COD_UTENTE = @COD_UTENTE_DB2&#xA;ORDER BY 1, 2, 3&#xA;&#xA;----------------------------&#xA;-- prendo i dati da BW delle variazioni per effettuare il calcolo dell'importo attuale impegno per competenza&#xA;&#xA;SELECT A.*&#xA;INTO #T_VF_VARIAZIONI_IMPEGNI_T_001&#xA;FROM T_VF_VARIAZIONI_IMPEGNI_T A&#xA;  LEFT JOIN #T_TVAR_UI_001 C&#xA;  ON C.AA_ES = A.ESERCIZIO_IMPEGNO&#xA;  AND C.NUM_IMPEGNO = CAST(RIGHT(A.NUMERO_IMPEGNO,6) AS INT)&#xA;  AND C.PROGR = CAST(A.PROGR_VAR_CONTABILE_IMP AS INT)&#xA;WHERE A.SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;-- nel caso di ripresa dati delle perenzioni,&#xA;-- va preso l'anno della DATA_DOCUMENTO&#xA;-- altrimenti, l'anno della DATA_ACQUISIZIONE&#xA;AND&#xA; CASE WHEN A.TESTO IN ('RIPRESA DATI - CARICAMENTO PERENZIONI') OR A.TIPO_VARIAZIONE = 5&#xA;  THEN YEAR(CONVERT(DATETIME, DATA_DOCUMENTO))&#xA;  WHEN A.TESTO IN ('CONTO CONSUNTIVO 2010 - OPERAZIONI DI CHIUSURA')&#xA;  THEN 2011&#xA;  ELSE YEAR(CONVERT(DATETIME, DATA_ACQUISIZIONE))&#xA;END &gt;= @ANNO_INIZIO_BW -- ERA ESERCIZIO_IMPEGNO 21/06/2012 DATI&#xA;AND C.NUM_IMPEGNO IS NULL -- ESCLUDIAMO VARIAZIONI DOPPIE&#xA;&#xA;&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_VF_VARIAZIONI_IMPEGNI_T]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_VARIAZIONI_IMPEGNI_T]&#xA;&#xA;SELECT A.*&#xA;INTO E_VF_VARIAZIONI_IMPEGNI_T&#xA;FROM #T_VF_VARIAZIONI_IMPEGNI_T_001 A&#xA; INNER JOIN (SELECT ESERCIZIO_IMPEGNO, NUMERO_IMPEGNO, PROGRESSIVO_VARIAZIONE, POSIZIONE&#xA;  FROM #T_VF_VARIAZIONI_IMPEGNI_T_001&#xA;  GROUP BY ESERCIZIO_IMPEGNO, NUMERO_IMPEGNO, PROGRESSIVO_VARIAZIONE, POSIZIONE&#xA;  HAVING COUNT(*)&gt;1) B&#xA; ON A.ESERCIZIO_IMPEGNO = B.ESERCIZIO_IMPEGNO&#xA; AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.PROGRESSIVO_VARIAZIONE = B.PROGRESSIVO_VARIAZIONE&#xA; AND A.POSIZIONE = B.POSIZIONE&#xA;&#xA;-- scrittura tabella Staging&#xA;SELECT A.*&#xA;INTO #T_VF_VARIAZIONI_IMPEGNI_T&#xA;FROM #T_VF_VARIAZIONI_IMPEGNI_T_001 A&#xA; LEFT JOIN E_VF_VARIAZIONI_IMPEGNI_T B&#xA; ON A.ESERCIZIO_IMPEGNO = B.ESERCIZIO_IMPEGNO&#xA; AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.PROGRESSIVO_VARIAZIONE = B.PROGRESSIVO_VARIAZIONE&#xA;WHERE B.NUMERO_IMPEGNO is NULL&#xA;--AND A.TIPO_VARIAZIONE NOT IN (5) -- modifica del 01/10/2012 --&gt; mai considerare le economie su perenzione&#xA;ORDER BY 1, 2, 3&#xA;&#xA;-- scrittura tabella Staging&#xA;SELECT A.*&#xA;INTO #T_VF_VARIAZIONI_IMPEGNI_T_002&#xA;FROM T_VF_VARIAZIONI_IMPEGNI_T A&#xA; LEFT JOIN E_VF_VARIAZIONI_IMPEGNI_T B&#xA; ON A.ESERCIZIO_IMPEGNO = B.ESERCIZIO_IMPEGNO&#xA; AND A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA; AND A.PROGRESSIVO_VARIAZIONE = B.PROGRESSIVO_VARIAZIONE&#xA;WHERE B.NUMERO_IMPEGNO is NULL&#xA;AND YEAR(CONVERT(DATETIME, A.DATA_DOCUMENTO)) &gt;= @ANNO_INIZIO_BW&#xA;AND A.SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;AND A.TIPO_VARIAZIONE IN (5) -- modifica del 01/10/2012 --&gt; considerare le economie su perenzione&#xA;-- solo per le insussistenze&#xA;ORDER BY 1, 2, 3&#xA;&#xA;-- TABELLA CHE ASSOCIA ALLE RIGHE DI IMPEGNO I CONTI ECONOMICI A CONSUNTIVO&#xA;-- LA TABELLA ORIGINALE CONTIENE ANCHE I FATTI, PER CUI VA FATTA DISTINTA.&#xA;&#xA;SELECT *&#xA;INTO ##GI_T_VF_DEBITI_RESIDUI_PARTECIPATE_001&#xA;FROM T_VF_DEBITI_RESIDUI_PARTECIPATE&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;&#xA;-- PRENDO LE SOLE INFORMAZIONI DA METTERE SULLA RIGA DI IMPEGNO&#xA;&#xA;SELECT DISTINCT NUMERO_IMPEGNO, POSIZIONE_IMPEGNO, COD_CONT_ECON_DARE, COD_CONT_ECON_AVERE, COD_CONT_COGE_DARE, COD_CONT_COGE_AVERE, COD_STATO_PATR_DARE, COD_STATO_PATR_AVERE&#xA;INTO #T_VF_DEBITI_RESIDUI_PARTECIPATE_001&#xA;FROM ##GI_T_VF_DEBITI_RESIDUI_PARTECIPATE_001&#xA;&#xA;-- PER SICUREZZA, ESCLUDO LE EVENTUALI RIGHE DOPPIE&#xA;&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_VF_DEBITI_RESIDUI_PARTECIPATE_TESTATA]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_DEBITI_RESIDUI_PARTECIPATE_TESTATA]&#xA;&#xA;SELECT A.*&#xA;INTO E_VF_DEBITI_RESIDUI_PARTECIPATE_TESTATA&#xA;FROM #T_VF_DEBITI_RESIDUI_PARTECIPATE_001 A&#xA;JOIN (SELECT NUMERO_IMPEGNO, POSIZIONE_IMPEGNO&#xA;   FROM #T_VF_DEBITI_RESIDUI_PARTECIPATE_001&#xA;   GROUP BY NUMERO_IMPEGNO, POSIZIONE_IMPEGNO&#xA;   HAVING COUNT(*) &gt; 1) B&#xA;ON A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;AND A.POSIZIONE_IMPEGNO = B.POSIZIONE_IMPEGNO&#xA;&#xA;SELECT A.*&#xA;INTO #T_VF_DEBITI_RESIDUI_PARTECIPATE_002&#xA;FROM #T_VF_DEBITI_RESIDUI_PARTECIPATE_001 A&#xA;LEFT JOIN E_VF_DEBITI_RESIDUI_PARTECIPATE_TESTATA B&#xA;ON A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;AND A.POSIZIONE_IMPEGNO = B.POSIZIONE_IMPEGNO&#xA;WHERE B.NUMERO_IMPEGNO IS NULL&#xA;&#xA;-- TABELLA CHE ASSOCIA ALLE RIGHE DI IMPEGNO I CONTI ECONOMICI DI GESTIONE&#xA;-- LA TABELLA ORIGINALE CONTIENE ANCHE I FATTI, PER CUI VA FATTA DISTINTA.&#xA;&#xA;SELECT *&#xA;INTO ##GI_T_VF_DEBITI_RESIDUI_PARTEC_GEST_001&#xA;FROM T_VF_DEBITI_RESIDUI_PARTEC_GEST&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;&#xA;-- PRENDO LE SOLE INFORMAZIONI DA METTERE SULLA RIGA DI IMPEGNO&#xA;&#xA;SELECT DISTINCT NUMERO_IMPEGNO, POSIZIONE_IMPEGNO, COD_CONT_ECON_DARE, COD_CONT_ECON_AVERE, COD_CONT_COGE_DARE, COD_CONT_COGE_AVERE, COD_STATO_PATR_DARE, COD_STATO_PATR_AVERE&#xA;INTO #T_VF_DEBITI_RESIDUI_PARTEC_GEST_001&#xA;FROM ##GI_T_VF_DEBITI_RESIDUI_PARTEC_GEST_001&#xA;&#xA;-- PER SICUREZZA, ESCLUDO LE EVENTUALI RIGHE DOPPIE&#xA;&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_VF_DEBITI_RESIDUI_PARTEC_GEST]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_DEBITI_RESIDUI_PARTEC_GEST]&#xA;&#xA;SELECT A.*&#xA;INTO E_VF_DEBITI_RESIDUI_PARTEC_GEST&#xA;FROM #T_VF_DEBITI_RESIDUI_PARTEC_GEST_001 A&#xA;JOIN (SELECT NUMERO_IMPEGNO, POSIZIONE_IMPEGNO&#xA;   FROM #T_VF_DEBITI_RESIDUI_PARTEC_GEST_001&#xA;   GROUP BY NUMERO_IMPEGNO, POSIZIONE_IMPEGNO&#xA;   HAVING COUNT(*) &gt; 1) B&#xA;ON A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;AND A.POSIZIONE_IMPEGNO = B.POSIZIONE_IMPEGNO&#xA;&#xA;SELECT A.*&#xA;INTO #T_VF_DEBITI_RESIDUI_PARTEC_GEST_002&#xA;FROM #T_VF_DEBITI_RESIDUI_PARTEC_GEST_001 A&#xA;LEFT JOIN E_VF_DEBITI_RESIDUI_PARTEC_GEST B&#xA;ON A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;AND A.POSIZIONE_IMPEGNO = B.POSIZIONE_IMPEGNO&#xA;WHERE B.NUMERO_IMPEGNO IS NULL&#xA;&#xA;&#xA;-- CREAZIONE S_USC_RIGA_IMPEGNO&#xA;&#xA;-- MODIFICA DEL 2015-05-13: PER METTERE IL SIOPE SULLA RIGA DI IMPEGNO PER IMPEGNI PRECEDENTI A SAP&#xA;-- DOBBIAMO BASARCI SULLE CHIUSURE DI BW&#xA;&#xA;SELECT DISTINCT ESERCIZIO, NUMERO_IMPEGNO, CODICE_SIOPE&#xA;INTO #T_VF_CHIUSURA_IMPEGNI_002&#xA;FROM #T_VF_CHIUSURA_IMPEGNI_001&#xA;&#xA;SELECT&#xA; A.ESERCIZIO&#xA; , A.NUMERO_IMPEGNO, A.NUMERO_SUBIMPEGNO&#xA; , A.USC_IMP_IDS&#xA; , 1 AS POSIZIONE&#xA; , D.CODICE_SIOPE AS CODICE_SIOPE&#xA; , NULL AS CODICE_CUP&#xA; , NULL AS CODICE_CIG&#xA; , NULL AS TESTO&#xA; , -1 AS BEN_BEN_IDS&#xA; , ISNULL(C.USC_IMP_REI_IDS, -1) AS USC_IMP_REI_IDS&#xA; , C.ESERCIZIO_IMPEGNO_REISCRITTO&#xA; , C.NUMERO_IMPEGNO_REISCRITTO&#xA; , C.NUMERO_SUBIMPEGNO_REISCRITTO AS NUMERO_SUBIMPEGNO_REISCRITTO&#xA; , 1 AS POSIZIONE_IMPEGNO_REISCRITTO&#xA; , A.CAPITOLO&#xA; -- classificazioni 118 non presenti da DB2&#xA; , -1 AS CAU_PCFNL1_118_IDS&#xA; , NULL AS PIANO_CONTI1&#xA; , -1 AS CAU_PCFNL2_118_IDS&#xA; , NULL AS PIANO_CONTI2&#xA; , -1 AS CAU_PCFNL3_118_IDS&#xA; , NULL AS PIANO_CONTI3&#xA; , -1 AS CAU_PCFNL4_118_IDS&#xA; , NULL AS PIANO_CONTI4&#xA; , -1 AS CAU_PCFNL5_118_IDS&#xA; , NULL AS PIANO_CONTI5&#xA; , -1 AS CAU_COFOG1_IDS&#xA; , NULL AS COFOG_LIV1&#xA; , -1 AS CAU_COFOG2_IDS&#xA; , NULL AS COFOG_LIV2&#xA; , -1 AS CAU_SPESE_RIC_IDS&#xA; , NULL AS CODICE_USCITA_RICORRENTE&#xA; , NULL AS POSIZIONE_IMPEGNO_PERENTE&#xA; , NULL AS USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA;  , NULL AS CODICE_ACQUISTI_VERDE&#xA;INTO #G_S_USC_RIGA_IMPEGNO_001&#xA;FROM S_USC_IMPEGNO A&#xA;  LEFT JOIN #G_T_TREISCRIZIONE_001 B&#xA;  ON A.ESERCIZIO = B.AA_ES&#xA;  AND A.NUMERO_IMPEGNO = B.NUM_IMPEGNO&#xA;   LEFT JOIN S_USC_IMPEGNO_REISCRITTO C&#xA;   ON B.AA_ES_REISCR = C.ESERCIZIO_IMPEGNO_REISCRITTO&#xA;   AND B.NUM_IMP_REISCR = C.NUMERO_IMPEGNO_REISCRITTO&#xA;   AND B.NUM_SUB_REISCR = ISNULL(C.NUMERO_SUBIMPEGNO_REISCRITTO, 0)&#xA;   AND C.POSIZIONE_IMPEGNO_REISCRITTO = 1&#xA;    LEFT JOIN #T_VF_CHIUSURA_IMPEGNI_002 D&#xA;    ON A.ESERCIZIO = D.ESERCIZIO&#xA;    AND A.NUMERO_IMPEGNO = CAST(RIGHT(D.NUMERO_IMPEGNO,6) AS INT)&#xA;&#xA;WHERE A.ESERCIZIO &lt; @ANNO_INIZIO_BW&#xA;UNION&#xA;SELECT DISTINCT A.ESERCIZIO AS ESERCIZIO&#xA; , RIGHT(A.NUMERO_IMPEGNO,6) AS NUMERO_IMPEGNO&#xA; , B.NUMERO_SUBIMPEGNO AS  NUMERO_SUBIMPEGNO&#xA; , ISNULL(B.USC_IMP_IDS, -1) AS USC_IMP_IDS&#xA; , A.POSIZIONE&#xA; , A.COD_SIOPE AS CODICE_SIOPE&#xA; , A.COD_CUP AS CODICE_CUP&#xA; , G.COD_CIG AS CODICE_CIG&#xA; , A.TESTO_POSIZIONE AS TESTO&#xA; , ISNULL(H.BEN_BEN_IDS, -1) AS BEN_BEN_IDS&#xA; , ISNULL(I.USC_IMP_REI_IDS, -1) AS USC_IMP_REI_IDS&#xA; , I.ESERCIZIO_IMPEGNO_REISCRITTO&#xA; , I.NUMERO_IMPEGNO_REISCRITTO&#xA; , I.NUMERO_SUBIMPEGNO_REISCRITTO AS NUMERO_SUBIMPEGNO_REISCRITTO&#xA; , I.POSIZIONE_IMPEGNO_REISCRITTO&#xA; , B.CAPITOLO&#xA; --classificazioni 118&#xA; , ISNULL(P.CAU_PCFNL1_118_IDS,-1) AS CAU_PCFNL1_118_IDS&#xA; , CASE&#xA;  WHEN A.PIANO_CONTI1 &lt;&gt; '' THEN A.PIANO_CONTI1&#xA;  ELSE NULL&#xA;   END AS PIANO_CONTI1&#xA; , ISNULL(Q.CAU_PCFNL2_118_IDS,-1) AS CAU_PCFNL2_118_IDS&#xA; , CASE&#xA;  WHEN A.PIANO_CONTI2 &lt;&gt; '' THEN A.PIANO_CONTI2&#xA;  ELSE NULL&#xA;   END AS PIANO_CONTI2&#xA; , ISNULL(R.CAU_PCFNL3_118_IDS,-1) AS CAU_PCFNL3_118_IDS&#xA; , CASE&#xA;  WHEN A.PIANO_CONTI3 &lt;&gt; '' THEN A.PIANO_CONTI3&#xA;  ELSE NULL&#xA;   END AS PIANO_CONTI3&#xA; , ISNULL(S.CAU_PCFNL4_118_IDS,-1) AS CAU_PCFNL4_118_IDS&#xA; , CASE&#xA;  WHEN A.PIANO_CONTI4 &lt;&gt; '' THEN A.PIANO_CONTI4&#xA;  ELSE NULL&#xA;   END AS PIANO_CONTI4&#xA; , ISNULL(T.CAU_PCFNL5_118_IDS,-1) AS CAU_PCFNL5_118_IDS&#xA; , CASE&#xA;  WHEN A.PIANO_CONTI5 &lt;&gt; '' THEN A.PIANO_CONTI5&#xA;  ELSE NULL&#xA;   END AS PIANO_CONTI5&#xA; , ISNULL(W.CAU_COFOG1_IDS,-1) AS CAU_COFOG1_IDS&#xA; , CAST(A.COFOG1 AS INT) AS COFOG_LIV1&#xA; , ISNULL(Z.CAU_COFOG2_IDS,-1) AS CAU_COFOG2_IDS&#xA; , CAST(A.COFOG2 AS INT) AS COFOG_LIV2&#xA; , ISNULL(U.CAU_SPESE_RIC_IDS,-1) AS CAU_SPESE_RIC_IDS&#xA; , A.SPES_RIC AS CODICE_USCITA_RICORRENTE&#xA; , A.RIGA_IMP_PERENTE AS POSIZIONE_IMPEGNO_PERENTE&#xA; , ISNULL(AA.USC_CATEGORIA_ACQUISTI_VERDI_IDS,-1) AS USC_CATEGORIA_ACQUISTI_VERDI_IDS&#xA;  , CASE&#xA;    WHEN A.COD_AV='' THEN 'MANCANTE'&#xA;    ELSE A.COD_AV END  AS CODICE_ACQUISTI_VERDE&#xA;FROM #T_VF_IMPEGNI_T_002 A&#xA; LEFT JOIN S_USC_IMPEGNO B&#xA; ON A.ESERCIZIO = B.ESERCIZIO&#xA; AND RIGHT(A.NUMERO_IMPEGNO,6) = B.NUMERO_IMPEGNO&#xA;  JOIN T_VF_IMPEGNI G -- SAREBBE DA ELIMINARE UN GIORNO!&#xA;  ON A.NUMERO_IMPEGNO = G.NUMERO_IMPEGNO&#xA;  AND A.POSIZIONE = G.POSIZIONE&#xA;  AND G.SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;   LEFT JOIN S_BEN_BENEFICIARIO H&#xA;   ON A.FORNITORE = H.CHIAVE_SAP&#xA;    LEFT JOIN M_SUBIMPEGNO_SAP XX&#xA;    ON A.NUMERO_IMPEGNO_PERENTE = XX.CHIAVE_SAP&#xA;     LEFT JOIN S_USC_IMPEGNO_REISCRITTO I&#xA;     ON A.ESERCIZIO_IMP_PER  = I.ESERCIZIO_IMPEGNO_REISCRITTO&#xA;     AND&#xA;      CASE WHEN XX.CHIAVE_SAP IS NULL&#xA;       THEN RIGHT(A.NUMERO_IMPEGNO_PERENTE,6)&#xA;       ELSE XX.NUMERO_IMPEGNO&#xA;      END = I.NUMERO_IMPEGNO_REISCRITTO&#xA;     AND ISNULL(XX.NUMERO_SUBIMPEGNO,0) = ISNULL(I.NUMERO_SUBIMPEGNO_REISCRITTO,0)&#xA;     AND A.RIGA_IMP_PERENTE = I.POSIZIONE_IMPEGNO_REISCRITTO&#xA;     ------ classificazioni 118&#xA;     LEFT JOIN S_CAU_PDC_LIVELLO1_LEGGE_118 P&#xA;     ON A.PIANO_CONTI1 = P.LIVELLO_1&#xA;     AND CASE&#xA;       WHEN A.ESERCIZIO &lt; '2013' THEN '2013-01-01'&#xA;       ELSE CAST(A.ESERCIZIO AS CHAR(4)) + '-01-01'&#xA;      END BETWEEN P.DATA_INIZIO_VALIDITA AND P.DATA_FINE_VALIDITA&#xA;      LEFT JOIN S_CAU_PDC_LIVELLO2_LEGGE_118 Q&#xA;      ON A.PIANO_CONTI1 = Q.LIVELLO_1&#xA;      AND A.PIANO_CONTI2 = Q.LIVELLO_2&#xA;      AND CASE&#xA;        WHEN A.ESERCIZIO &lt; '2013' THEN '2013-01-01'&#xA;        ELSE CAST(A.ESERCIZIO AS CHAR(4)) + '-01-01'&#xA;       END BETWEEN Q.DATA_INIZIO_VALIDITA AND Q.DATA_FINE_VALIDITA&#xA;       LEFT JOIN S_CAU_PDC_LIVELLO3_LEGGE_118 R&#xA;       ON A.PIANO_CONTI1 = R.LIVELLO_1&#xA;       AND A.PIANO_CONTI2 = R.LIVELLO_2&#xA;       AND A.PIANO_CONTI3 = R.LIVELLO_3&#xA;       AND CASE&#xA;         WHEN A.ESERCIZIO &lt; '2013' THEN '2013-01-01'&#xA;         ELSE CAST(A.ESERCIZIO AS CHAR(4)) + '-01-01'&#xA;        END BETWEEN R.DATA_INIZIO_VALIDITA AND R.DATA_FINE_VALIDITA&#xA;        LEFT JOIN S_CAU_PDC_LIVELLO4_LEGGE_118 S&#xA;        ON A.PIANO_CONTI1 = S.LIVELLO_1&#xA;        AND A.PIANO_CONTI2 = S.LIVELLO_2&#xA;        AND A.PIANO_CONTI3 = S.LIVELLO_3&#xA;        AND A.PIANO_CONTI4 = S.LIVELLO_4&#xA;        AND CASE&#xA;          WHEN A.ESERCIZIO &lt; '2013' THEN '2013-01-01'&#xA;          ELSE CAST(A.ESERCIZIO AS CHAR(4)) + '-01-01'&#xA;         END BETWEEN S.DATA_INIZIO_VALIDITA AND S.DATA_FINE_VALIDITA&#xA;         LEFT JOIN S_CAU_PDC_LIVELLO5_LEGGE_118 T&#xA;         ON A.PIANO_CONTI1 = T.LIVELLO_1&#xA;         AND A.PIANO_CONTI2 = T.LIVELLO_2&#xA;         AND A.PIANO_CONTI3 = T.LIVELLO_3&#xA;         AND A.PIANO_CONTI4 = T.LIVELLO_4&#xA;         AND A.PIANO_CONTI5 = T.LIVELLO_5&#xA;         AND CASE&#xA;           WHEN A.ESERCIZIO &lt; '2013' THEN '2013-01-01'&#xA;          ELSE CAST(A.ESERCIZIO AS CHAR(4)) + '-01-01'&#xA;          END BETWEEN T.DATA_INIZIO_VALIDITA AND T.DATA_FINE_VALIDITA&#xA;          LEFT JOIN S_CAU_USCITE_RICORRENTI_LEGGE_118 U&#xA;          ON U.CODICE_USCITA_RICORRENTE = A.SPES_RIC&#xA;          LEFT JOIN S_CAU_COFOG_LIV1_LEGGE_118 W&#xA;           ON A.COFOG1 = W.COFOG_LIV1&#xA;           AND CASE&#xA;             WHEN A.ESERCIZIO &lt; '2013' THEN '2013'&#xA;             ELSE A.ESERCIZIO&#xA;            END BETWEEN W.ANNO_INIZIO_VALIDITA AND W.ANNO_FINE_VALIDITA&#xA;            LEFT JOIN S_CAU_COFOG_LIV2_LEGGE_118 Z&#xA;            ON A.COFOG1 = Z.COFOG_LIV1&#xA;            AND A.COFOG2 = Z.COFOG_LIV2&#xA;            AND CASE&#xA;             WHEN A.ESERCIZIO &lt; '2013' THEN '2013'&#xA;             ELSE A.ESERCIZIO&#xA;            END BETWEEN Z.ANNO_INIZIO_VALIDITA AND Z.ANNO_FINE_VALIDITA&#xA;            LEFT JOIN S_USC_CATEGORIA_ACQUISTI_VERDI AA&#xA;            ON  CASE&#xA;            WHEN A.COD_AV = '' THEN 'MANCANTE'&#xA;            ELSE A.COD_AV END = AA.CODICE_ACQUISTI_VERDE&#xA;&#xA;&#xA;&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[S_USC_RIGA_IMPEGNO]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [S_USC_RIGA_IMPEGNO]&#xA;&#xA;-- TABELLA CHE ASSOCIA AD OGNI IMPEGNO LA SUA COMMESSA&#xA;&#xA;SELECT *&#xA;INTO #T_ZV_ZIMPCOM_001&#xA;FROM T_ZV_ZIMPCOM A&#xA;WHERE SOURSYSTEM = 'PR'&#xA;&#xA;-- VERIFICO CHE NON CI SIANO CASI CON IMPEGNI A CUI E' STATO ASSOCIATO PIU' DI UN ORDINE&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_ZV_ZIMPCOM]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_ZV_ZIMPCOM]&#xA;&#xA;SELECT A.*&#xA;INTO E_ZV_ZIMPCOM&#xA;FROM #T_ZV_ZIMPCOM_001 A&#xA;JOIN (SELECT NUMERO_IMPEGNO, [/BIC/ZBLPOS]&#xA;   FROM #T_ZV_ZIMPCOM_001&#xA;   GROUP BY NUMERO_IMPEGNO , [/BIC/ZBLPOS]&#xA;   HAVING COUNT(*) &gt; 1) B&#xA;ON A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;AND A.[/BIC/ZBLPOS] = B.[/BIC/ZBLPOS]&#xA;&#xA;SELECT A.*&#xA;INTO #T_ZV_ZIMPCOM_002&#xA;FROM #T_ZV_ZIMPCOM_001 A&#xA;LEFT JOIN E_ZV_ZIMPCOM B&#xA;ON A.NUMERO_IMPEGNO = B.NUMERO_IMPEGNO&#xA;AND A.[/BIC/ZBLPOS] = B.[/BIC/ZBLPOS]&#xA;WHERE B.NUMERO_IMPEGNO IS NULL&#xA;&#xA;SELECT&#xA; IDENTITY(INT,1,1) AS USC_RIG_IMP_IDS&#xA; , A.*&#xA; , ISNULL(F.CAU_SIO_IDS, -1) AS CAU_SIO_IDS&#xA; , ISNULL(C.BDG_INI_SPESA_IDS, -1) AS BDG_INI_SPESA_IDS&#xA; , ISNULL(E.CGE_CONTO_IDS,-1) AS CGE_CONTO_AVERE_IDS&#xA; , ISNULL(G.CGE_CONTO_IDS,-1) AS CGE_CONTO_DARE_IDS&#xA; , ISNULL(H.USC_COGE_IDS,-1) AS USC_COGE_AVERE_IDS&#xA; , ISNULL(I.USC_COGE_IDS, -1) AS USC_COGE_DARE_IDS&#xA; , ISNULL(O.CGE_CONTO_IDS,-1) AS CGE_STATO_PATRIMONIALE_AVERE_IDS&#xA; , ISNULL(P.CGE_CONTO_IDS,-1) AS CGE_STATO_PATRIMONIALE_DARE_IDS&#xA;  --A LIVELLO GESTIONALE&#xA; , ISNULL(K.CGE_CONTO_IDS,-1) AS CGE_CONTO_AVERE_GEST_IDS&#xA; , ISNULL(L.CGE_CONTO_IDS,-1) AS CGE_CONTO_DARE_GEST_IDS&#xA; , ISNULL(M.USC_COGE_IDS,-1) AS USC_COGE_AVERE_GEST_IDS&#xA; , ISNULL(N.USC_COGE_IDS, -1) AS USC_COGE_DARE_GEST_IDS&#xA; , ISNULL(Q.CGE_CONTO_IDS, -1) AS CGE_STATO_PATRIMONIALE_AVERE_GEST_IDS&#xA; , ISNULL(R.CGE_CONTO_IDS, -1) AS CGE_STATO_PATRIMONIALE_DARE_GEST_IDS&#xA;INTO S_USC_RIGA_IMPEGNO&#xA;FROM #G_S_USC_RIGA_IMPEGNO_001 A&#xA;LEFT JOIN S_CAU_SIOPE F&#xA;ON CASE WHEN A.CODICE_SIOPE = '0000'&#xA;  THEN -1&#xA;  ELSE A.CODICE_SIOPE&#xA; END = F.CODICE_GESTIONALE&#xA;AND F.VALIDO_A = 9999&#xA; LEFT JOIN #T_ZV_ZIMPCOM_002 B&#xA; ON A.ESERCIZIO = CAST(LEFT(B.NUMERO_IMPEGNO,4) AS INT) - 1000&#xA; AND A.NUMERO_IMPEGNO = RIGHT(B.NUMERO_IMPEGNO,6)&#xA; AND A.POSIZIONE = B.[/BIC/ZBLPOS]&#xA; AND LEFT(B.NUMERO_IMPEGNO,2) = '30'&#xA;  LEFT JOIN S_BDG_INIZIATIVA_DI_SPESA C&#xA;  ON B.NUMERO_ORDINE = C.INIZIATIVA_DI_SPESA&#xA;   LEFT JOIN #T_VF_DEBITI_RESIDUI_PARTECIPATE_002 D&#xA;   ON A.ESERCIZIO = CAST(LEFT(D.NUMERO_IMPEGNO,4) AS INT) - 1000&#xA;   AND A.NUMERO_IMPEGNO = RIGHT(D.NUMERO_IMPEGNO,6)&#xA;   AND A.POSIZIONE = D.POSIZIONE_IMPEGNO&#xA;    LEFT JOIN S_CGE_ANAGRAFICA_CONTO E&#xA;    ON D.COD_CONT_ECON_AVERE = E.CODICE_CONTO&#xA;    AND CAST(A.ESERCIZIO  AS CHAR(4)) + '-01-01' BETWEEN E.DATA_INIZIO_VALIDITA AND E.DATA_FINE_VALIDITA&#xA;     LEFT JOIN S_CGE_ANAGRAFICA_CONTO G&#xA;     ON D.COD_CONT_ECON_DARE = G.CODICE_CONTO&#xA;     AND CAST(A.ESERCIZIO  AS CHAR(4)) + '-01-01' BETWEEN G.DATA_INIZIO_VALIDITA AND G.DATA_FINE_VALIDITA&#xA;      LEFT JOIN S_USC_CONTO_COGE H&#xA;      ON D.COD_CONT_COGE_AVERE = H.CONTO_COGE&#xA;       LEFT JOIN S_USC_CONTO_COGE I&#xA;       ON D.COD_CONT_COGE_DARE = I.CONTO_COGE&#xA;        -- AGGIUNTA DEI CODICI CONTO AVERE  E DARE E COGE A LIVELLO GESTIONALE&#xA;        LEFT JOIN #T_VF_DEBITI_RESIDUI_PARTEC_GEST_002 J&#xA;        ON A.ESERCIZIO = CAST(LEFT(J.NUMERO_IMPEGNO,4) AS INT) - 1000&#xA;        AND A.NUMERO_IMPEGNO = RIGHT(J.NUMERO_IMPEGNO,6)&#xA;        AND A.POSIZIONE = J.POSIZIONE_IMPEGNO&#xA;         LEFT JOIN S_CGE_ANAGRAFICA_CONTO K&#xA;         ON J.COD_CONT_ECON_AVERE = K.CODICE_CONTO&#xA;         AND CAST(A.ESERCIZIO  AS CHAR(4)) + '-01-01' BETWEEN K.DATA_INIZIO_VALIDITA AND K.DATA_FINE_VALIDITA&#xA;          LEFT JOIN S_CGE_ANAGRAFICA_CONTO L&#xA;          ON J.COD_CONT_ECON_DARE = L.CODICE_CONTO&#xA;          AND CAST(A.ESERCIZIO  AS CHAR(4)) + '-01-01' BETWEEN L.DATA_INIZIO_VALIDITA AND L.DATA_FINE_VALIDITA&#xA;           LEFT JOIN S_USC_CONTO_COGE M&#xA;           ON J.COD_CONT_COGE_AVERE = M.CONTO_COGE&#xA;            LEFT JOIN S_USC_CONTO_COGE N&#xA;            ON J.COD_CONT_COGE_DARE = N.CONTO_COGE&#xA;            -- CODICI STATO PATRIMONIALE (CONSUNTIVO)&#xA;             LEFT JOIN S_CGE_ANAGRAFICA_CONTO O&#xA;             ON D.COD_STATO_PATR_AVERE = O.CODICE_CONTO&#xA;             AND CAST(A.ESERCIZIO  AS CHAR(4)) + '-01-01' BETWEEN O.DATA_INIZIO_VALIDITA AND O.DATA_FINE_VALIDITA&#xA;              LEFT JOIN S_CGE_ANAGRAFICA_CONTO P&#xA;              ON D.COD_STATO_PATR_DARE = P.CODICE_CONTO&#xA;              AND CAST(A.ESERCIZIO  AS CHAR(4)) + '-01-01' BETWEEN P.DATA_INIZIO_VALIDITA AND P.DATA_FINE_VALIDITA&#xA;                  --CODICI STATO PATRIMONIALE (GESTIONALE)&#xA;               LEFT JOIN S_CGE_ANAGRAFICA_CONTO Q&#xA;               ON J.COD_STATO_PATR_AVERE = Q.CODICE_CONTO&#xA;                     AND CAST(A.ESERCIZIO  AS CHAR(4)) + '-01-01' BETWEEN Q.DATA_INIZIO_VALIDITA AND Q.DATA_FINE_VALIDITA&#xA;                LEFT JOIN S_CGE_ANAGRAFICA_CONTO R&#xA;                      ON J.COD_STATO_PATR_DARE = R.CODICE_CONTO&#xA;                      AND CAST(A.ESERCIZIO  AS CHAR(4)) + '-01-01' BETWEEN R.DATA_INIZIO_VALIDITA AND R.DATA_FINE_VALIDITA&#xA;&#xA;SET IDENTITY_INSERT S_USC_RIGA_IMPEGNO ON&#xA;INSERT INTO S_USC_RIGA_IMPEGNO(USC_RIG_IMP_IDS,&#xA;USC_IMP_IDS, ESERCIZIO, CAU_SIO_IDS, BEN_BEN_IDS&#xA;, USC_IMP_REI_IDS&#xA;,CAU_PCFNL1_118_IDS, CAU_PCFNL2_118_IDS, CAU_PCFNL3_118_IDS, CAU_PCFNL4_118_IDS, CAU_PCFNL5_118_IDS&#xA;,CAU_COFOG1_IDS,CAU_COFOG2_IDS,CAU_SPESE_RIC_IDS, BDG_INI_SPESA_IDS,&#xA;USC_CATEGORIA_ACQUISTI_VERDI_IDS,CGE_CONTO_AVERE_IDS,CGE_CONTO_DARE_IDS, USC_COGE_AVERE_IDS, USC_COGE_DARE_IDS,&#xA;CGE_CONTO_AVERE_GEST_IDS,CGE_CONTO_DARE_GEST_IDS, USC_COGE_AVERE_GEST_IDS, USC_COGE_DARE_GEST_IDS,CGE_STATO_PATRIMONIALE_AVERE_IDS,CGE_STATO_PATRIMONIALE_DARE_IDS,  &#xA;CGE_STATO_PATRIMONIALE_AVERE_GEST_IDS, CGE_STATO_PATRIMONIALE_DARE_GEST_IDS)&#xA;VALUES (-1,-1,-1, -1,-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1, -1 ,-1, -1 ,-1, -1 ,-1, -1 ,-1, -1 ,-1, -1, -1)&#xA;SET IDENTITY_INSERT S_USC_RIGA_IMPEGNO OFF&#xA;&#xA;DROP TABLE #T_VF_DEBITI_RESIDUI_PARTECIPATE_002&#xA;DROP TABLE #T_VF_DEBITI_RESIDUI_PARTECIPATE_001&#xA;DROP TABLE #T_VF_DEBITI_RESIDUI_PARTEC_GEST_002&#xA;DROP TABLE #T_VF_DEBITI_RESIDUI_PARTEC_GEST_001&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\S_USC_RIGA_ORDINE"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{ef761832-5860-4cdb-aec0-385aa5cb4bd6}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="S_USC_RIGA_ORDINE"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="5">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0556BA1E-49B6-411F-B26B-200B0FE334B7}"
          SQLTask:SqlStatementSource="DECLARE @ANNO_INIZIO_BW int&#xA;DECLARE @SISTEMA_SORGENTE_BW varchar(50)&#xA;DECLARE @COD_UTENTE_DB2 varchar(50)&#xA;&#xA;SELECT TOP 1&#xA;      @ANNO_INIZIO_BW = ANNO_INIZIO_BW,&#xA;      @SISTEMA_SORGENTE_BW = SISTEMA_SORGENTE,&#xA;      @COD_UTENTE_DB2 = COD_UTENTE_DB2&#xA;FROM M_PARAMETRI_BW&#xA;WHERE CONTESTO = 'ORDINI'&#xA;--------------------------------------------------------&#xA;SELECT *  &#xA;INTO #T_TTABDECODIFICA&#xA;FROM T_TTABDECODIFICA&#xA;WHERE TIPO_COD = 'ESE'&#xA;&#xA;-- controllo sovrapposizione date e primary key&#xA;-- scrittura tabella errore tabella&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[E_TRIGA_ORDINE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_TRIGA_ORDINE]&#xA;&#xA;SELECT a.*&#xA;INTO E_TRIGA_ORDINE&#xA;FROM T_TRIGA_ORDINE A&#xA;INNER JOIN ( SELECT COD_ASSESSORATO, AA_ORDINE, NUM_ORDINE, NUM_RIGA&#xA;  FROM T_TRIGA_ORDINE&#xA;  WHERE COD_UTENTE = @COD_UTENTE_DB2&#xA;  AND AA_ORDINE &lt; @ANNO_INIZIO_BW&#xA;  GROUP BY COD_ASSESSORATO, AA_ORDINE, NUM_ORDINE, NUM_RIGA&#xA;  HAVING COUNT(*)&gt;1) B&#xA; ON A.COD_ASSESSORATO = B.COD_ASSESSORATO&#xA; AND A.AA_ORDINE = B.AA_ORDINE&#xA; AND A.NUM_ORDINE = B.NUM_ORDINE&#xA; AND A.NUM_RIGA = B.NUM_RIGA&#xA;WHERE A.COD_UTENTE = @COD_UTENTE_DB2&#xA;&#xA;-- scrittura tabella Staging&#xA;-- per gli impegni in competenza sono disponibili i dati a partire dal 1986&#xA;SELECT A.*&#xA;INTO #T_TRIGA_ORDINE_001&#xA;FROM T_TRIGA_ORDINE A&#xA; LEFT JOIN E_TRIGA_ORDINE B&#xA; ON A.COD_ASSESSORATO = B.COD_ASSESSORATO&#xA; AND A.AA_ORDINE = B.AA_ORDINE&#xA; AND A.NUM_ORDINE = B.NUM_ORDINE&#xA; AND A.NUM_RIGA = B.NUM_RIGA&#xA;WHERE B.NUM_ORDINE is NULL&#xA;AND A.COD_UTENTE = @COD_UTENTE_DB2&#xA;AND A.AA_ORDINE &lt; @ANNO_INIZIO_BW&#xA;ORDER BY A.COD_ASSESSORATO, A.AA_ORDINE, A.NUM_ORDINE, A.NUM_RIGA&#xA;&#xA;&#xA;-- Prendo i dati da BW&#xA;----------------------&#xA;&#xA;SELECT cast(cast(CODICE_ESENZIONE_BOLLO as int) as varchar) as CODICE_ESENZIONE_BOLLO,&#xA; FLAG_CARICO_BOLLO,&#xA; DESCRIZIONE&#xA;INTO #T_VF_T_COD_ESENZIONE_BOLLO&#xA;FROM T_VF_T_COD_ESENZIONE_BOLLO&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;&#xA;select CODICE_ESENZIONE_BOLLO,&#xA;    DESCRIZIONE  &#xA;into #T_VF_T_COD_ESENZIONE_BOLLO_001&#xA;FROM #T_VF_T_COD_ESENZIONE_BOLLO&#xA;UNION ALL &#xA;SELECT A.COD AS CODICE_ESENZIONE_BOLLO,&#xA;    A.DESCR AS DESCRIZIONE&#xA;FROM #T_TTABDECODIFICA A&#xA;LEFT JOIN #T_VF_T_COD_ESENZIONE_BOLLO B&#xA;on A.COD = B.CODICE_ESENZIONE_BOLLO &#xA;WHERE B.CODICE_ESENZIONE_BOLLO is null&#xA;&#xA;SELECT *&#xA;INTO #T_VF_ORDINI_MANDATI_POSIZIONE_T&#xA;FROM T_VF_ORDINI_MANDATI_POSIZIONE_T&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;AND ANNO_ORDINE_PAGAMENTO &gt;= @ANNO_INIZIO_BW&#xA;&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'E_VF_ORDINI_MANDATI_POSIZIONE_T') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [E_VF_ORDINI_MANDATI_POSIZIONE_T]&#xA;&#xA;SELECT a.*&#xA;INTO E_VF_ORDINI_MANDATI_POSIZIONE_T&#xA;FROM #T_VF_ORDINI_MANDATI_POSIZIONE_T A&#xA;INNER JOIN ( SELECT NUMERO_ORDINE_PAGAMENTO, ANNO_ORDINE_PAGAMENTO, POSIZIONE_ORDINE_PAGAMENTO, POSIZIONE_RIGA&#xA;  FROM #T_VF_ORDINI_MANDATI_POSIZIONE_T&#xA;  GROUP BY NUMERO_ORDINE_PAGAMENTO, ANNO_ORDINE_PAGAMENTO, POSIZIONE_ORDINE_PAGAMENTO, POSIZIONE_RIGA&#xA;  HAVING COUNT(*)&gt;1) B&#xA; ON A.NUMERO_ORDINE_PAGAMENTO = B.NUMERO_ORDINE_PAGAMENTO&#xA; AND A.ANNO_ORDINE_PAGAMENTO = B.ANNO_ORDINE_PAGAMENTO&#xA; AND A.POSIZIONE_ORDINE_PAGAMENTO = B.POSIZIONE_ORDINE_PAGAMENTO&#xA; AND A.POSIZIONE_RIGA = B.POSIZIONE_RIGA&#xA;&#xA;-- scrittura tabella Staging&#xA;-- per gli impegni in competenza sono disponibili i dati a partire dal 1986&#xA;SELECT A.*&#xA;INTO #G_T_VF_ORDINI_MANDATI_POSIZIONE_T_001&#xA;FROM #T_VF_ORDINI_MANDATI_POSIZIONE_T A&#xA; LEFT JOIN E_VF_ORDINI_MANDATI_POSIZIONE_T B&#xA; ON A.NUMERO_ORDINE_PAGAMENTO = B.NUMERO_ORDINE_PAGAMENTO&#xA; AND A.ANNO_ORDINE_PAGAMENTO = B.ANNO_ORDINE_PAGAMENTO&#xA; AND A.POSIZIONE_ORDINE_PAGAMENTO = B.POSIZIONE_ORDINE_PAGAMENTO&#xA; AND A.POSIZIONE_RIGA = B.POSIZIONE_RIGA&#xA;WHERE B.NUMERO_ORDINE_PAGAMENTO is NULL&#xA;ORDER BY A.ANNO_ORDINE_PAGAMENTO, A.NUMERO_ORDINE_PAGAMENTO, A.POSIZIONE_ORDINE_PAGAMENTO, A.POSIZIONE_RIGA&#xA;&#xA;--&#xA;SELECT * &#xA;INTO #T_VF_T_TIPO_QUIETANZA&#xA;FROM T_VF_T_TIPO_QUIETANZA&#xA;WHERE SISTEMA_SORGENTE = @SISTEMA_SORGENTE_BW&#xA;-----------------&#xA;&#xA;SELECT  ISNULL(B.USC_ORD_IDS, -1) AS USC_ORD_IDS&#xA; , A.COD_ASSESSORATO AS CODICE_ASSESSORATO&#xA; , A.AA_ORDINE AS ANNO_ORDINE&#xA; , A.NUM_ORDINE AS NUMERO_ORDINE&#xA; , A.NUM_RIGA AS NUMERO_RIGA&#xA; , 1 AS POSIZIONE_RIGA&#xA; , ISNULL(C.BEN_BEN_IDS, -1) AS BEN_BEN_IDS&#xA; , A.CODICE1*100+A.CODICE2*10+A.CODICE3 AS CATEGORIA_ECONOMICA&#xA; , A.NUM_BENEF AS NUMERO_BENEFICIARIO&#xA; , ISNULL(D.USC_PAR_IDS, -1) AS USC_PAR_IDS&#xA; , A.AA_DS AS ANNO_PARTITA&#xA; , A.NUM_DS AS NUMERO_PARTITA&#xA; , A.PROGR_DS AS PROGRESSIVO_PARTITA&#xA; , ISNULL(H.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , H.ESERCIZIO AS ESERCIZIO&#xA; , H.NUMERO_IMPEGNO AS NUMERO_IMPEGNO &#xA; , H.NUMERO_SUBIMPEGNO AS NUMERO_SUBIMPEGNO&#xA; , 1 AS POSIZIONE_IMPEGNO&#xA; , A.MODALITA_PAG AS MODALITA_PAGAMENTO&#xA; , A.CAUSALE AS CAUSALE&#xA; , A.FLAG_ANNULLATO AS FLAG_ANNULLATO&#xA; , A.IMP_RIGA_ORDINE AS IMPORTO_ORDINE&#xA; , A.RIT_PREVIDENZIALE AS RITENUTA_PREVIDENZIALE&#xA; , A.RIT_ERARIALE AS RITENUTA_ERARIALE&#xA; , A.RIT_VARIE AS RITENUTE_VARIE&#xA; , CASE WHEN B.NUMERO_PAGAMENTO IS NULL THEN 0&#xA; ELSE A.IMP_RIGA_ORDINE&#xA; END AS IMPORTO_PAGAMENTO_ORIGINALE&#xA; , ISNULL(E.CAU_SIO_IDS,-1) AS CAU_SIO_IDS&#xA; , A.COD_GESTIONALE AS CODICE_GESTIONALE&#xA; , cast('-1' as varchar(10)) AS NUMERO_DOCUMENTO_SPESA&#xA; , -1 AS TIPO_ORDINE&#xA; /** aggiunta del 26/08/2011 per inserire nuove direzioni da bw **/&#xA; , CAST('-1' AS CHAR(8)) AS CODICE_DIREZIONE_SAP&#xA; , CAST('-1' AS CHAR(8)) AS CODICE_STRUTTURA_SAP&#xA; /** da cambiare in descrizione mancante se non si risolve la questione tabella direzione con Balboni **/&#xA; , CAST('-1' AS CHAR(120)) AS DESCRIZIONE_DIREZIONE_SAP&#xA; , A.NUM_RIGA_PREC AS NUMERO_RIGA_SOSTITUITA&#xA; , ISNULL(F.BEN_BEN_IDS, -1) AS BEN_CES_IDS&#xA; , A.CODICE1_CESS*100+A.CODICE2_CESS*10+A.CODICE3_CESS AS CATEGORIA_ECONOMICA_BENEF_CESSIONARIO&#xA; , A.NUM_BENEF_CESS AS NUMERO_BENEFICIARIO_CESSIONARIO&#xA; , A.N_INTERCALARE AS NUMERO_INTERCALARE&#xA; , A.COD_ESENZIONE AS CODICE_ESENZIONE_BOLLO&#xA; , G.DESCRIZIONE AS DESCRIZIONE_ESENZIONE_BOLLO&#xA; , A.FLAG_TIPO_INCASSO&#xA; , A.CODICE_CIG&#xA; , A.CODICE_CUP&#xA; -- CAMPI MANCANTI IN SAP&#xA; , A.DATA_INVIO_MIF AS DATA_INVIO_MANDATO_INFORMATICO&#xA; , A.FLAG_PARZIALE&#xA; , NULL AS ANNO_LIQUIDAZIONE&#xA; , NULL AS NUMERO_LIQUIDAZIONE&#xA; , NULL AS POSIZIONE_LIQUIDAZIONE&#xA; , NULL AS STATO&#xA; , CAST(NULL AS CHAR) AS FLAG_PATTO&#xA; , H.CAPITOLO AS CAPITOLO_IMPEGNO&#xA; , CAST(NULL AS NVARCHAR(70)) AS TRANSAZIONE_ELEMENTARE&#xA; , CAST(NULL AS VARCHAR(10)) AS SIOPE_PDCF&#xA; , CAST(NULL AS DATETIME) AS SCADENZA_FATTURA&#xA;INTO #G_T_TRIGA_ORDINE_002&#xA;FROM #T_TRIGA_ORDINE_001 A&#xA; LEFT JOIN S_USC_ORDINE B&#xA; ON A.COD_ASSESSORATO = B.CODICE_ASSESSORATO&#xA; AND A.AA_ORDINE = B.ANNO_ORDINE&#xA; AND A.NUM_ORDINE = B.NUMERO_ORDINE&#xA;  LEFT JOIN S_BEN_BENEFICIARIO C&#xA;  ON A.NUM_BENEF = C.NUMERO_BENEFICIARIO&#xA;  AND A.CODICE1*100+A.CODICE2*10+A.CODICE3 = C.CATEGORIA_ECONOMICA_ORIGINALE&#xA;  AND C.FLAG_OCCASIONALE = 'N'&#xA;   LEFT JOIN S_USC_PARTITA D&#xA;   ON A.AA_DS = D.ANNO_PARTITA&#xA;   AND A.NUM_DS = D.NUMERO_PARTITA&#xA;   AND A.CODICE1*100+A.CODICE2*10+A.CODICE3 = D.CATEGORIA_ECONOMICA&#xA;   AND A.NUM_BENEF = D.NUMERO_BENEFICIARIO&#xA;   AND A.PROGR_DS = D.PROGRESSIVO_PARTITA&#xA;    LEFT JOIN S_CAU_SIOPE E&#xA;    ON &#xA;    --A.COD_GESTIONALE = E.CODICE_GESTIONALE&#xA;    /** aggiunta del 29/08/2011 per double counting su codice siope per NULL e 0 **/&#xA;    CASE WHEN (A.COD_GESTIONALE IS NULL OR A.COD_GESTIONALE='0')THEN '-1' ELSE A.COD_GESTIONALE END = E.CODICE_GESTIONALE&#xA;    --AND B.ANNO_BILANCIO &gt;= E.VALIDO_DA&#xA;    --AND B.ANNO_BILANCIO &lt; E.VALIDO_A&#xA;    AND ISNULL(B.ANNO_BILANCIO,A.AA_ORDINE) &gt;=  E.VALIDO_DA&#xA;    AND ISNULL(B.ANNO_BILANCIO,A.AA_ORDINE) &lt;= E.VALIDO_A&#xA;     LEFT JOIN S_BEN_BENEFICIARIO F&#xA;     ON A.NUM_BENEF_CESS = F.NUMERO_BENEFICIARIO&#xA;     AND A.CODICE1_CESS*100+A.CODICE2_CESS*10+A.CODICE3_CESS = F.CATEGORIA_ECONOMICA_ORIGINALE&#xA;     AND C.FLAG_OCCASIONALE = CASE WHEN A.CODICE1_CESS*100+A.CODICE2_CESS*10+A.CODICE3_CESS = 900&#xA;              AND A.AA_ORDINE &gt;= 2009&#xA;              THEN 'N'&#xA;              ELSE 'S'&#xA;            END&#xA;      LEFT JOIN #T_VF_T_COD_ESENZIONE_BOLLO_001 G&#xA;       ON A.COD_ESENZIONE = G.CODICE_ESENZIONE_BOLLO&#xA;        LEFT JOIN S_USC_RIGA_IMPEGNO H&#xA;        ON B.ESERCIZIO = H.ESERCIZIO&#xA;        AND B.NUMERO_IMPEGNO = H.NUMERO_IMPEGNO &#xA;        AND ISNULL(B.NUMERO_SUBIMPEGNO, 0) = ISNULL(H.NUMERO_SUBIMPEGNO,0)&#xA;        AND 1 = H.POSIZIONE&#xA;WHERE B.CODICE_ORDINE &lt;&gt; '99 '&#xA;UNION ALL&#xA;-- gli ordini con COD_ORDINE='99' hanno il beneficiario occasionale, quindi li tratto a parte&#xA;-- da ottobre 2009, i beneficiari del rimborso tasse automobilistiche (CEC 900), che sono&#xA;-- pagamenti con COD_ORDINE = '99' vengono inseriti come beneficiari NON occasionali&#xA;SELECT ISNULL(B.USC_ORD_IDS, -1) AS USC_ORD_IDS&#xA; , A.COD_ASSESSORATO AS CODICE_ASSESSORATO&#xA; , A.AA_ORDINE AS ANNO_ORDINE&#xA; , A.NUM_ORDINE AS NUMERO_ORDINE&#xA; , A.NUM_RIGA AS NUMERO_RIGA&#xA; , 1 AS POSIZIONE_RIGA&#xA; , ISNULL(C.BEN_BEN_IDS, -1) AS BEN_BEN_IDS&#xA; , A.CODICE1*100+A.CODICE2*10+A.CODICE3 AS CATEGORIA_ECONOMICA&#xA; , A.NUM_BENEF AS NUMERO_BENEFICIARIO&#xA; , -1 AS USC_PAR_IDS&#xA; , NULL AS ANNO_PARTITA&#xA; , NULL AS NUMERO_PARTITA&#xA; , NULL AS PROGRESSIVO_PARTITA&#xA; , ISNULL(H.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , H.ESERCIZIO AS ESERCIZIO&#xA; , H.NUMERO_IMPEGNO AS NUMERO_IMPEGNO &#xA; , H.NUMERO_SUBIMPEGNO AS NUMERO_SUBIMPEGNO&#xA; , 1 AS POSIZIONE_IMPEGNO&#xA; , A.MODALITA_PAG AS MODALITA_PAGAMENTO&#xA; , A.CAUSALE AS CAUSALE &#xA; , A.FLAG_ANNULLATO AS FLAG_ANNULLATO&#xA; , A.IMP_RIGA_ORDINE AS IMPORTO_ORDINE&#xA; , A.RIT_PREVIDENZIALE AS RITENUTA_PREVIDENZIALE&#xA; , A.RIT_ERARIALE AS RITENUTA_ERARIALE&#xA; , A.RIT_VARIE AS RITENUTE_VARIE&#xA; , CASE WHEN B.NUMERO_PAGAMENTO IS NULL THEN 0&#xA; ELSE A.IMP_RIGA_ORDINE&#xA; END AS IMPORTO_PAGAMENTO_ORIGINALE &#xA; , ISNULL(E.CAU_SIO_IDS,-1) AS CAU_SIO_IDS&#xA; , A.COD_GESTIONALE AS CODICE_GESTIONALE&#xA; , cast('-1' as varchar(10)) AS NUMERO_DOCUMENTO_SPESA&#xA; , -1 AS TIPO_ORDINE&#xA; /** aggiunta del 26/08/2011 per inserire nuove direzioni da bw **/&#xA; , CAST('-1' AS CHAR(8)) AS CODICE_DIREZIONE_SAP&#xA; , CAST('-1' AS CHAR(8)) AS CODICE_STRUTTURA_SAP&#xA; /** da cambiare in descrizione mancante se non si risolve la questione tabella direzione con Balboni **/&#xA; , CAST('-1' AS CHAR(120)) AS DESCRIZIONE_DIREZIONE_SAP&#xA; , A.NUM_RIGA_PREC AS NUMERO_RIGA_SOSTITUITA&#xA; , ISNULL(F.BEN_BEN_IDS, -1) AS BEN_CES_IDS&#xA; , A.CODICE1_CESS*100+A.CODICE2_CESS*10+A.CODICE3_CESS AS CATEGORIA_ECONOMICA_BENEF_CESSIONARIO&#xA; , A.NUM_BENEF_CESS AS NUMERO_BENEFICIARIO_CESSIONARIO&#xA; , A.N_INTERCALARE AS NUMERO_INTERCALARE&#xA; , A.COD_ESENZIONE AS CODICE_ESENZIONE_BOLLO&#xA; , G.DESCRIZIONE AS DESCRIZIONE_ESENZIONE_BOLLO&#xA; , A.FLAG_TIPO_INCASSO&#xA; , A.CODICE_CIG&#xA; , A.CODICE_CUP&#xA; -- CAMPI MANCANTI IN SAP&#xA; , A.DATA_INVIO_MIF AS DATA_INVIO_MANDATO_INFORMATICO&#xA; , A.FLAG_PARZIALE&#xA; , NULL AS ANNO_LIQUIDAZIONE&#xA; , NULL AS NUMERO_LIQUIDAZIONE&#xA; , NULL AS POSIZIONE_LIQUIDAZIONE&#xA; , NULL AS STATO&#xA; , CAST(NULL AS CHAR) AS FLAG_PATTO&#xA; , H.CAPITOLO AS CAPITOLO_IMPEGNO&#xA; , CAST(NULL AS NVARCHAR(70)) AS TRANSAZIONE_ELEMENTARE&#xA; , CAST(NULL AS VARCHAR(10)) AS SIOPE_PDCF&#xA; , CAST(NULL AS DATETIME) AS SCADENZA_FATTURA&#xA;FROM #T_TRIGA_ORDINE_001 A&#xA; LEFT JOIN S_USC_ORDINE B&#xA; ON A.COD_ASSESSORATO = B.CODICE_ASSESSORATO&#xA; AND A.AA_ORDINE = B.ANNO_ORDINE&#xA; AND A.NUM_ORDINE = B.NUMERO_ORDINE&#xA;  LEFT JOIN S_BEN_BENEFICIARIO C&#xA;  ON A.NUM_BENEF = C.NUMERO_BENEFICIARIO&#xA;  AND A.CODICE1*100+A.CODICE2*10+A.CODICE3 = C.CATEGORIA_ECONOMICA_ORIGINALE&#xA;  AND C.FLAG_OCCASIONALE = CASE WHEN A.CODICE1*100+A.CODICE2*10+A.CODICE3 = 900&#xA;           AND A.AA_ORDINE &gt;= 2009&#xA;           THEN 'N'&#xA;           ELSE 'S'&#xA;         END&#xA;   LEFT JOIN S_CAU_SIOPE E&#xA;   ON &#xA;--   A.COD_GESTIONALE = E.CODICE_GESTIONALE&#xA;   /** aggiunta del 29/08/2011 per double counting su codice siope per NULL e 0 **/&#xA;   CASE WHEN (A.COD_GESTIONALE IS NULL OR A.COD_GESTIONALE='0')THEN '-1' ELSE A.COD_GESTIONALE END = E.CODICE_GESTIONALE&#xA;--    AND B.ANNO_BILANCIO &gt;= E.VALIDO_DA&#xA;--    AND B.ANNO_BILANCIO &lt; E.VALIDO_A&#xA;   AND ISNULL(B.ANNO_BILANCIO,A.AA_ORDINE) &gt;=  E.VALIDO_DA&#xA;   AND ISNULL(B.ANNO_BILANCIO,A.AA_ORDINE) &lt;= E.VALIDO_A&#xA;    LEFT JOIN S_BEN_BENEFICIARIO F&#xA;    ON A.NUM_BENEF_CESS = F.NUMERO_BENEFICIARIO&#xA;    AND A.CODICE1_CESS*100+A.CODICE2_CESS*10+A.CODICE3_CESS = F.CATEGORIA_ECONOMICA_ORIGINALE&#xA;    AND C.FLAG_OCCASIONALE = CASE WHEN A.CODICE1_CESS*100+A.CODICE2_CESS*10+A.CODICE3_CESS = 900&#xA;             AND A.AA_ORDINE &gt;= 2009&#xA;             THEN 'N'&#xA;             ELSE 'S'&#xA;           END&#xA;      LEFT JOIN #T_VF_T_COD_ESENZIONE_BOLLO_001 G&#xA;       ON A.COD_ESENZIONE = G.CODICE_ESENZIONE_BOLLO&#xA;        LEFT JOIN S_USC_RIGA_IMPEGNO H&#xA;        ON B.ESERCIZIO = H.ESERCIZIO&#xA;        AND B.NUMERO_IMPEGNO = H.NUMERO_IMPEGNO &#xA;        AND ISNULL(B.NUMERO_SUBIMPEGNO, 0) = ISNULL(H.NUMERO_SUBIMPEGNO,0)&#xA;        AND 1 = H.POSIZIONE&#xA;WHERE B.CODICE_ORDINE = '99 '&#xA;UNION ALL&#xA;-- alcuni ordini sono completamente senza le righe, quindi ci devo mettere una riga &quot;fittizia&quot; con il loro importo&#xA;SELECT ISNULL(B.USC_ORD_IDS, -1) AS USC_ORD_IDS&#xA; , A.COD_ASSESSORATO AS CODICE_ASSESSORATO&#xA; , A.AA_ORDINE AS ANNO_ORDINE&#xA; , A.NUM_ORDINE AS NUMERO_ORDINE&#xA; , 1 AS NUMERO_RIGA --forzatura&#xA; , 1 AS POSIZIONE_RIGA&#xA; , -1  AS BEN_BEN_IDS&#xA; , NULL AS CATEGORIA_ECONOMICA&#xA; , NULL AS NUMERO_BENEFICIARIO&#xA; , -1  AS USC_PAR_IDS&#xA; , NULL AS ANNO_PARTITA&#xA; , NULL AS NUMERO_PARTITA&#xA; , NULL AS PROGRESSIVO_PARTITA&#xA; , ISNULL(H.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , H.ESERCIZIO AS ESERCIZIO&#xA; , H.NUMERO_IMPEGNO AS NUMERO_IMPEGNO &#xA; , H.NUMERO_SUBIMPEGNO AS NUMERO_SUBIMPEGNO&#xA; , 1 AS POSIZIONE_IMPEGNO&#xA; , NULL AS MODALITA_PAGAMENTO&#xA; , NULL AS CAUSALE&#xA; , NULL AS FLAG_ANNULLATO&#xA; , A.IMP_ORDINE AS IMPORTO_ORDINE&#xA; , 0 AS RITENUTA_PREVIDENZIALE&#xA; , 0 AS RITENUTA_ERARIALE&#xA; , 0 AS RITENUTE_VARIE&#xA; , CASE WHEN B.NUMERO_PAGAMENTO IS NULL THEN 0&#xA; ELSE A.IMP_ORDINE &#xA; END AS IMPORTO_PAGAMENTO_ORIGINALE &#xA; , -1 AS CAU_SIO_IDS&#xA; , -1 AS CODICE_GESTIONALE&#xA;    , cast('-1' as varchar(10)) AS NUMERO_DOCUMENTO_SPESA&#xA; , -1 AS TIPO_ORDINE&#xA; /** aggiunta del 26/08/2011 per inserire nuove direzioni da bw **/&#xA; , CAST('-1' AS CHAR(8)) AS CODICE_DIREZIONE_SAP&#xA; , CAST('-1' AS CHAR(8)) AS CODICE_STRUTTURA_SAP&#xA; /** da cambiare in descrizione mancante se non si risolve la questione tabella direzione con Balboni **/&#xA; , CAST('-1' AS CHAR(120)) AS DESCRIZIONE_DIREZIONE_SAP&#xA; , NULL AS NUMERO_RIGA_SOSTITUITA&#xA; , -1 AS BEN_CES_IDS&#xA; , NULL AS CATEGORIA_ECONOMICA_BENEF_CESSIONARIO&#xA; , NULL AS NUMERO_BENEFICIARIO_CESSIONARIO&#xA; , NULL AS NUMERO_INTERCALARE&#xA; , NULL AS CODICE_ESENZIONE_BOLLO&#xA; , NULL AS DESCRIZIONE_ESENZIONE_BOLLO&#xA; , NULL AS FLAG_TIPO_INCASSO&#xA; , NULL AS CODICE_CIG&#xA; , NULL AS CODICE_CUP&#xA; -- CAMPI MANCANTI IN SAP&#xA; , NULL AS DATA_INVIO_MANDATO_INFORMATICO&#xA; , NULL AS FLAG_PARZIALE&#xA; , NULL AS ANNO_LIQUIDAZIONE&#xA; , NULL AS NUMERO_LIQUIDAZIONE&#xA; , NULL AS POSIZIONE_LIQUIDAZIONE&#xA; , NULL AS STATO&#xA; , CAST(NULL AS CHAR) AS FLAG_PATTO&#xA; , H.CAPITOLO AS CAPITOLO_IMPEGNO&#xA; , CAST(NULL AS NVARCHAR(70)) AS TRANSAZIONE_ELEMENTARE&#xA; , CAST(NULL AS VARCHAR(10)) AS SIOPE_PDCF&#xA; , CAST(NULL AS DATETIME) AS SCADENZA_FATTURA&#xA;FROM T_TORDINE_PAGAMENTO A&#xA; LEFT JOIN S_USC_ORDINE B&#xA; ON A.COD_ASSESSORATO = B.CODICE_ASSESSORATO&#xA; AND A.AA_ORDINE = B.ANNO_ORDINE&#xA; AND A.NUM_ORDINE = B.NUMERO_ORDINE&#xA;  LEFT JOIN S_USC_RIGA_IMPEGNO H&#xA;  ON B.ESERCIZIO = H.ESERCIZIO&#xA;  AND B.NUMERO_IMPEGNO = H.NUMERO_IMPEGNO &#xA;  AND ISNULL(B.NUMERO_SUBIMPEGNO, 0) = ISNULL(H.NUMERO_SUBIMPEGNO,0)&#xA;  AND 1 = H.POSIZIONE&#xA;WHERE A.COD_UTENTE = @COD_UTENTE_DB2&#xA;AND A.NUMERO_RIGHE = 0&#xA;UNION ALL &#xA;SELECT ISNULL(B.USC_ORD_IDS, -1) AS USC_ORD_IDS&#xA; , NULL AS CODICE_ASSESSORATO&#xA; , A.ANNO_ORDINE_PAGAMENTO AS ANNO_ORDINE&#xA; , A.NUMERO_ORDINE_PAGAMENTO AS NUMERO_ORDINE&#xA; , A.POSIZIONE_ORDINE_PAGAMENTO AS NUMERO_RIGA&#xA; , A.POSIZIONE_RIGA AS POSIZIONE_RIGA&#xA; , ISNULL(C.BEN_BEN_IDS, -1) AS BEN_BEN_IDS&#xA; , C.CATEGORIA_ECONOMICA AS CATEGORIA_ECONOMICA&#xA; , A.BENEFICIARIO AS NUMERO_BENEFICIARIO&#xA; --, -1 AS USC_PAR_IDS &#xA; --, NULL AS ANNO_PARTITA&#xA; --, NULL AS NUMERO_PARTITA&#xA; --, NULL AS PROGRESSIVO_PARTITA&#xA; , ISNULL(H.USC_PAR_IDS, -1) AS USC_PAR_IDS&#xA; , H.ANNO_PARTITA AS ANNO_PARTITA&#xA; , H.NUMERO_PARTITA AS NUMERO_PARTITA&#xA; , H.PROGRESSIVO_PARTITA AS PROGRESSIVO_PARTITA&#xA; , ISNULL(D.USC_RIG_IMP_IDS, -1) AS USC_RIG_IMP_IDS&#xA; , A.ESERCIZIO_IMPEGNO AS ESERCIZIO&#xA; , RIGHT(A.NUMERO_IMPEGNO,6) AS NUMERO_IMPEGNO&#xA; , NULL AS NUMERO_SUBIMPEGNO&#xA; , D.POSIZIONE AS POSIZIONE_IMPEGNO&#xA; , CASE WHEN LEN(LTRIM(RTRIM(A.TIPO_INCASSO))) = 0 &#xA;   THEN A.MOD_PAGAMENTO&#xA;   ELSE A.MOD_PAGAMENTO_CES&#xA;   END AS MODALITA_PAGAMENTO&#xA; , A.TESTO_POSIZIONE AS CAUSALE&#xA; , CASE WHEN A.FLAG_ANNULLATO = 'X' THEN 'S' ELSE 'N' END AS FLAG_ANNULLATO&#xA; , A.IMPORTO_PAGAMENTO AS IMPORTO_ORDINE&#xA; , CASE WHEN A.TIPO_ORDINE = 1 OR A.TIPO_ORDINE = 8 OR A.TIPO_ORDINE = 9 THEN 0 else A.IMPORTO_RITENUTE_PREV END AS RITENUTA_PREVIDENZIALE&#xA; , CASE WHEN A.TIPO_ORDINE = 1 OR A.TIPO_ORDINE = 8 OR A.TIPO_ORDINE = 9 THEN 0 else A.IMPORTO_RITENUTE_ERAR END AS RITENUTA_ERARIALE&#xA; , CASE WHEN A.TIPO_ORDINE = 1 OR A.TIPO_ORDINE = 8 OR A.TIPO_ORDINE = 9 THEN 0 else A.IMPORTO_RITENUTE_ALTR END AS RITENUTE_VARIE&#xA; , CASE WHEN B.NUMERO_PAGAMENTO IS NULL THEN 0&#xA; ELSE A.IMPORTO_PAGAMENTO  &#xA; END AS IMPORTO_PAGAMENTO_ORIGINALE &#xA; , ISNULL(E.CAU_SIO_IDS,-1) AS CAU_SIO_IDS&#xA; --, -1 AS CAU_SIO_IDS&#xA; , A.CODICE_SIOPE AS CODICE_GESTIONALE&#xA; --, NULL AS CODICE_GESTIONALE&#xA; , A.NUMERO_DOC_SPESA AS NUMERO_DOCUMENTO_SPESA&#xA; , A.TIPO_ORDINE&#xA;    /** aggiunta del 26/08/2011 per inserire nuove direzioni da bw **/&#xA; , ISNULL(G.CODICE_DIREZIONE, -1) AS CODICE_DIREZIONE_SAP&#xA; , ISNULL(G.CODICE_STRUTTURA, -1) AS CODICE_STRUTTURA_SAP&#xA; /** da cambiare in descrizione mancante se non si risolve la questione tabella direzione con Balboni **/&#xA; , ISNULL(G.DESCRIZIONE_DIREZIONE, -1) AS DESCRIZIONE_DIREZIONE_SAP&#xA; , A.POSIZIONE_MANDATO_SOSTITUITO AS NUMERO_RIGA_SOSTITUITA&#xA; , ISNULL(I.BEN_BEN_IDS, -1) AS BEN_CES_IDS&#xA; , NULL AS CATEGORIA_ECONOMICA_BENEF_CESSIONARIO&#xA; , NULL AS NUMERO_BENEFICIARIO_CESSIONARIO&#xA; , A.NUMERO_INTERCALARE AS NUMERO_INTERCALARE&#xA; , A.CODICE_ESENZIONE_BOLLO AS CODICE_ESENZIONE_BOLLO&#xA; , L.DESCRIZIONE AS DESCRIZIONE_ESENZIONE_BOLLO&#xA; , A.TIPO_INCASSO AS FLAG_TIPO_INCASSO&#xA; , A.CODICE_CIG&#xA; , A.CODICE_CUP&#xA; -- CAMPI MANCANTI IN SAP&#xA; , CAST(NULL AS DATETIME) AS DATA_INVIO_MANDATO_INFORMATICO&#xA; , NULL AS FLAG_PARZIALE&#xA; , A.ESERCIZIO_LIQUIDAZIONE AS ANNO_LIQUIDAZIONE&#xA; , A.NUMERO_LIQUIDAZIONE AS NUMERO_LIQUIDAZIONE&#xA; , A.POSIZIONE_LIQUIDAZIONE AS POSIZIONE_LIQUIDAZIONE&#xA; , B.STATO AS STATO&#xA; , CASE WHEN LTRIM(RTRIM(A.patto_stab_territoriale)) = 'X'&#xA;  THEN 'S'&#xA;  ELSE NULL&#xA;   END AS FLAG_PATTO&#xA; , D.CAPITOLO AS CAPITOLO_IMPEGNO&#xA; , CASE WHEN LEN(LTRIM(RTRIM(TRANS_EL1))) = 0&#xA;  THEN NULL&#xA;  ELSE LTRIM(RTRIM(TRANS_EL1)) + LTRIM(RTRIM(TRANS_EL2))&#xA; END AS TRANSAZIONE_ELEMENTARE&#xA; , A.SIOPE_PDCF&#xA; , CASE WHEN ISDATE(A.DATA_SCAD_FATT) = 1 THEN  CONVERT(DATETIME, A.DATA_SCAD_FATT) ELSE NULL END AS SCADENZA_FATTURA&#xA;FROM #G_T_VF_ORDINI_MANDATI_POSIZIONE_T_001 A&#xA; LEFT JOIN S_USC_ORDINE B &#xA; ON A.ANNO_ORDINE_PAGAMENTO = B.ANNO_ORDINE&#xA; AND A.NUMERO_ORDINE_PAGAMENTO = B.NUMERO_ORDINE&#xA;  LEFT JOIN S_BEN_BENEFICIARIO C&#xA;  ON A.BENEFICIARIO = C.CHIAVE_SAP&#xA;   LEFT JOIN S_USC_RIGA_IMPEGNO D&#xA;   ON RIGHT(A.NUMERO_IMPEGNO,6) = D.NUMERO_IMPEGNO&#xA;   AND A.ESERCIZIO_IMPEGNO = D.ESERCIZIO&#xA;   AND D.NUMERO_SUBIMPEGNO IS NULL&#xA;   -- LE POSIZIONI SUGLI IMPEGNI CI SONO A PARTIRE&#xA;   -- DAL 2011, MA CI SONO DEI PICCOLI ERRORI FATTI DAGLI UTENTI&#xA;   -- PER CUI DEGLI IMPEGNI PRIMA DEL 2011 HANNO POSIZIONE&#xA;   -- DIVERSA DA 1&#xA;   -- PER QUESTI CASI, SI COLLEGA ALLA POSIZIONE 1&#xA;   AND CASE WHEN A.ESERCIZIO_IMPEGNO &lt; 2011&#xA;     THEN 1&#xA;     ELSE CAST(A.POSIZIONE_RIGA AS INT)&#xA;    END = D.POSIZIONE&#xA;    LEFT JOIN S_CAU_SIOPE E /** modifica effettuata il 25/08/2011 per double counting su codici siope(temporaneo da rivedere)**/&#xA;    ON case when A.CODICE_SIOPE='0000' then '-1' else a.codice_siope end = E.CODICE_GESTIONALE&#xA;    AND CASE WHEN B.ANNO_BILANCIO IS NULL&#xA;      OR B.ANNO_BILANCIO = -1 &#xA;      THEN A.ANNO_ORDINE_PAGAMENTO&#xA;      ELSE B.ANNO_BILANCIO END &gt;=  E.VALIDO_DA&#xA;    AND CASE WHEN B.ANNO_BILANCIO IS NULL&#xA;      OR B.ANNO_BILANCIO = -1 &#xA;      THEN A.ANNO_ORDINE_PAGAMENTO&#xA;      ELSE B.ANNO_BILANCIO END &lt;= E.VALIDO_A&#xA;     LEFT JOIN #T_VF_T_TIPO_QUIETANZA F&#xA;     ON A.TIPO_QUIETANZA = F.TIPOLOGIA_QUIETANZA&#xA;      LEFT JOIN #G_T_VF_ORDINI_MANDATI_TESTATA_T_001 G&#xA;      ON A.ANNO_ORDINE_PAGAMENTO = G.ANNO_ORDINE_PAGAMENTO&#xA;      AND A.NUMERO_ORDINE_PAGAMENTO = G.NUMERO_ORDINE_PAGAMENTO&#xA;       LEFT JOIN S_USC_PARTITA H&#xA;       ON A.NUMERO_DOC_SPESA = H.CHIAVE_SAP&#xA;       AND A.BENEFICIARIO = H.CHIAVE_SAP_BENEFICIARIO&#xA;       AND RIGHT(A.CAPITOLO,5) = H.CAPITOLO &#xA;        LEFT JOIN S_BEN_BENEFICIARIO I&#xA;        ON A.NUM_CONTO_FORNITORE = I.CHIAVE_SAP&#xA;         LEFT JOIN #T_VF_T_COD_ESENZIONE_BOLLO_001 L&#xA;         ON cast(cast(A.CODICE_ESENZIONE_BOLLO as int) as varchar) = L.CODICE_ESENZIONE_BOLLO&#xA;          LEFT JOIN S_BEN_MODALITA_QUIETANZA M&#xA;          ON A.TIPO_QUIETANZA_CESSIONARI = M.CODICE_MOD_QUIETANZA&#xA;&#xA;-- CREAZIONE S_TABLE&#xA;if exists (select * from dbo.sysobjects where id = object_id(N'[S_USC_RIGA_ORDINE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;drop table [S_USC_RIGA_ORDINE]&#xA;&#xA;SELECT &#xA; IDENTITY(INT,1,1) AS USC_ROR_IDS&#xA; ,ISNULL(B.USC_ORD_IDS, -1) AS USC_ORD_IDS&#xA; , ISNULL(A.CODICE_ASSESSORATO, -1) AS CODICE_ASSESSORATO&#xA; , A.ANNO_ORDINE AS ANNO_ORDINE&#xA; , A.NUMERO_ORDINE AS NUMERO_ORDINE&#xA; , ISNULL(A.NUMERO_RIGA,1) AS NUMERO_RIGA&#xA; , A.POSIZIONE_RIGA AS POSIZIONE_RIGA&#xA; , A.BEN_BEN_IDS AS BEN_BEN_IDS&#xA; , A.CATEGORIA_ECONOMICA AS CATEGORIA_ECONOMICA&#xA; , A.NUMERO_BENEFICIARIO AS NUMERO_BENEFICIARIO&#xA; , ISNULL(A.USC_PAR_IDS,-1) AS USC_PAR_IDS&#xA; , A.ANNO_PARTITA AS ANNO_PARTITA&#xA; , A.NUMERO_PARTITA AS NUMERO_PARTITA&#xA; , A.PROGRESSIVO_PARTITA AS PROGRESSIVO_PARTITA&#xA; , A.USC_RIG_IMP_IDS &#xA; , A.ESERCIZIO AS ESERCIZIO &#xA; , A.NUMERO_IMPEGNO AS NUMERO_IMPEGNO&#xA; , A.NUMERO_SUBIMPEGNO AS NUMERO_SUBIMPEGNO&#xA; , A.POSIZIONE_IMPEGNO&#xA; , A.MODALITA_PAGAMENTO AS MODALITA_PAGAMENTO&#xA; , A.CAUSALE AS CAUSALE &#xA; , CASE WHEN F.CODICE_FORMATTATO = 'U.7.01.99.01.000' AND B.CODICE_STATO_MIF = 'S'&#xA;     THEN 'S'&#xA;     ELSE A.FLAG_ANNULLATO&#xA;   END AS FLAG_ANNULLATO&#xA; , A.CAU_SIO_IDS AS CAU_SIO_IDS&#xA; , A.CODICE_GESTIONALE AS CODICE_GESTIONALE&#xA; , B.ANNO_BILANCIO AS ANNO_BILANCIO&#xA; , B.NUMERO_PAGAMENTO AS NUMERO_PAGAMENTO&#xA; , B.TIPO_PAGAMENTO AS  TIPO_PAGAMENTO&#xA; , A.NUMERO_DOCUMENTO_SPESA AS NUMERO_DOCUMENTO_SPESA&#xA; , A.TIPO_ORDINE AS TIPO_ORDINE&#xA; , B.CODICE_ORDINE AS CODICE_ORDINE&#xA; , B.DATA_PAGAMENTO AS DATA_PAGAMENTO&#xA; , B.CAU_CAU_IDS_CASSA AS CAU_CAU_IDS_CASSA&#xA; , B.USC_DIR_IDS AS USC_DIR_IDS&#xA; , B.DATA_ORDINE AS DATA_ORDINE&#xA; , A.CODICE_DIREZIONE_SAP&#xA; , A.CODICE_STRUTTURA_SAP&#xA; , A.DESCRIZIONE_DIREZIONE_SAP&#xA; , A.NUMERO_RIGA_SOSTITUITA&#xA; , A.BEN_CES_IDS&#xA; , A.CATEGORIA_ECONOMICA_BENEF_CESSIONARIO&#xA; , A.NUMERO_BENEFICIARIO_CESSIONARIO&#xA; , A.NUMERO_INTERCALARE&#xA; , A.CODICE_ESENZIONE_BOLLO&#xA; , A.DESCRIZIONE_ESENZIONE_BOLLO&#xA; , ISNULL(C.TIP_INC_IDS, -1) AS TIP_INC_IDS&#xA; , A.FLAG_TIPO_INCASSO&#xA; , CASE WHEN LEN(LTRIM(RTRIM(A.CODICE_CIG))) = 0&#xA;  THEN NULL &#xA;  ELSE A.CODICE_CIG&#xA;   END AS CODICE_CIG&#xA; , CASE WHEN LEN(LTRIM(RTRIM(A.CODICE_CUP))) = 0&#xA;  THEN NULL&#xA;  ELSE A.CODICE_CUP&#xA;  END AS CODICE_CUP&#xA; -- CAMPI MANCANTI IN SAP&#xA; , A.DATA_INVIO_MANDATO_INFORMATICO&#xA; , A.FLAG_PARZIALE&#xA; , ISNULL(D.USC_LIQ_POS_IDS, -1) AS USC_LIQ_POS_IDS&#xA; , A.ANNO_LIQUIDAZIONE&#xA; , A.NUMERO_LIQUIDAZIONE&#xA; , A.POSIZIONE_LIQUIDAZIONE&#xA; , A.STATO&#xA; , A.FLAG_PATTO&#xA; , A.CAPITOLO_IMPEGNO&#xA; , A.TRANSAZIONE_ELEMENTARE&#xA; , ISNULL(E.CAU_PCFNL5_118_IDS, -1) AS CAU_PCFNL5_118_IDS&#xA; , ISNULL(F.CAU_PCFNL4_118_IDS, -1) AS CAU_PCFNL4_118_IDS&#xA; , ISNULL(G.CAU_PCFNL3_118_IDS, -1) AS CAU_PCFNL3_118_IDS&#xA; , ISNULL(H.CAU_PCFNL2_118_IDS, -1) AS CAU_PCFNL2_118_IDS&#xA; , ISNULL(I.CAU_PCFNL1_118_IDS, -1) AS CAU_PCFNL1_118_IDS&#xA; , CASE WHEN F.CODICE_FORMATTATO = 'U.7.01.99.01.000' AND B.CODICE_STATO_MIF = 'S'&#xA;     THEN 'S'&#xA;     ELSE B.ESCLUDI_DA_F24EP&#xA;   END AS ESCLUDI_DA_F24EP&#xA; , A.SIOPE_PDCF&#xA; , A.SCADENZA_FATTURA&#xA;INTO S_USC_RIGA_ORDINE&#xA;FROM #G_T_TRIGA_ORDINE_002 A&#xA; LEFT JOIN S_USC_ORDINE B&#xA; ON ISNULL(A.CODICE_ASSESSORATO,-1) = ISNULL(B.CODICE_ASSESSORATO,-1)&#xA; AND A.ANNO_ORDINE = B.ANNO_ORDINE&#xA; AND A.NUMERO_ORDINE = B.NUMERO_ORDINE&#xA; AND ISNULL(A.CODICE_DIREZIONE_SAP,-1) = ISNULL(B.CODICE_DIREZIONE_SAP,-1)/** aggiunta del 26/08/2011 per inserire nuove direzioni da bw **/&#xA;  LEFT JOIN S_USC_TIPO_INCASSO C&#xA;  ON A.FLAG_TIPO_INCASSO = C.TIPO_INCASSO&#xA;   LEFT JOIN S_USC_POSIZIONE_LIQUIDAZIONE D&#xA;   ON D.ANNO_LIQUIDAZIONE = A.ANNO_LIQUIDAZIONE&#xA;   AND D.NUMERO_LIQUIDAZIONE = A.NUMERO_LIQUIDAZIONE&#xA;   AND D.POSIZIONE_RIGA = A.POSIZIONE_LIQUIDAZIONE&#xA;    LEFT JOIN S_CAU_PDC_LIVELLO5_LEGGE_118 E&#xA;    ON RIGHT(LEFT(A.TRANSAZIONE_ELEMENTARE,22),16) = E.CODICE_FORMATTATO&#xA;    AND B.DATA_PAGAMENTO BETWEEN E.DATA_INIZIO_VALIDITA AND E.DATA_FINE_VALIDITA&#xA;     LEFT JOIN S_CAU_PDC_LIVELLO4_LEGGE_118 F&#xA;     ON RIGHT(LEFT(A.TRANSAZIONE_ELEMENTARE,18),12) = LEFT(F.CODICE_FORMATTATO,12)&#xA;     AND B.DATA_PAGAMENTO BETWEEN F.DATA_INIZIO_VALIDITA AND F.DATA_FINE_VALIDITA&#xA;      LEFT JOIN S_CAU_PDC_LIVELLO3_LEGGE_118 G&#xA;      ON RIGHT(LEFT(A.TRANSAZIONE_ELEMENTARE,15),9) = LEFT(G.CODICE_FORMATTATO,9)&#xA;      AND B.DATA_PAGAMENTO BETWEEN G.DATA_INIZIO_VALIDITA AND G.DATA_FINE_VALIDITA&#xA;       LEFT JOIN S_CAU_PDC_LIVELLO2_LEGGE_118 H&#xA;       ON RIGHT(LEFT(A.TRANSAZIONE_ELEMENTARE,12),6) = LEFT(H.CODICE_FORMATTATO,6)&#xA;       AND B.DATA_PAGAMENTO BETWEEN H.DATA_INIZIO_VALIDITA AND H.DATA_FINE_VALIDITA&#xA;        LEFT JOIN S_CAU_PDC_LIVELLO1_LEGGE_118 I&#xA;        ON RIGHT(LEFT(A.TRANSAZIONE_ELEMENTARE,9),3) = LEFT(I.CODICE_FORMATTATO,3)&#xA;        AND B.DATA_PAGAMENTO BETWEEN I.DATA_INIZIO_VALIDITA AND I.DATA_FINE_VALIDITA&#xA;&#xA;set identity_insert S_USC_RIGA_ORDINE on&#xA;insert into S_USC_RIGA_ORDINE (USC_ROR_IDS, USC_ORD_IDS, BEN_BEN_IDS, &#xA;USC_PAR_IDS, USC_RIG_IMP_IDS, CAU_SIO_IDS, ANNO_BILANCIO,  CODICE_ASSESSORATO, NUMERO_RIGA, NUMERO_DOCUMENTO_SPESA,TIPO_ORDINE,&#xA;BEN_CES_IDS, TIP_INC_IDS, USC_LIQ_POS_IDS,CAU_PCFNL5_118_IDS,CAU_PCFNL4_118_IDS,CAU_PCFNL3_118_IDS,CAU_PCFNL2_118_IDS,CAU_PCFNL1_118_IDS)&#xA;values(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1, -1, -1, -1, -1,-1, -1, -1, -1)&#xA;set identity_insert S_USC_RIGA_ORDINE off&#xA;&#xA;DROP TABLE #T_VF_T_COD_ESENZIONE_BOLLO&#xA;DROP TABLE #T_VF_ORDINI_MANDATI_POSIZIONE_T&#xA;DROP TABLE #T_TRIGA_ORDINE_001&#xA;DROP TABLE #T_VF_T_TIPO_QUIETANZA&#xA;DROP TABLE #G_T_VF_ORDINI_MANDATI_TESTATA_T_001&#xA;DROP TABLE #T_TTABDECODIFICA&#xA;DROP TABLE #T_VF_T_COD_ESENZIONE_BOLLO_001&#xA;&#xA;--drop table #G_T_VF_ORDINI_MANDATI_POSIZIONE_T_001&#xA;--drop table #G_T_TRIGA_ORDINE_002" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="136,44"
          Id="Package\SF_USC_PARTITA"
          TopLeft="179.754716981135,66.849056603774" />
        <NodeLayout
          Size="136,44"
          Id="Package\S_USC_PARTITA"
          TopLeft="178,126" />
        <NodeLayout
          Size="169,42"
          Id="Package\SF_USC_IMPEGNO"
          TopLeft="150,18.849056603774" />
        <NodeLayout
          Size="136,44"
          Id="Package\S_USC_RIGA_ORDINE"
          TopLeft="178.754716981135,179" />
        <NodeLayout
          Size="136,44"
          Id="Package\S_USC_ORDINE"
          TopLeft="369.088050314468,16.9999999999998" />
        <NodeLayout
          Size="164,42"
          Id="Package\S_USC_IMPEGNO"
          TopLeft="369.088050314468,186" />
        <NodeLayout
          Size="192,42"
          Id="Package\S_USC_RIGA_IMPEGNO"
          TopLeft="354,130" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>